
fruit_sorting_bot_FBpart.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000218  00800200  0000249e  00002532  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000249e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002c  00800418  00800418  0000274a  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  0000274a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000064e  00000000  00000000  0000276a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001843  00000000  00000000  00002db8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000028d  00000000  00000000  000045fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000175a  00000000  00000000  00004888  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000450  00000000  00000000  00005fe4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000631  00000000  00000000  00006434  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000850  00000000  00000000  00006a65  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  000072b5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b3 00 	jmp	0x166	; 0x166 <__ctors_end>
       4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
       8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
       c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      10:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      14:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__vector_5>
      18:	0c 94 46 03 	jmp	0x68c	; 0x68c <__vector_6>
      1c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      20:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      24:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      28:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      2c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      30:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      34:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      38:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      3c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      40:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      44:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      48:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      4c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      50:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      54:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      58:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      5c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      60:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      64:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      68:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      6c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      70:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      74:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      78:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      7c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      80:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      84:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      88:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      8c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      90:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      94:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      98:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      9c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      a0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      a4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      a8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      ac:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      b0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      b4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      b8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      bc:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      c0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      c4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      c8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      cc:	0c 94 30 06 	jmp	0xc60	; 0xc60 <__vector_51>
      d0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      d4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      d8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      dc:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      e0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      e4:	07 63       	ori	r16, 0x37	; 55
      e6:	42 36       	cpi	r20, 0x62	; 98
      e8:	b7 9b       	sbis	0x16, 7	; 22
      ea:	d8 a7       	std	Y+40, r29	; 0x28
      ec:	1a 39       	cpi	r17, 0x9A	; 154
      ee:	68 56       	subi	r22, 0x68	; 104
      f0:	18 ae       	std	Y+56, r1	; 0x38
      f2:	ba ab       	std	Y+50, r27	; 0x32
      f4:	55 8c       	ldd	r5, Z+29	; 0x1d
      f6:	1d 3c       	cpi	r17, 0xCD	; 205
      f8:	b7 cc       	rjmp	.-1682   	; 0xfffffa68 <__eeprom_end+0xff7efa68>
      fa:	57 63       	ori	r21, 0x37	; 55
      fc:	bd 6d       	ori	r27, 0xDD	; 221
      fe:	ed fd       	.word	0xfded	; ????
     100:	75 3e       	cpi	r23, 0xE5	; 229
     102:	f6 17       	cp	r31, r22
     104:	72 31       	cpi	r23, 0x12	; 18
     106:	bf 00       	.word	0x00bf	; ????
     108:	00 00       	nop
     10a:	80 3f       	cpi	r24, 0xF0	; 240
     10c:	08 00       	.word	0x0008	; ????
     10e:	00 00       	nop
     110:	be 92       	st	-X, r11
     112:	24 49       	sbci	r18, 0x94	; 148
     114:	12 3e       	cpi	r17, 0xE2	; 226
     116:	ab aa       	std	Y+51, r10	; 0x33
     118:	aa 2a       	or	r10, r26
     11a:	be cd       	rjmp	.-1156   	; 0xfffffc98 <__eeprom_end+0xff7efc98>
     11c:	cc cc       	rjmp	.-1640   	; 0xfffffab6 <__eeprom_end+0xff7efab6>
     11e:	4c 3e       	cpi	r20, 0xEC	; 236
     120:	00 00       	nop
     122:	00 80       	ld	r0, Z
     124:	be ab       	std	Y+54, r27	; 0x36
     126:	aa aa       	std	Y+50, r10	; 0x32
     128:	aa 3e       	cpi	r26, 0xEA	; 234
     12a:	00 00       	nop
     12c:	00 00       	nop
     12e:	bf 00       	.word	0x00bf	; ????
     130:	00 00       	nop
     132:	80 3f       	cpi	r24, 0xF0	; 240
     134:	00 00       	nop
     136:	00 00       	nop
     138:	00 08       	sbc	r0, r0
     13a:	41 78       	andi	r20, 0x81	; 129
     13c:	d3 bb       	out	0x13, r29	; 19
     13e:	43 87       	std	Z+11, r20	; 0x0b
     140:	d1 13       	cpse	r29, r17
     142:	3d 19       	sub	r19, r13
     144:	0e 3c       	cpi	r16, 0xCE	; 206
     146:	c3 bd       	out	0x23, r28	; 35
     148:	42 82       	std	Z+2, r4	; 0x02
     14a:	ad 2b       	or	r26, r29
     14c:	3e 68       	ori	r19, 0x8E	; 142
     14e:	ec 82       	std	Y+4, r14	; 0x04
     150:	76 be       	out	0x36, r7	; 54
     152:	d9 8f       	std	Y+25, r29	; 0x19
     154:	e1 a9       	ldd	r30, Z+49	; 0x31
     156:	3e 4c       	sbci	r19, 0xCE	; 206
     158:	80 ef       	ldi	r24, 0xF0	; 240
     15a:	ff be       	out	0x3f, r15	; 63
     15c:	01 c4       	rjmp	.+2050   	; 0x960 <lcd_cursor+0x2a>
     15e:	ff 7f       	andi	r31, 0xFF	; 255
     160:	3f 00       	.word	0x003f	; ????
     162:	00 00       	nop
	...

00000166 <__ctors_end>:
     166:	11 24       	eor	r1, r1
     168:	1f be       	out	0x3f, r1	; 63
     16a:	cf ef       	ldi	r28, 0xFF	; 255
     16c:	d1 e2       	ldi	r29, 0x21	; 33
     16e:	de bf       	out	0x3e, r29	; 62
     170:	cd bf       	out	0x3d, r28	; 61
     172:	00 e0       	ldi	r16, 0x00	; 0
     174:	0c bf       	out	0x3c, r16	; 60

00000176 <__do_copy_data>:
     176:	14 e0       	ldi	r17, 0x04	; 4
     178:	a0 e0       	ldi	r26, 0x00	; 0
     17a:	b2 e0       	ldi	r27, 0x02	; 2
     17c:	ee e9       	ldi	r30, 0x9E	; 158
     17e:	f4 e2       	ldi	r31, 0x24	; 36
     180:	00 e0       	ldi	r16, 0x00	; 0
     182:	0b bf       	out	0x3b, r16	; 59
     184:	02 c0       	rjmp	.+4      	; 0x18a <__do_copy_data+0x14>
     186:	07 90       	elpm	r0, Z+
     188:	0d 92       	st	X+, r0
     18a:	a8 31       	cpi	r26, 0x18	; 24
     18c:	b1 07       	cpc	r27, r17
     18e:	d9 f7       	brne	.-10     	; 0x186 <__do_copy_data+0x10>

00000190 <__do_clear_bss>:
     190:	14 e0       	ldi	r17, 0x04	; 4
     192:	a8 e1       	ldi	r26, 0x18	; 24
     194:	b4 e0       	ldi	r27, 0x04	; 4
     196:	01 c0       	rjmp	.+2      	; 0x19a <.do_clear_bss_start>

00000198 <.do_clear_bss_loop>:
     198:	1d 92       	st	X+, r1

0000019a <.do_clear_bss_start>:
     19a:	a4 34       	cpi	r26, 0x44	; 68
     19c:	b1 07       	cpc	r27, r17
     19e:	e1 f7       	brne	.-8      	; 0x198 <.do_clear_bss_loop>
     1a0:	0e 94 2d 07 	call	0xe5a	; 0xe5a <main>
     1a4:	0c 94 4d 12 	jmp	0x249a	; 0x249a <_exit>

000001a8 <__bad_interrupt>:
     1a8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001ac <lcd1_port_config>:
unsigned int million;

//Function to configure LCD port
void lcd1_port_config (void)
{
 DDRC = DDRC | 0xF7; //all the LCD pin's direction set as output
     1ac:	87 b1       	in	r24, 0x07	; 7
     1ae:	87 6f       	ori	r24, 0xF7	; 247
     1b0:	87 b9       	out	0x07, r24	; 7
 PORTC = PORTC & 0x80; // all the LCD pins are set to logic 0 except PORTC 7
     1b2:	88 b1       	in	r24, 0x08	; 8
     1b4:	80 78       	andi	r24, 0x80	; 128
     1b6:	88 b9       	out	0x08, r24	; 8
}
     1b8:	08 95       	ret

000001ba <lcd1_port_init>:
unsigned int million;

//Function to configure LCD port
void lcd1_port_config (void)
{
 DDRC = DDRC | 0xF7; //all the LCD pin's direction set as output
     1ba:	87 b1       	in	r24, 0x07	; 7
     1bc:	87 6f       	ori	r24, 0xF7	; 247
     1be:	87 b9       	out	0x07, r24	; 7
 PORTC = PORTC & 0x80; // all the LCD pins are set to logic 0 except PORTC 7
     1c0:	88 b1       	in	r24, 0x08	; 8
     1c2:	80 78       	andi	r24, 0x80	; 128
     1c4:	88 b9       	out	0x08, r24	; 8

//Function to Initialize PORTS
void lcd1_port_init()
{
	lcd1_port_config();
}
     1c6:	08 95       	ret

000001c8 <lcd1_set_4bit>:
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     1c8:	2a ef       	ldi	r18, 0xFA	; 250
     1ca:	30 e0       	ldi	r19, 0x00	; 0
     1cc:	c9 01       	movw	r24, r18
     1ce:	01 97       	sbiw	r24, 0x01	; 1
     1d0:	f1 f7       	brne	.-4      	; 0x1ce <lcd1_set_4bit+0x6>
//Function to Reset LCD
void lcd1_set_4bit()
{
	_delay_ms(1);

	cbit(lcd1_port,RS);				//RS=0 --- Command Input
     1d2:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd1_port,RW);				//RW=0 --- Writing to LCD
     1d4:	41 98       	cbi	0x08, 1	; 8
	lcd1_port = 0x30;				//Sending 3
     1d6:	40 e3       	ldi	r20, 0x30	; 48
     1d8:	48 b9       	out	0x08, r20	; 8
	sbit(lcd1_port,EN);				//Set Enable Pin
     1da:	42 9a       	sbi	0x08, 2	; 8
     1dc:	82 ee       	ldi	r24, 0xE2	; 226
     1de:	94 e0       	ldi	r25, 0x04	; 4
     1e0:	fc 01       	movw	r30, r24
     1e2:	31 97       	sbiw	r30, 0x01	; 1
     1e4:	f1 f7       	brne	.-4      	; 0x1e2 <lcd1_set_4bit+0x1a>
	_delay_ms(5);					//Delay
	cbit(lcd1_port,EN);				//Clear Enable Pin
     1e6:	42 98       	cbi	0x08, 2	; 8
     1e8:	f9 01       	movw	r30, r18
     1ea:	31 97       	sbiw	r30, 0x01	; 1
     1ec:	f1 f7       	brne	.-4      	; 0x1ea <lcd1_set_4bit+0x22>

	_delay_ms(1);

	cbit(lcd1_port,RS);				//RS=0 --- Command Input
     1ee:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd1_port,RW);				//RW=0 --- Writing to LCD
     1f0:	41 98       	cbi	0x08, 1	; 8
	lcd1_port = 0x30;				//Sending 3
     1f2:	48 b9       	out	0x08, r20	; 8
	sbit(lcd1_port,EN);				//Set Enable Pin
     1f4:	42 9a       	sbi	0x08, 2	; 8
     1f6:	fc 01       	movw	r30, r24
     1f8:	31 97       	sbiw	r30, 0x01	; 1
     1fa:	f1 f7       	brne	.-4      	; 0x1f8 <lcd1_set_4bit+0x30>
	_delay_ms(5);					//Delay
	cbit(lcd1_port,EN);				//Clear Enable Pin
     1fc:	42 98       	cbi	0x08, 2	; 8
     1fe:	f9 01       	movw	r30, r18
     200:	31 97       	sbiw	r30, 0x01	; 1
     202:	f1 f7       	brne	.-4      	; 0x200 <lcd1_set_4bit+0x38>

	_delay_ms(1);

	cbit(lcd1_port,RS);				//RS=0 --- Command Input
     204:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd1_port,RW);				//RW=0 --- Writing to LCD
     206:	41 98       	cbi	0x08, 1	; 8
	lcd1_port = 0x30;				//Sending 3
     208:	48 b9       	out	0x08, r20	; 8
	sbit(lcd1_port,EN);				//Set Enable Pin
     20a:	42 9a       	sbi	0x08, 2	; 8
     20c:	01 97       	sbiw	r24, 0x01	; 1
     20e:	f1 f7       	brne	.-4      	; 0x20c <lcd1_set_4bit+0x44>
	_delay_ms(5);					//Delay
	cbit(lcd1_port,EN);				//Clear Enable Pin
     210:	42 98       	cbi	0x08, 2	; 8
     212:	c9 01       	movw	r24, r18
     214:	01 97       	sbiw	r24, 0x01	; 1
     216:	f1 f7       	brne	.-4      	; 0x214 <lcd1_set_4bit+0x4c>

	_delay_ms(1);

	cbit(lcd1_port,RS);				//RS=0 --- Command Input
     218:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd1_port,RW);				//RW=0 --- Writing to LCD
     21a:	41 98       	cbi	0x08, 1	; 8
	lcd1_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
     21c:	80 e2       	ldi	r24, 0x20	; 32
     21e:	88 b9       	out	0x08, r24	; 8
	sbit(lcd1_port,EN);				//Set Enable Pin
     220:	42 9a       	sbi	0x08, 2	; 8
     222:	c9 01       	movw	r24, r18
     224:	01 97       	sbiw	r24, 0x01	; 1
     226:	f1 f7       	brne	.-4      	; 0x224 <lcd1_set_4bit+0x5c>
	_delay_ms(1);					//Delay
	cbit(lcd1_port,EN);				//Clear Enable Pin
     228:	42 98       	cbi	0x08, 2	; 8

	
}
     22a:	08 95       	ret

0000022c <lcd1_wr_command>:
void lcd1_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
	lcd1_port &= 0x0F;
     22c:	98 b1       	in	r25, 0x08	; 8
     22e:	9f 70       	andi	r25, 0x0F	; 15
     230:	98 b9       	out	0x08, r25	; 8
	lcd1_port |= temp;
     232:	28 b1       	in	r18, 0x08	; 8
     234:	98 2f       	mov	r25, r24
     236:	90 7f       	andi	r25, 0xF0	; 240
     238:	92 2b       	or	r25, r18
     23a:	98 b9       	out	0x08, r25	; 8
	cbit(lcd1_port,RS);
     23c:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd1_port,RW);
     23e:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd1_port,EN);
     240:	42 9a       	sbi	0x08, 2	; 8
     242:	22 ee       	ldi	r18, 0xE2	; 226
     244:	34 e0       	ldi	r19, 0x04	; 4
     246:	f9 01       	movw	r30, r18
     248:	31 97       	sbiw	r30, 0x01	; 1
     24a:	f1 f7       	brne	.-4      	; 0x248 <lcd1_wr_command+0x1c>
	_delay_ms(5);
	cbit(lcd1_port,EN);
     24c:	42 98       	cbi	0x08, 2	; 8
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
	lcd1_port &= 0x0F;
     24e:	98 b1       	in	r25, 0x08	; 8
     250:	9f 70       	andi	r25, 0x0F	; 15
     252:	98 b9       	out	0x08, r25	; 8
	lcd1_port |= cmd;
     254:	98 b1       	in	r25, 0x08	; 8
     256:	82 95       	swap	r24
     258:	80 7f       	andi	r24, 0xF0	; 240
     25a:	98 2b       	or	r25, r24
     25c:	98 b9       	out	0x08, r25	; 8
	cbit(lcd1_port,RS);
     25e:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd1_port,RW);
     260:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd1_port,EN);
     262:	42 9a       	sbi	0x08, 2	; 8
     264:	c9 01       	movw	r24, r18
     266:	01 97       	sbiw	r24, 0x01	; 1
     268:	f1 f7       	brne	.-4      	; 0x266 <lcd1_wr_command+0x3a>
	_delay_ms(5);
	cbit(lcd1_port,EN);
     26a:	42 98       	cbi	0x08, 2	; 8
}
     26c:	08 95       	ret

0000026e <lcd1_init>:
     26e:	8a ef       	ldi	r24, 0xFA	; 250
     270:	90 e0       	ldi	r25, 0x00	; 0
     272:	01 97       	sbiw	r24, 0x01	; 1
     274:	f1 f7       	brne	.-4      	; 0x272 <lcd1_init+0x4>
//Function to Initialize LCD
void lcd1_init()
{
	_delay_ms(1);

	lcd1_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
     276:	88 e2       	ldi	r24, 0x28	; 40
     278:	0e 94 16 01 	call	0x22c	; 0x22c <lcd1_wr_command>
	lcd1_wr_command(0x01);
     27c:	81 e0       	ldi	r24, 0x01	; 1
     27e:	0e 94 16 01 	call	0x22c	; 0x22c <lcd1_wr_command>
	lcd1_wr_command(0x06);
     282:	86 e0       	ldi	r24, 0x06	; 6
     284:	0e 94 16 01 	call	0x22c	; 0x22c <lcd1_wr_command>
	lcd1_wr_command(0x0E);
     288:	8e e0       	ldi	r24, 0x0E	; 14
     28a:	0e 94 16 01 	call	0x22c	; 0x22c <lcd1_wr_command>
	lcd1_wr_command(0x80);
     28e:	80 e8       	ldi	r24, 0x80	; 128
     290:	0e 94 16 01 	call	0x22c	; 0x22c <lcd1_wr_command>
		
}
     294:	08 95       	ret

00000296 <lcd1_wr_char>:
void lcd1_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
	lcd1_port &= 0x0F;
     296:	98 b1       	in	r25, 0x08	; 8
     298:	9f 70       	andi	r25, 0x0F	; 15
     29a:	98 b9       	out	0x08, r25	; 8
	lcd1_port |= temp;
     29c:	28 b1       	in	r18, 0x08	; 8
     29e:	98 2f       	mov	r25, r24
     2a0:	90 7f       	andi	r25, 0xF0	; 240
     2a2:	92 2b       	or	r25, r18
     2a4:	98 b9       	out	0x08, r25	; 8
	sbit(lcd1_port,RS);
     2a6:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd1_port,RW);
     2a8:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd1_port,EN);
     2aa:	42 9a       	sbi	0x08, 2	; 8
     2ac:	22 ee       	ldi	r18, 0xE2	; 226
     2ae:	34 e0       	ldi	r19, 0x04	; 4
     2b0:	f9 01       	movw	r30, r18
     2b2:	31 97       	sbiw	r30, 0x01	; 1
     2b4:	f1 f7       	brne	.-4      	; 0x2b2 <lcd1_wr_char+0x1c>
	_delay_ms(5);
	cbit(lcd1_port,EN);
     2b6:	42 98       	cbi	0x08, 2	; 8

	letter = letter & 0x0F;
	letter = letter<<4;
	lcd1_port &= 0x0F;
     2b8:	98 b1       	in	r25, 0x08	; 8
     2ba:	9f 70       	andi	r25, 0x0F	; 15
     2bc:	98 b9       	out	0x08, r25	; 8
	lcd1_port |= letter;
     2be:	98 b1       	in	r25, 0x08	; 8
     2c0:	82 95       	swap	r24
     2c2:	80 7f       	andi	r24, 0xF0	; 240
     2c4:	98 2b       	or	r25, r24
     2c6:	98 b9       	out	0x08, r25	; 8
	sbit(lcd1_port,RS);
     2c8:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd1_port,RW);
     2ca:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd1_port,EN);
     2cc:	42 9a       	sbi	0x08, 2	; 8
     2ce:	c9 01       	movw	r24, r18
     2d0:	01 97       	sbiw	r24, 0x01	; 1
     2d2:	f1 f7       	brne	.-4      	; 0x2d0 <lcd1_wr_char+0x3a>
	_delay_ms(5);
	cbit(lcd1_port,EN);
     2d4:	42 98       	cbi	0x08, 2	; 8
}
     2d6:	08 95       	ret

000002d8 <lcd1_home>:


//Function to bring cursor at home position
void lcd1_home()
{
	lcd1_wr_command(0x80);
     2d8:	80 e8       	ldi	r24, 0x80	; 128
     2da:	0e 94 16 01 	call	0x22c	; 0x22c <lcd1_wr_command>
}
     2de:	08 95       	ret

000002e0 <lcd1_string>:


//Function to Print String on LCD
void lcd1_string(char *str)
{
     2e0:	cf 93       	push	r28
     2e2:	df 93       	push	r29
     2e4:	ec 01       	movw	r28, r24
     2e6:	03 c0       	rjmp	.+6      	; 0x2ee <lcd1_string+0xe>
	while(*str != '\0')
	{
		lcd1_wr_char(*str);
     2e8:	0e 94 4b 01 	call	0x296	; 0x296 <lcd1_wr_char>
		str++;
     2ec:	21 96       	adiw	r28, 0x01	; 1


//Function to Print String on LCD
void lcd1_string(char *str)
{
	while(*str != '\0')
     2ee:	88 81       	ld	r24, Y
     2f0:	88 23       	and	r24, r24
     2f2:	d1 f7       	brne	.-12     	; 0x2e8 <lcd1_string+0x8>
	{
		lcd1_wr_char(*str);
		str++;
	}
}
     2f4:	df 91       	pop	r29
     2f6:	cf 91       	pop	r28
     2f8:	08 95       	ret

000002fa <lcd1_cursor>:

//Position the LCD cursor at "row", "column".

void lcd1_cursor (char row, char column)
{
	switch (row) {
     2fa:	82 30       	cpi	r24, 0x02	; 2
     2fc:	69 f0       	breq	.+26     	; 0x318 <lcd1_cursor+0x1e>
     2fe:	83 30       	cpi	r24, 0x03	; 3
     300:	18 f4       	brcc	.+6      	; 0x308 <lcd1_cursor+0xe>
     302:	81 30       	cpi	r24, 0x01	; 1
     304:	a9 f4       	brne	.+42     	; 0x330 <lcd1_cursor+0x36>
     306:	05 c0       	rjmp	.+10     	; 0x312 <lcd1_cursor+0x18>
     308:	83 30       	cpi	r24, 0x03	; 3
     30a:	49 f0       	breq	.+18     	; 0x31e <lcd1_cursor+0x24>
     30c:	84 30       	cpi	r24, 0x04	; 4
     30e:	81 f4       	brne	.+32     	; 0x330 <lcd1_cursor+0x36>
     310:	0b c0       	rjmp	.+22     	; 0x328 <lcd1_cursor+0x2e>
		case 1: lcd1_wr_command (0x80 + column - 1); break;
     312:	86 2f       	mov	r24, r22
     314:	81 58       	subi	r24, 0x81	; 129
     316:	05 c0       	rjmp	.+10     	; 0x322 <lcd1_cursor+0x28>
		case 2: lcd1_wr_command (0xc0 + column - 1); break;
     318:	86 2f       	mov	r24, r22
     31a:	81 54       	subi	r24, 0x41	; 65
     31c:	02 c0       	rjmp	.+4      	; 0x322 <lcd1_cursor+0x28>
		case 3: lcd1_wr_command (0x94 + column - 1); break;
     31e:	86 2f       	mov	r24, r22
     320:	8d 56       	subi	r24, 0x6D	; 109
     322:	0e 94 16 01 	call	0x22c	; 0x22c <lcd1_wr_command>
     326:	08 95       	ret
		case 4: lcd1_wr_command (0xd4 + column - 1); break;
     328:	86 2f       	mov	r24, r22
     32a:	8d 52       	subi	r24, 0x2D	; 45
     32c:	0e 94 16 01 	call	0x22c	; 0x22c <lcd1_wr_command>
     330:	08 95       	ret

00000332 <lcd1_print>:
	}
}

//Function To Print Any input value upto the desired digit on LCD
void lcd1_print (char row, char coloumn, unsigned int value, int digits)
{
     332:	0f 93       	push	r16
     334:	1f 93       	push	r17
     336:	cf 93       	push	r28
     338:	df 93       	push	r29
     33a:	8a 01       	movw	r16, r20
     33c:	e9 01       	movw	r28, r18
	unsigned char flag=0;
	if(row==0||coloumn==0)
     33e:	88 23       	and	r24, r24
     340:	11 f0       	breq	.+4      	; 0x346 <lcd1_print+0x14>
     342:	66 23       	and	r22, r22
     344:	19 f4       	brne	.+6      	; 0x34c <lcd1_print+0x1a>
	{
		lcd1_home();
     346:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <lcd1_home>
     34a:	02 c0       	rjmp	.+4      	; 0x350 <lcd1_print+0x1e>
	}
	else
	{
		lcd1_cursor(row,coloumn);
     34c:	0e 94 7d 01 	call	0x2fa	; 0x2fa <lcd1_cursor>
	}
	if(digits==5 || flag==1)
     350:	c5 30       	cpi	r28, 0x05	; 5
     352:	d1 05       	cpc	r29, r1
     354:	71 f4       	brne	.+28     	; 0x372 <lcd1_print+0x40>
	{
		million=value/10000+48;
     356:	c8 01       	movw	r24, r16
     358:	60 e1       	ldi	r22, 0x10	; 16
     35a:	77 e2       	ldi	r23, 0x27	; 39
     35c:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <__udivmodhi4>
     360:	cb 01       	movw	r24, r22
     362:	c0 96       	adiw	r24, 0x30	; 48
     364:	90 93 28 04 	sts	0x0428, r25
     368:	80 93 27 04 	sts	0x0427, r24
		lcd1_wr_char(million);
     36c:	0e 94 4b 01 	call	0x296	; 0x296 <lcd1_wr_char>
     370:	05 c0       	rjmp	.+10     	; 0x37c <lcd1_print+0x4a>
		flag=1;
	}
	if(digits==4 || flag==1)
     372:	c4 30       	cpi	r28, 0x04	; 4
     374:	d1 05       	cpc	r29, r1
     376:	11 f0       	breq	.+4      	; 0x37c <lcd1_print+0x4a>
     378:	80 e0       	ldi	r24, 0x00	; 0
     37a:	16 c0       	rjmp	.+44     	; 0x3a8 <lcd1_print+0x76>
	{
		temp = value/1000;
     37c:	c8 01       	movw	r24, r16
     37e:	68 ee       	ldi	r22, 0xE8	; 232
     380:	73 e0       	ldi	r23, 0x03	; 3
     382:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <__udivmodhi4>
     386:	cb 01       	movw	r24, r22
     388:	60 93 2e 04 	sts	0x042E, r22
     38c:	90 93 2f 04 	sts	0x042F, r25
		thousand = temp%10 + 48;
     390:	6a e0       	ldi	r22, 0x0A	; 10
     392:	70 e0       	ldi	r23, 0x00	; 0
     394:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <__udivmodhi4>
     398:	c0 96       	adiw	r24, 0x30	; 48
     39a:	90 93 41 04 	sts	0x0441, r25
     39e:	80 93 40 04 	sts	0x0440, r24
		lcd1_wr_char(thousand);
     3a2:	0e 94 4b 01 	call	0x296	; 0x296 <lcd1_wr_char>
     3a6:	81 e0       	ldi	r24, 0x01	; 1
		flag=1;
	}
	if(digits==3 || flag==1)
     3a8:	c3 30       	cpi	r28, 0x03	; 3
     3aa:	d1 05       	cpc	r29, r1
     3ac:	21 f0       	breq	.+8      	; 0x3b6 <lcd1_print+0x84>
     3ae:	81 30       	cpi	r24, 0x01	; 1
     3b0:	11 f0       	breq	.+4      	; 0x3b6 <lcd1_print+0x84>
     3b2:	80 e0       	ldi	r24, 0x00	; 0
     3b4:	16 c0       	rjmp	.+44     	; 0x3e2 <lcd1_print+0xb0>
	{
		temp = value/100;
     3b6:	c8 01       	movw	r24, r16
     3b8:	64 e6       	ldi	r22, 0x64	; 100
     3ba:	70 e0       	ldi	r23, 0x00	; 0
     3bc:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <__udivmodhi4>
     3c0:	cb 01       	movw	r24, r22
     3c2:	60 93 2e 04 	sts	0x042E, r22
     3c6:	90 93 2f 04 	sts	0x042F, r25
		hundred = temp%10 + 48;
     3ca:	6a e0       	ldi	r22, 0x0A	; 10
     3cc:	70 e0       	ldi	r23, 0x00	; 0
     3ce:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <__udivmodhi4>
     3d2:	c0 96       	adiw	r24, 0x30	; 48
     3d4:	90 93 3c 04 	sts	0x043C, r25
     3d8:	80 93 3b 04 	sts	0x043B, r24
		lcd1_wr_char(hundred);
     3dc:	0e 94 4b 01 	call	0x296	; 0x296 <lcd1_wr_char>
     3e0:	81 e0       	ldi	r24, 0x01	; 1
		flag=1;
	}
	if(digits==2 || flag==1)
     3e2:	c2 30       	cpi	r28, 0x02	; 2
     3e4:	d1 05       	cpc	r29, r1
     3e6:	21 f0       	breq	.+8      	; 0x3f0 <lcd1_print+0xbe>
     3e8:	81 30       	cpi	r24, 0x01	; 1
     3ea:	11 f0       	breq	.+4      	; 0x3f0 <lcd1_print+0xbe>
     3ec:	80 e0       	ldi	r24, 0x00	; 0
     3ee:	16 c0       	rjmp	.+44     	; 0x41c <lcd1_print+0xea>
	{
		temp = value/10;
     3f0:	c8 01       	movw	r24, r16
     3f2:	6a e0       	ldi	r22, 0x0A	; 10
     3f4:	70 e0       	ldi	r23, 0x00	; 0
     3f6:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <__udivmodhi4>
     3fa:	cb 01       	movw	r24, r22
     3fc:	60 93 2e 04 	sts	0x042E, r22
     400:	90 93 2f 04 	sts	0x042F, r25
		tens = temp%10 + 48;
     404:	6a e0       	ldi	r22, 0x0A	; 10
     406:	70 e0       	ldi	r23, 0x00	; 0
     408:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <__udivmodhi4>
     40c:	c0 96       	adiw	r24, 0x30	; 48
     40e:	90 93 39 04 	sts	0x0439, r25
     412:	80 93 38 04 	sts	0x0438, r24
		lcd1_wr_char(tens);
     416:	0e 94 4b 01 	call	0x296	; 0x296 <lcd1_wr_char>
     41a:	81 e0       	ldi	r24, 0x01	; 1
		flag=1;
	}
	if(digits==1 || flag==1)
     41c:	c1 30       	cpi	r28, 0x01	; 1
     41e:	d1 05       	cpc	r29, r1
     420:	11 f0       	breq	.+4      	; 0x426 <lcd1_print+0xf4>
     422:	81 30       	cpi	r24, 0x01	; 1
     424:	61 f4       	brne	.+24     	; 0x43e <lcd1_print+0x10c>
	{
		unit = value%10 + 48;
     426:	c8 01       	movw	r24, r16
     428:	6a e0       	ldi	r22, 0x0A	; 10
     42a:	70 e0       	ldi	r23, 0x00	; 0
     42c:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <__udivmodhi4>
     430:	c0 96       	adiw	r24, 0x30	; 48
     432:	90 93 3f 04 	sts	0x043F, r25
     436:	80 93 3e 04 	sts	0x043E, r24
		lcd1_wr_char(unit);
     43a:	0e 94 4b 01 	call	0x296	; 0x296 <lcd1_wr_char>
	}
	if(digits>5)
     43e:	26 97       	sbiw	r28, 0x06	; 6
     440:	1c f0       	brlt	.+6      	; 0x448 <lcd1_print+0x116>
	{
		lcd1_wr_char('E');
     442:	85 e4       	ldi	r24, 0x45	; 69
     444:	0e 94 4b 01 	call	0x296	; 0x296 <lcd1_wr_char>
	}
	
}
     448:	df 91       	pop	r29
     44a:	cf 91       	pop	r28
     44c:	1f 91       	pop	r17
     44e:	0f 91       	pop	r16
     450:	08 95       	ret

00000452 <lcd1_init_devices>:

void lcd1_init_devices (void)
{
 cli(); //Clears the global interrupts
     452:	f8 94       	cli
unsigned int million;

//Function to configure LCD port
void lcd1_port_config (void)
{
 DDRC = DDRC | 0xF7; //all the LCD pin's direction set as output
     454:	87 b1       	in	r24, 0x07	; 7
     456:	87 6f       	ori	r24, 0xF7	; 247
     458:	87 b9       	out	0x07, r24	; 7
 PORTC = PORTC & 0x80; // all the LCD pins are set to logic 0 except PORTC 7
     45a:	88 b1       	in	r24, 0x08	; 8
     45c:	80 78       	andi	r24, 0x80	; 128
     45e:	88 b9       	out	0x08, r24	; 8

void lcd1_init_devices (void)
{
 cli(); //Clears the global interrupts
 lcd1_port_init();
 sei();   //Enables the global interrupts
     460:	78 94       	sei
}		
     462:	08 95       	ret

00000464 <servo1_pin_config>:


//Configure PORTB 5 pin for servo motor 1 operation
void servo1_pin_config (void)
{
 DDRB  = DDRB | 0x20;  //making PORTB 5 pin output
     464:	25 9a       	sbi	0x04, 5	; 4
 PORTB = PORTB | 0x20; //setting PORTB 5 pin to logic 1
     466:	2d 9a       	sbi	0x05, 5	; 5
}
     468:	08 95       	ret

0000046a <servo2_pin_config>:

//Configure PORTB 6 pin for servo motor 2 operation
void servo2_pin_config (void)
{
 DDRB  = DDRB | 0x40;  //making PORTB 6 pin output
     46a:	26 9a       	sbi	0x04, 6	; 4
 PORTB = PORTB | 0x40; //setting PORTB 6 pin to logic 1
     46c:	2e 9a       	sbi	0x05, 6	; 5
}
     46e:	08 95       	ret

00000470 <servo_port_init>:


//Configure PORTB 5 pin for servo motor 1 operation
void servo1_pin_config (void)
{
 DDRB  = DDRB | 0x20;  //making PORTB 5 pin output
     470:	25 9a       	sbi	0x04, 5	; 4
 PORTB = PORTB | 0x20; //setting PORTB 5 pin to logic 1
     472:	2d 9a       	sbi	0x05, 5	; 5
}

//Configure PORTB 6 pin for servo motor 2 operation
void servo2_pin_config (void)
{
 DDRB  = DDRB | 0x40;  //making PORTB 6 pin output
     474:	26 9a       	sbi	0x04, 6	; 4
 PORTB = PORTB | 0x40; //setting PORTB 6 pin to logic 1
     476:	2e 9a       	sbi	0x05, 6	; 5
void servo_port_init(void)
{
 servo1_pin_config(); //Configure PORTB 5 pin for servo motor 1 operation
 servo2_pin_config(); //Configure PORTB 6 pin for servo motor 2 operation 
 //servo3_pin_config(); //Configure PORTB 7 pin for servo motor 3 operation  
}
     478:	08 95       	ret

0000047a <timer1_init>:
//prescale:256
// WGM: 7) PWM 10bit fast, TOP=0x03FF
// actual value: 52.25Hz 
void timer1_init(void)
{
 TCCR1B = 0x00; //stop
     47a:	e1 e8       	ldi	r30, 0x81	; 129
     47c:	f0 e0       	ldi	r31, 0x00	; 0
     47e:	10 82       	st	Z, r1
 TCNT1H = 0xFC; //Counter high value to which OCR1xH value is to be compared with
     480:	8c ef       	ldi	r24, 0xFC	; 252
     482:	80 93 85 00 	sts	0x0085, r24
 TCNT1L = 0x01;	//Counter low value to which OCR1xH value is to be compared with
     486:	81 e0       	ldi	r24, 0x01	; 1
     488:	80 93 84 00 	sts	0x0084, r24
 OCR1AH = 0x03;	//Output compare Register high value for servo 1
     48c:	93 e0       	ldi	r25, 0x03	; 3
     48e:	90 93 89 00 	sts	0x0089, r25
 OCR1AL = 0xFF;	//Output Compare Register low Value For servo 1
     492:	8f ef       	ldi	r24, 0xFF	; 255
     494:	80 93 88 00 	sts	0x0088, r24
 OCR1BH = 0x03;	//Output compare Register high value for servo 2
     498:	90 93 8b 00 	sts	0x008B, r25
 OCR1BL = 0xFF;	//Output Compare Register low Value For servo 2
     49c:	80 93 8a 00 	sts	0x008A, r24
 OCR1CH = 0x03;	//Output compare Register high value for servo 3
     4a0:	90 93 8d 00 	sts	0x008D, r25
 OCR1CL = 0xFF;	//Output Compare Register low Value For servo 3
     4a4:	80 93 8c 00 	sts	0x008C, r24
 ICR1H  = 0x03;	
     4a8:	90 93 87 00 	sts	0x0087, r25
 ICR1L  = 0xFF;
     4ac:	80 93 86 00 	sts	0x0086, r24
 TCCR1A = 0xAB; /*{COM1A1=1, COM1A0=0; COM1B1=1, COM1B0=0; COM1C1=1 COM1C0=0}
     4b0:	8b ea       	ldi	r24, 0xAB	; 171
     4b2:	80 93 80 00 	sts	0x0080, r24
 					For Overriding normal port functionality to OCRnA outputs.
				  {WGM11=1, WGM10=1} Along With WGM12 in TCCR1B for Selecting FAST PWM Mode*/
 TCCR1C = 0x00;
     4b6:	10 92 82 00 	sts	0x0082, r1
 TCCR1B = 0x0C; //WGM12=1; CS12=1, CS11=0, CS10=0 (Prescaler=256)
     4ba:	8c e0       	ldi	r24, 0x0C	; 12
     4bc:	80 83       	st	Z, r24
}
     4be:	08 95       	ret

000004c0 <servo_1>:
void servo_1(unsigned char degrees)  
{
 float PositionPanServo = 0;
  PositionPanServo = ((float)degrees / 1.86) + 35.0;

 OCR1AH = 0x00;
     4c0:	10 92 89 00 	sts	0x0089, r1
 OCR1AL = (unsigned char) PositionPanServo;
     4c4:	90 e0       	ldi	r25, 0x00	; 0
     4c6:	a0 e0       	ldi	r26, 0x00	; 0
     4c8:	b0 e0       	ldi	r27, 0x00	; 0
     4ca:	bc 01       	movw	r22, r24
     4cc:	cd 01       	movw	r24, r26
     4ce:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <__floatunsisf>
     4d2:	2b e7       	ldi	r18, 0x7B	; 123
     4d4:	34 e1       	ldi	r19, 0x14	; 20
     4d6:	4e ee       	ldi	r20, 0xEE	; 238
     4d8:	5f e3       	ldi	r21, 0x3F	; 63
     4da:	0e 94 8f 0b 	call	0x171e	; 0x171e <__divsf3>
     4de:	20 e0       	ldi	r18, 0x00	; 0
     4e0:	30 e0       	ldi	r19, 0x00	; 0
     4e2:	4c e0       	ldi	r20, 0x0C	; 12
     4e4:	52 e4       	ldi	r21, 0x42	; 66
     4e6:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <__addsf3>
     4ea:	0e 94 bf 08 	call	0x117e	; 0x117e <__fixunssfsi>
     4ee:	60 93 88 00 	sts	0x0088, r22
}
     4f2:	08 95       	ret

000004f4 <servo_2>:
//Function to rotate Servo 2 by a specified angle in the multiples of 1.86 degrees
void servo_2(unsigned char degrees)
{
 float PositionTiltServo = 0;
 PositionTiltServo = ((float)degrees / 1.86) + 35.0;
 OCR1BH = 0x00;
     4f4:	10 92 8b 00 	sts	0x008B, r1
 OCR1BL = (unsigned char) PositionTiltServo;
     4f8:	90 e0       	ldi	r25, 0x00	; 0
     4fa:	a0 e0       	ldi	r26, 0x00	; 0
     4fc:	b0 e0       	ldi	r27, 0x00	; 0
     4fe:	bc 01       	movw	r22, r24
     500:	cd 01       	movw	r24, r26
     502:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <__floatunsisf>
     506:	2b e7       	ldi	r18, 0x7B	; 123
     508:	34 e1       	ldi	r19, 0x14	; 20
     50a:	4e ee       	ldi	r20, 0xEE	; 238
     50c:	5f e3       	ldi	r21, 0x3F	; 63
     50e:	0e 94 8f 0b 	call	0x171e	; 0x171e <__divsf3>
     512:	20 e0       	ldi	r18, 0x00	; 0
     514:	30 e0       	ldi	r19, 0x00	; 0
     516:	4c e0       	ldi	r20, 0x0C	; 12
     518:	52 e4       	ldi	r21, 0x42	; 66
     51a:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <__addsf3>
     51e:	0e 94 bf 08 	call	0x117e	; 0x117e <__fixunssfsi>
     522:	60 93 8a 00 	sts	0x008A, r22
}
     526:	08 95       	ret

00000528 <servo_1_free>:
//and make them free by giving 100% duty cycle at the PWM. This function can be used to 
//reduce the power consumption of the motor if it is holding load against the gravity.

void servo_1_free (void) //makes servo 1 free rotating
{
 OCR1AH = 0x03; 
     528:	83 e0       	ldi	r24, 0x03	; 3
     52a:	80 93 89 00 	sts	0x0089, r24
 OCR1AL = 0xFF; //Servo 1 off
     52e:	8f ef       	ldi	r24, 0xFF	; 255
     530:	80 93 88 00 	sts	0x0088, r24
}
     534:	08 95       	ret

00000536 <servo_2_free>:

void servo_2_free (void) //makes servo 2 free rotating
{
 OCR1BH = 0x03;
     536:	83 e0       	ldi	r24, 0x03	; 3
     538:	80 93 8b 00 	sts	0x008B, r24
 OCR1BL = 0xFF; //Servo 2 off
     53c:	8f ef       	ldi	r24, 0xFF	; 255
     53e:	80 93 8a 00 	sts	0x008A, r24
}
     542:	08 95       	ret

00000544 <barrior_gate_up>:

void barrior_gate_up()
{
	//servo 2 for barrior
	int i;
	servo_2(180);
     544:	84 eb       	ldi	r24, 0xB4	; 180
     546:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <servo_2>
     54a:	80 e1       	ldi	r24, 0x10	; 16
     54c:	97 e2       	ldi	r25, 0x27	; 39
     54e:	29 e1       	ldi	r18, 0x19	; 25
     550:	30 e0       	ldi	r19, 0x00	; 0
     552:	f9 01       	movw	r30, r18
     554:	31 97       	sbiw	r30, 0x01	; 1
     556:	f1 f7       	brne	.-4      	; 0x554 <barrior_gate_up+0x10>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     558:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     55a:	d9 f7       	brne	.-10     	; 0x552 <barrior_gate_up+0xe>
/*	for(i=90;i<=180;i++)  
	{
		servo_2(i);
		_delay_ms(100);
	} */
}
     55c:	08 95       	ret

0000055e <barrior_gate_down>:

void barrior_gate_down()
{
	int i;
	servo_2(80);
     55e:	80 e5       	ldi	r24, 0x50	; 80
     560:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <servo_2>
     564:	80 e1       	ldi	r24, 0x10	; 16
     566:	97 e2       	ldi	r25, 0x27	; 39
     568:	29 e1       	ldi	r18, 0x19	; 25
     56a:	30 e0       	ldi	r19, 0x00	; 0
     56c:	f9 01       	movw	r30, r18
     56e:	31 97       	sbiw	r30, 0x01	; 1
     570:	f1 f7       	brne	.-4      	; 0x56e <barrior_gate_down+0x10>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     572:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     574:	d9 f7       	brne	.-10     	; 0x56c <barrior_gate_down+0xe>
/*	for(i=180;i>=90;i--)
	{
		servo_2(i);
		_delay_ms(100);
	} */
}
     576:	08 95       	ret

00000578 <let_fruit_go>:


void let_fruit_go(){
	barrior_gate_up();
     578:	0e 94 a2 02 	call	0x544	; 0x544 <barrior_gate_up>
     57c:	88 ea       	ldi	r24, 0xA8	; 168
     57e:	91 e6       	ldi	r25, 0x61	; 97
     580:	01 97       	sbiw	r24, 0x01	; 1
     582:	f1 f7       	brne	.-4      	; 0x580 <let_fruit_go+0x8>
	_delay_ms(100);
	barrior_gate_down();
     584:	0e 94 af 02 	call	0x55e	; 0x55e <barrior_gate_down>
}
     588:	08 95       	ret

0000058a <route>:


//void route(unsigned char class)
void route(int class)
{
     58a:	cf 93       	push	r28
     58c:	df 93       	push	r29
     58e:	ec 01       	movw	r28, r24
	lcd1_cursor(1,3);
     590:	81 e0       	ldi	r24, 0x01	; 1
     592:	63 e0       	ldi	r22, 0x03	; 3
     594:	0e 94 7d 01 	call	0x2fa	; 0x2fa <lcd1_cursor>
	lcd1_string("class label ");
     598:	80 e0       	ldi	r24, 0x00	; 0
     59a:	92 e0       	ldi	r25, 0x02	; 2
     59c:	0e 94 70 01 	call	0x2e0	; 0x2e0 <lcd1_string>
	lcd1_print(1,15,class,3);
     5a0:	81 e0       	ldi	r24, 0x01	; 1
     5a2:	6f e0       	ldi	r22, 0x0F	; 15
     5a4:	ae 01       	movw	r20, r28
     5a6:	23 e0       	ldi	r18, 0x03	; 3
     5a8:	30 e0       	ldi	r19, 0x00	; 0
     5aa:	0e 94 99 01 	call	0x332	; 0x332 <lcd1_print>
	switch (class){
     5ae:	c2 30       	cpi	r28, 0x02	; 2
     5b0:	d1 05       	cpc	r29, r1
     5b2:	91 f0       	breq	.+36     	; 0x5d8 <route+0x4e>
     5b4:	c3 30       	cpi	r28, 0x03	; 3
     5b6:	d1 05       	cpc	r29, r1
     5b8:	e1 f0       	breq	.+56     	; 0x5f2 <route+0x68>
     5ba:	21 97       	sbiw	r28, 0x01	; 1
     5bc:	31 f5       	brne	.+76     	; 0x60a <route+0x80>
		case 1:	servo_1(CLASS1_DIR);
     5be:	81 e0       	ldi	r24, 0x01	; 1
     5c0:	0e 94 60 02 	call	0x4c0	; 0x4c0 <servo_1>
     5c4:	88 e8       	ldi	r24, 0x88	; 136
     5c6:	93 e1       	ldi	r25, 0x13	; 19
     5c8:	29 e1       	ldi	r18, 0x19	; 25
     5ca:	30 e0       	ldi	r19, 0x00	; 0
     5cc:	f9 01       	movw	r30, r18
     5ce:	31 97       	sbiw	r30, 0x01	; 1
     5d0:	f1 f7       	brne	.-4      	; 0x5ce <route+0x44>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     5d2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     5d4:	d9 f7       	brne	.-10     	; 0x5cc <route+0x42>
     5d6:	19 c0       	rjmp	.+50     	; 0x60a <route+0x80>
			_delay_ms(500);
			break;
		case 2:	servo_1(CLASS2_DIR);
     5d8:	84 e1       	ldi	r24, 0x14	; 20
     5da:	0e 94 60 02 	call	0x4c0	; 0x4c0 <servo_1>
     5de:	80 e1       	ldi	r24, 0x10	; 16
     5e0:	97 e2       	ldi	r25, 0x27	; 39
     5e2:	29 e1       	ldi	r18, 0x19	; 25
     5e4:	30 e0       	ldi	r19, 0x00	; 0
     5e6:	f9 01       	movw	r30, r18
     5e8:	31 97       	sbiw	r30, 0x01	; 1
     5ea:	f1 f7       	brne	.-4      	; 0x5e8 <route+0x5e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     5ec:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     5ee:	d9 f7       	brne	.-10     	; 0x5e6 <route+0x5c>
     5f0:	0c c0       	rjmp	.+24     	; 0x60a <route+0x80>
			_delay_ms(1000);
			break;
	        case 3:	servo_1(CLASS3_DIR);
     5f2:	8d e2       	ldi	r24, 0x2D	; 45
     5f4:	0e 94 60 02 	call	0x4c0	; 0x4c0 <servo_1>
     5f8:	80 e1       	ldi	r24, 0x10	; 16
     5fa:	97 e2       	ldi	r25, 0x27	; 39
     5fc:	29 e1       	ldi	r18, 0x19	; 25
     5fe:	30 e0       	ldi	r19, 0x00	; 0
     600:	f9 01       	movw	r30, r18
     602:	31 97       	sbiw	r30, 0x01	; 1
     604:	f1 f7       	brne	.-4      	; 0x602 <route+0x78>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     606:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     608:	d9 f7       	brne	.-10     	; 0x600 <route+0x76>
			_delay_ms(1000);
			break;
	}

//	servo_1((maxangle-minangle)*type/(types+1));
}
     60a:	df 91       	pop	r29
     60c:	cf 91       	pop	r28
     60e:	08 95       	ret

00000610 <motion_pin_config>:
unsigned int Degrees; //to accept angle in degrees for turning

//Function to configure ports to enable robot's motion
void motion_pin_config (void) 
{
 DDRA = DDRA | 0x0F;
     610:	81 b1       	in	r24, 0x01	; 1
     612:	8f 60       	ori	r24, 0x0F	; 15
     614:	81 b9       	out	0x01, r24	; 1
 PORTA = PORTA & 0xF0;
     616:	82 b1       	in	r24, 0x02	; 2
     618:	80 7f       	andi	r24, 0xF0	; 240
     61a:	82 b9       	out	0x02, r24	; 2
 DDRL = DDRL | 0x18;   //Setting PL3 and PL4 pins as output for PWM generation
     61c:	ea e0       	ldi	r30, 0x0A	; 10
     61e:	f1 e0       	ldi	r31, 0x01	; 1
     620:	80 81       	ld	r24, Z
     622:	88 61       	ori	r24, 0x18	; 24
     624:	80 83       	st	Z, r24
 PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM.
     626:	eb e0       	ldi	r30, 0x0B	; 11
     628:	f1 e0       	ldi	r31, 0x01	; 1
     62a:	80 81       	ld	r24, Z
     62c:	88 61       	ori	r24, 0x18	; 24
     62e:	80 83       	st	Z, r24
}
     630:	08 95       	ret

00000632 <left_encoder_pin_config>:

//Function to configure INT4 (PORTE 4) pin as input for the left position encoder
void left_encoder_pin_config (void)
{
 DDRE  = DDRE & 0xEF;  //Set the direction of the PORTE 4 pin as input
     632:	6c 98       	cbi	0x0d, 4	; 13
 PORTE = PORTE | 0x10; //Enable internal pull-up for PORTE 4 pin
     634:	74 9a       	sbi	0x0e, 4	; 14
}
     636:	08 95       	ret

00000638 <right_encoder_pin_config>:

//Function to configure INT5 (PORTE 5) pin as input for the right position encoder
void right_encoder_pin_config (void)
{
 DDRE  = DDRE & 0xDF;  //Set the direction of the PORTE 4 pin as input
     638:	6d 98       	cbi	0x0d, 5	; 13
 PORTE = PORTE | 0x20; //Enable internal pull-up for PORTE 4 pin
     63a:	75 9a       	sbi	0x0e, 5	; 14
}
     63c:	08 95       	ret

0000063e <motion_port_init>:
unsigned int Degrees; //to accept angle in degrees for turning

//Function to configure ports to enable robot's motion
void motion_pin_config (void) 
{
 DDRA = DDRA | 0x0F;
     63e:	81 b1       	in	r24, 0x01	; 1
     640:	8f 60       	ori	r24, 0x0F	; 15
     642:	81 b9       	out	0x01, r24	; 1
 PORTA = PORTA & 0xF0;
     644:	82 b1       	in	r24, 0x02	; 2
     646:	80 7f       	andi	r24, 0xF0	; 240
     648:	82 b9       	out	0x02, r24	; 2
 DDRL = DDRL | 0x18;   //Setting PL3 and PL4 pins as output for PWM generation
     64a:	ea e0       	ldi	r30, 0x0A	; 10
     64c:	f1 e0       	ldi	r31, 0x01	; 1
     64e:	80 81       	ld	r24, Z
     650:	88 61       	ori	r24, 0x18	; 24
     652:	80 83       	st	Z, r24
 PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM.
     654:	eb e0       	ldi	r30, 0x0B	; 11
     656:	f1 e0       	ldi	r31, 0x01	; 1
     658:	80 81       	ld	r24, Z
     65a:	88 61       	ori	r24, 0x18	; 24
     65c:	80 83       	st	Z, r24
}

//Function to configure INT4 (PORTE 4) pin as input for the left position encoder
void left_encoder_pin_config (void)
{
 DDRE  = DDRE & 0xEF;  //Set the direction of the PORTE 4 pin as input
     65e:	6c 98       	cbi	0x0d, 4	; 13
 PORTE = PORTE | 0x10; //Enable internal pull-up for PORTE 4 pin
     660:	74 9a       	sbi	0x0e, 4	; 14
}

//Function to configure INT5 (PORTE 5) pin as input for the right position encoder
void right_encoder_pin_config (void)
{
 DDRE  = DDRE & 0xDF;  //Set the direction of the PORTE 4 pin as input
     662:	6d 98       	cbi	0x0d, 5	; 13
 PORTE = PORTE | 0x20; //Enable internal pull-up for PORTE 4 pin
     664:	75 9a       	sbi	0x0e, 5	; 14
void motion_port_init()
{
 motion_pin_config(); //robot motion pins config
 left_encoder_pin_config(); //left encoder pin config
 right_encoder_pin_config(); //right encoder pin config	
}
     666:	08 95       	ret

00000668 <left_position_encoder_interrupt_init>:

void left_position_encoder_interrupt_init (void) //Interrupt 4 enable
{
 cli(); //Clears the global interrupt
     668:	f8 94       	cli
 EICRB = EICRB | 0x02; // INT4 is set to trigger with falling edge
     66a:	ea e6       	ldi	r30, 0x6A	; 106
     66c:	f0 e0       	ldi	r31, 0x00	; 0
     66e:	80 81       	ld	r24, Z
     670:	82 60       	ori	r24, 0x02	; 2
     672:	80 83       	st	Z, r24
 EIMSK = EIMSK | 0x10; // Enable Interrupt INT4 for left position encoder
     674:	ec 9a       	sbi	0x1d, 4	; 29
 sei();   // Enables the global interrupt 
     676:	78 94       	sei
}
     678:	08 95       	ret

0000067a <right_position_encoder_interrupt_init>:

void right_position_encoder_interrupt_init (void) //Interrupt 5 enable
{
 cli(); //Clears the global interrupt
     67a:	f8 94       	cli
 EICRB = EICRB | 0x08; // INT5 is set to trigger with falling edge
     67c:	ea e6       	ldi	r30, 0x6A	; 106
     67e:	f0 e0       	ldi	r31, 0x00	; 0
     680:	80 81       	ld	r24, Z
     682:	88 60       	ori	r24, 0x08	; 8
     684:	80 83       	st	Z, r24
 EIMSK = EIMSK | 0x20; // Enable Interrupt INT5 for right position encoder
     686:	ed 9a       	sbi	0x1d, 5	; 29
 sei();   // Enables the global interrupt 
     688:	78 94       	sei
}
     68a:	08 95       	ret

0000068c <__vector_6>:

//ISR for right position encoder
ISR(INT5_vect)  
{
     68c:	1f 92       	push	r1
     68e:	0f 92       	push	r0
     690:	0f b6       	in	r0, 0x3f	; 63
     692:	0f 92       	push	r0
     694:	11 24       	eor	r1, r1
     696:	8f 93       	push	r24
     698:	9f 93       	push	r25
     69a:	af 93       	push	r26
     69c:	bf 93       	push	r27
 ShaftCountRight++;  //increment right shaft position count
     69e:	80 91 1c 04 	lds	r24, 0x041C
     6a2:	90 91 1d 04 	lds	r25, 0x041D
     6a6:	a0 91 1e 04 	lds	r26, 0x041E
     6aa:	b0 91 1f 04 	lds	r27, 0x041F
     6ae:	01 96       	adiw	r24, 0x01	; 1
     6b0:	a1 1d       	adc	r26, r1
     6b2:	b1 1d       	adc	r27, r1
     6b4:	80 93 1c 04 	sts	0x041C, r24
     6b8:	90 93 1d 04 	sts	0x041D, r25
     6bc:	a0 93 1e 04 	sts	0x041E, r26
     6c0:	b0 93 1f 04 	sts	0x041F, r27
}
     6c4:	bf 91       	pop	r27
     6c6:	af 91       	pop	r26
     6c8:	9f 91       	pop	r25
     6ca:	8f 91       	pop	r24
     6cc:	0f 90       	pop	r0
     6ce:	0f be       	out	0x3f, r0	; 63
     6d0:	0f 90       	pop	r0
     6d2:	1f 90       	pop	r1
     6d4:	18 95       	reti

000006d6 <__vector_5>:


//ISR for left position encoder
ISR(INT4_vect)
{
     6d6:	1f 92       	push	r1
     6d8:	0f 92       	push	r0
     6da:	0f b6       	in	r0, 0x3f	; 63
     6dc:	0f 92       	push	r0
     6de:	11 24       	eor	r1, r1
     6e0:	8f 93       	push	r24
     6e2:	9f 93       	push	r25
     6e4:	af 93       	push	r26
     6e6:	bf 93       	push	r27
 ShaftCountLeft++;  //increment left shaft position count
     6e8:	80 91 18 04 	lds	r24, 0x0418
     6ec:	90 91 19 04 	lds	r25, 0x0419
     6f0:	a0 91 1a 04 	lds	r26, 0x041A
     6f4:	b0 91 1b 04 	lds	r27, 0x041B
     6f8:	01 96       	adiw	r24, 0x01	; 1
     6fa:	a1 1d       	adc	r26, r1
     6fc:	b1 1d       	adc	r27, r1
     6fe:	80 93 18 04 	sts	0x0418, r24
     702:	90 93 19 04 	sts	0x0419, r25
     706:	a0 93 1a 04 	sts	0x041A, r26
     70a:	b0 93 1b 04 	sts	0x041B, r27
}
     70e:	bf 91       	pop	r27
     710:	af 91       	pop	r26
     712:	9f 91       	pop	r25
     714:	8f 91       	pop	r24
     716:	0f 90       	pop	r0
     718:	0f be       	out	0x3f, r0	; 63
     71a:	0f 90       	pop	r0
     71c:	1f 90       	pop	r1
     71e:	18 95       	reti

00000720 <motion_set>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     720:	92 b1       	in	r25, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     722:	90 7f       	andi	r25, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     724:	8f 70       	andi	r24, 0x0F	; 15
     726:	89 2b       	or	r24, r25
 PORTA = PortARestore; 		// executing the command
     728:	82 b9       	out	0x02, r24	; 2
}
     72a:	08 95       	ret

0000072c <forward>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     72c:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     72e:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     730:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
     732:	82 b9       	out	0x02, r24	; 2
}

void forward (void) //both wheels forward
{
  motion_set(0x06);
}
     734:	08 95       	ret

00000736 <soft_left_2>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     736:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     738:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     73a:	81 60       	ori	r24, 0x01	; 1
 PORTA = PortARestore; 		// executing the command
     73c:	82 b9       	out	0x02, r24	; 2
}

void soft_left_2 (void) //Left wheel backward, right wheel stationary
{
motion_set(0x01);
}
     73e:	08 95       	ret

00000740 <back>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     740:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     742:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     744:	89 60       	ori	r24, 0x09	; 9
 PORTA = PortARestore; 		// executing the command
     746:	82 b9       	out	0x02, r24	; 2


void back (void) //both wheels backward
{
  motion_set(0x09);
}
     748:	08 95       	ret

0000074a <stop>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     74a:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     74c:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
     74e:	82 b9       	out	0x02, r24	; 2


void stop (void)
{
  motion_set(0x00);
}
     750:	08 95       	ret

00000752 <angle_rotate>:
 float ReqdShaftCount = 0;
 unsigned long int ReqdShaftCountInt = 0;

 ReqdShaftCount = (float) Degrees/ 4.090; // division by resolution to get shaft count
 ReqdShaftCountInt = (unsigned int) ReqdShaftCount;
 ShaftCountRight = 0; 
     752:	10 92 1c 04 	sts	0x041C, r1
     756:	10 92 1d 04 	sts	0x041D, r1
     75a:	10 92 1e 04 	sts	0x041E, r1
     75e:	10 92 1f 04 	sts	0x041F, r1
 ShaftCountLeft = 0; 
     762:	10 92 18 04 	sts	0x0418, r1
     766:	10 92 19 04 	sts	0x0419, r1
     76a:	10 92 1a 04 	sts	0x041A, r1
     76e:	10 92 1b 04 	sts	0x041B, r1

 while (1)
 {
  if((ShaftCountRight >= ReqdShaftCountInt) |(ShaftCountLeft >= ReqdShaftCountInt))
     772:	a0 e0       	ldi	r26, 0x00	; 0
     774:	b0 e0       	ldi	r27, 0x00	; 0
     776:	bc 01       	movw	r22, r24
     778:	cd 01       	movw	r24, r26
     77a:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <__floatunsisf>
     77e:	28 e4       	ldi	r18, 0x48	; 72
     780:	31 ee       	ldi	r19, 0xE1	; 225
     782:	42 e8       	ldi	r20, 0x82	; 130
     784:	50 e4       	ldi	r21, 0x40	; 64
     786:	0e 94 8f 0b 	call	0x171e	; 0x171e <__divsf3>
     78a:	0e 94 bf 08 	call	0x117e	; 0x117e <__fixunssfsi>
     78e:	67 2b       	or	r22, r23
     790:	21 f4       	brne	.+8      	; 0x79a <angle_rotate+0x48>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     792:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     794:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
     796:	82 b9       	out	0x02, r24	; 2
 {
  if((ShaftCountRight >= ReqdShaftCountInt) |(ShaftCountLeft >= ReqdShaftCountInt))
  break;
 }
 stop(); //Stop robot
}
     798:	08 95       	ret
     79a:	ff cf       	rjmp	.-2      	; 0x79a <angle_rotate+0x48>

0000079c <linear_distance_mm>:
 unsigned long int ReqdShaftCountInt = 0;

 ReqdShaftCount = DistanceInMM / 5.338; // division by resolution to get shaft count
 ReqdShaftCountInt = (unsigned long int) ReqdShaftCount;
  
 ShaftCountRight = 0;
     79c:	10 92 1c 04 	sts	0x041C, r1
     7a0:	10 92 1d 04 	sts	0x041D, r1
     7a4:	10 92 1e 04 	sts	0x041E, r1
     7a8:	10 92 1f 04 	sts	0x041F, r1
	ShaftCountLeft = 0;
     7ac:	10 92 18 04 	sts	0x0418, r1
     7b0:	10 92 19 04 	sts	0x0419, r1
     7b4:	10 92 1a 04 	sts	0x041A, r1
     7b8:	10 92 1b 04 	sts	0x041B, r1
     7bc:	ff cf       	rjmp	.-2      	; 0x7bc <linear_distance_mm+0x20>

000007be <backward_mm>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     7be:	22 b1       	in	r18, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     7c0:	20 7f       	andi	r18, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     7c2:	26 60       	ori	r18, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
     7c4:	22 b9       	out	0x02, r18	; 2
}

void backward_mm(unsigned int DistanceInMM)
{
 forward(); //piston moves forward + vibrator's motor also forward
 linear_distance_mm(DistanceInMM);
     7c6:	0e 94 ce 03 	call	0x79c	; 0x79c <linear_distance_mm>
}
     7ca:	08 95       	ret

000007cc <forward_mm>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     7cc:	22 b1       	in	r18, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     7ce:	20 7f       	andi	r18, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     7d0:	21 60       	ori	r18, 0x01	; 1
 PORTA = PortARestore; 		// executing the command
     7d2:	22 b9       	out	0x02, r18	; 2

void forward_mm(unsigned int DistanceInMM)
{
 //back();
 soft_left_2(); // right motor stop so, piston moves forward + vibrator stops
 linear_distance_mm(DistanceInMM);
     7d4:	0e 94 ce 03 	call	0x79c	; 0x79c <linear_distance_mm>
}
     7d8:	08 95       	ret

000007da <motion_init_devices>:


//Function to initialize all the devices
void motion_init_devices()
{
 cli(); //Clears the global interrupt
     7da:	f8 94       	cli
 motion_port_init();  //Initializes all the ports
     7dc:	0e 94 1f 03 	call	0x63e	; 0x63e <motion_port_init>
 right_encoder_pin_config(); //right encoder pin config	
}

void left_position_encoder_interrupt_init (void) //Interrupt 4 enable
{
 cli(); //Clears the global interrupt
     7e0:	f8 94       	cli
 EICRB = EICRB | 0x02; // INT4 is set to trigger with falling edge
     7e2:	ea e6       	ldi	r30, 0x6A	; 106
     7e4:	f0 e0       	ldi	r31, 0x00	; 0
     7e6:	80 81       	ld	r24, Z
     7e8:	82 60       	ori	r24, 0x02	; 2
     7ea:	80 83       	st	Z, r24
 EIMSK = EIMSK | 0x10; // Enable Interrupt INT4 for left position encoder
     7ec:	ec 9a       	sbi	0x1d, 4	; 29
 sei();   // Enables the global interrupt 
     7ee:	78 94       	sei
}

void right_position_encoder_interrupt_init (void) //Interrupt 5 enable
{
 cli(); //Clears the global interrupt
     7f0:	f8 94       	cli
 EICRB = EICRB | 0x08; // INT5 is set to trigger with falling edge
     7f2:	ea e6       	ldi	r30, 0x6A	; 106
     7f4:	f0 e0       	ldi	r31, 0x00	; 0
     7f6:	80 81       	ld	r24, Z
     7f8:	88 60       	ori	r24, 0x08	; 8
     7fa:	80 83       	st	Z, r24
 EIMSK = EIMSK | 0x20; // Enable Interrupt INT5 for right position encoder
     7fc:	ed 9a       	sbi	0x1d, 5	; 29
 sei();   // Enables the global interrupt 
     7fe:	78 94       	sei
{
 cli(); //Clears the global interrupt
 motion_port_init();  //Initializes all the ports
 left_position_encoder_interrupt_init();
 right_position_encoder_interrupt_init();
 sei();   // Enables the global interrupt 
     800:	78 94       	sei
}
     802:	08 95       	ret

00000804 <lcd_set_4bit>:
     804:	8a ef       	ldi	r24, 0xFA	; 250
     806:	90 e0       	ldi	r25, 0x00	; 0
     808:	fc 01       	movw	r30, r24
     80a:	31 97       	sbiw	r30, 0x01	; 1
     80c:	f1 f7       	brne	.-4      	; 0x80a <lcd_set_4bit+0x6>
//Function to Reset LCD
void lcd_set_4bit()
{
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     80e:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     810:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3 in the upper nibble
     812:	40 e3       	ldi	r20, 0x30	; 48
     814:	48 b9       	out	0x08, r20	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     816:	42 9a       	sbi	0x08, 2	; 8
     818:	22 ee       	ldi	r18, 0xE2	; 226
     81a:	34 e0       	ldi	r19, 0x04	; 4
     81c:	f9 01       	movw	r30, r18
     81e:	31 97       	sbiw	r30, 0x01	; 1
     820:	f1 f7       	brne	.-4      	; 0x81e <lcd_set_4bit+0x1a>
	_delay_ms(5);					//delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     822:	42 98       	cbi	0x08, 2	; 8
     824:	fc 01       	movw	r30, r24
     826:	31 97       	sbiw	r30, 0x01	; 1
     828:	f1 f7       	brne	.-4      	; 0x826 <lcd_set_4bit+0x22>

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     82a:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     82c:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3 in the upper nibble
     82e:	48 b9       	out	0x08, r20	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     830:	42 9a       	sbi	0x08, 2	; 8
     832:	f9 01       	movw	r30, r18
     834:	31 97       	sbiw	r30, 0x01	; 1
     836:	f1 f7       	brne	.-4      	; 0x834 <lcd_set_4bit+0x30>
	_delay_ms(5);					//delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     838:	42 98       	cbi	0x08, 2	; 8
     83a:	fc 01       	movw	r30, r24
     83c:	31 97       	sbiw	r30, 0x01	; 1
     83e:	f1 f7       	brne	.-4      	; 0x83c <lcd_set_4bit+0x38>

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     840:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     842:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3 in the upper nibble
     844:	48 b9       	out	0x08, r20	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     846:	42 9a       	sbi	0x08, 2	; 8
     848:	f9 01       	movw	r30, r18
     84a:	31 97       	sbiw	r30, 0x01	; 1
     84c:	f1 f7       	brne	.-4      	; 0x84a <lcd_set_4bit+0x46>
	_delay_ms(5);					//delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     84e:	42 98       	cbi	0x08, 2	; 8
     850:	01 97       	sbiw	r24, 0x01	; 1
     852:	f1 f7       	brne	.-4      	; 0x850 <lcd_set_4bit+0x4c>

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     854:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     856:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x20;				//Sending 2 in the upper nibble to initialize LCD 4-bit mode
     858:	80 e2       	ldi	r24, 0x20	; 32
     85a:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     85c:	42 9a       	sbi	0x08, 2	; 8
     85e:	c9 01       	movw	r24, r18
     860:	01 97       	sbiw	r24, 0x01	; 1
     862:	f1 f7       	brne	.-4      	; 0x860 <lcd_set_4bit+0x5c>
	_delay_ms(5);					//delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     864:	42 98       	cbi	0x08, 2	; 8
}
     866:	08 95       	ret

00000868 <lcd_wr_command>:
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
	lcd_port &= 0x0F;
     868:	98 b1       	in	r25, 0x08	; 8
     86a:	9f 70       	andi	r25, 0x0F	; 15
     86c:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
     86e:	28 b1       	in	r18, 0x08	; 8
     870:	98 2f       	mov	r25, r24
     872:	90 7f       	andi	r25, 0xF0	; 240
     874:	92 2b       	or	r25, r18
     876:	98 b9       	out	0x08, r25	; 8
	cbit(lcd_port,RS);
     878:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     87a:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     87c:	42 9a       	sbi	0x08, 2	; 8
     87e:	22 ee       	ldi	r18, 0xE2	; 226
     880:	34 e0       	ldi	r19, 0x04	; 4
     882:	f9 01       	movw	r30, r18
     884:	31 97       	sbiw	r30, 0x01	; 1
     886:	f1 f7       	brne	.-4      	; 0x884 <lcd_wr_command+0x1c>
	_delay_ms(5);
	cbit(lcd_port,EN);
     888:	42 98       	cbi	0x08, 2	; 8
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
	lcd_port &= 0x0F;
     88a:	98 b1       	in	r25, 0x08	; 8
     88c:	9f 70       	andi	r25, 0x0F	; 15
     88e:	98 b9       	out	0x08, r25	; 8
	lcd_port |= cmd;
     890:	98 b1       	in	r25, 0x08	; 8
     892:	82 95       	swap	r24
     894:	80 7f       	andi	r24, 0xF0	; 240
     896:	98 2b       	or	r25, r24
     898:	98 b9       	out	0x08, r25	; 8
	cbit(lcd_port,RS);
     89a:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     89c:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     89e:	42 9a       	sbi	0x08, 2	; 8
     8a0:	c9 01       	movw	r24, r18
     8a2:	01 97       	sbiw	r24, 0x01	; 1
     8a4:	f1 f7       	brne	.-4      	; 0x8a2 <lcd_wr_command+0x3a>
	_delay_ms(5);
	cbit(lcd_port,EN);
     8a6:	42 98       	cbi	0x08, 2	; 8
}
     8a8:	08 95       	ret

000008aa <lcd_init>:
     8aa:	8a ef       	ldi	r24, 0xFA	; 250
     8ac:	90 e0       	ldi	r25, 0x00	; 0
     8ae:	01 97       	sbiw	r24, 0x01	; 1
     8b0:	f1 f7       	brne	.-4      	; 0x8ae <lcd_init+0x4>
//Function to Initialize LCD
void lcd_init()
{
	_delay_ms(1);

	lcd_wr_command(0x28); //4-bit mode and 5x8 dot character font
     8b2:	88 e2       	ldi	r24, 0x28	; 40
     8b4:	0e 94 34 04 	call	0x868	; 0x868 <lcd_wr_command>
	lcd_wr_command(0x01); //Clear LCD display
     8b8:	81 e0       	ldi	r24, 0x01	; 1
     8ba:	0e 94 34 04 	call	0x868	; 0x868 <lcd_wr_command>
	lcd_wr_command(0x06); //Auto increment cursor position
     8be:	86 e0       	ldi	r24, 0x06	; 6
     8c0:	0e 94 34 04 	call	0x868	; 0x868 <lcd_wr_command>
	lcd_wr_command(0x0E); //Turn on LCD and cursor
     8c4:	8e e0       	ldi	r24, 0x0E	; 14
     8c6:	0e 94 34 04 	call	0x868	; 0x868 <lcd_wr_command>
	lcd_wr_command(0x80); //Set cursor position
     8ca:	80 e8       	ldi	r24, 0x80	; 128
     8cc:	0e 94 34 04 	call	0x868	; 0x868 <lcd_wr_command>
}
     8d0:	08 95       	ret

000008d2 <lcd_wr_char>:
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
	lcd_port &= 0x0F;
     8d2:	98 b1       	in	r25, 0x08	; 8
     8d4:	9f 70       	andi	r25, 0x0F	; 15
     8d6:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
     8d8:	28 b1       	in	r18, 0x08	; 8
     8da:	98 2f       	mov	r25, r24
     8dc:	90 7f       	andi	r25, 0xF0	; 240
     8de:	92 2b       	or	r25, r18
     8e0:	98 b9       	out	0x08, r25	; 8
	sbit(lcd_port,RS);
     8e2:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     8e4:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     8e6:	42 9a       	sbi	0x08, 2	; 8
     8e8:	22 ee       	ldi	r18, 0xE2	; 226
     8ea:	34 e0       	ldi	r19, 0x04	; 4
     8ec:	f9 01       	movw	r30, r18
     8ee:	31 97       	sbiw	r30, 0x01	; 1
     8f0:	f1 f7       	brne	.-4      	; 0x8ee <lcd_wr_char+0x1c>
	_delay_ms(5);
	cbit(lcd_port,EN);
     8f2:	42 98       	cbi	0x08, 2	; 8

	letter = letter & 0x0F;
	letter = letter<<4;
	lcd_port &= 0x0F;
     8f4:	98 b1       	in	r25, 0x08	; 8
     8f6:	9f 70       	andi	r25, 0x0F	; 15
     8f8:	98 b9       	out	0x08, r25	; 8
	lcd_port |= letter;
     8fa:	98 b1       	in	r25, 0x08	; 8
     8fc:	82 95       	swap	r24
     8fe:	80 7f       	andi	r24, 0xF0	; 240
     900:	98 2b       	or	r25, r24
     902:	98 b9       	out	0x08, r25	; 8
	sbit(lcd_port,RS);
     904:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     906:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     908:	42 9a       	sbi	0x08, 2	; 8
     90a:	c9 01       	movw	r24, r18
     90c:	01 97       	sbiw	r24, 0x01	; 1
     90e:	f1 f7       	brne	.-4      	; 0x90c <lcd_wr_char+0x3a>
	_delay_ms(5);
	cbit(lcd_port,EN);
     910:	42 98       	cbi	0x08, 2	; 8
}
     912:	08 95       	ret

00000914 <lcd_home>:


void lcd_home()
{
	lcd_wr_command(0x80);
     914:	80 e8       	ldi	r24, 0x80	; 128
     916:	0e 94 34 04 	call	0x868	; 0x868 <lcd_wr_command>
}
     91a:	08 95       	ret

0000091c <lcd_string>:


//Function to Print String on LCD
void lcd_string(char *str)
{
     91c:	cf 93       	push	r28
     91e:	df 93       	push	r29
     920:	ec 01       	movw	r28, r24
     922:	03 c0       	rjmp	.+6      	; 0x92a <lcd_string+0xe>
	while(*str != '\0')
	{
		lcd_wr_char(*str);
     924:	0e 94 69 04 	call	0x8d2	; 0x8d2 <lcd_wr_char>
		str++;
     928:	21 96       	adiw	r28, 0x01	; 1


//Function to Print String on LCD
void lcd_string(char *str)
{
	while(*str != '\0')
     92a:	88 81       	ld	r24, Y
     92c:	88 23       	and	r24, r24
     92e:	d1 f7       	brne	.-12     	; 0x924 <lcd_string+0x8>
	{
		lcd_wr_char(*str);
		str++;
	}
}
     930:	df 91       	pop	r29
     932:	cf 91       	pop	r28
     934:	08 95       	ret

00000936 <lcd_cursor>:

//Position the LCD cursor at "row", "column"

void lcd_cursor (char row, char column)
{
	switch (row) {
     936:	82 30       	cpi	r24, 0x02	; 2
     938:	69 f0       	breq	.+26     	; 0x954 <lcd_cursor+0x1e>
     93a:	83 30       	cpi	r24, 0x03	; 3
     93c:	18 f4       	brcc	.+6      	; 0x944 <lcd_cursor+0xe>
     93e:	81 30       	cpi	r24, 0x01	; 1
     940:	a9 f4       	brne	.+42     	; 0x96c <lcd_cursor+0x36>
     942:	05 c0       	rjmp	.+10     	; 0x94e <lcd_cursor+0x18>
     944:	83 30       	cpi	r24, 0x03	; 3
     946:	49 f0       	breq	.+18     	; 0x95a <lcd_cursor+0x24>
     948:	84 30       	cpi	r24, 0x04	; 4
     94a:	81 f4       	brne	.+32     	; 0x96c <lcd_cursor+0x36>
     94c:	0b c0       	rjmp	.+22     	; 0x964 <lcd_cursor+0x2e>
		case 1: lcd_wr_command (0x80 + column - 1); break;
     94e:	86 2f       	mov	r24, r22
     950:	81 58       	subi	r24, 0x81	; 129
     952:	05 c0       	rjmp	.+10     	; 0x95e <lcd_cursor+0x28>
		case 2: lcd_wr_command (0xc0 + column - 1); break;
     954:	86 2f       	mov	r24, r22
     956:	81 54       	subi	r24, 0x41	; 65
     958:	02 c0       	rjmp	.+4      	; 0x95e <lcd_cursor+0x28>
		case 3: lcd_wr_command (0x94 + column - 1); break;
     95a:	86 2f       	mov	r24, r22
     95c:	8d 56       	subi	r24, 0x6D	; 109
     95e:	0e 94 34 04 	call	0x868	; 0x868 <lcd_wr_command>
     962:	08 95       	ret
		case 4: lcd_wr_command (0xd4 + column - 1); break;
     964:	86 2f       	mov	r24, r22
     966:	8d 52       	subi	r24, 0x2D	; 45
     968:	0e 94 34 04 	call	0x868	; 0x868 <lcd_wr_command>
     96c:	08 95       	ret

0000096e <lcd_print>:
	}
}

//Function to print any input value up to the desired digit on LCD
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
     96e:	0f 93       	push	r16
     970:	1f 93       	push	r17
     972:	cf 93       	push	r28
     974:	df 93       	push	r29
     976:	8a 01       	movw	r16, r20
     978:	e9 01       	movw	r28, r18
	unsigned char flag=0;
	if(row==0||coloumn==0)
     97a:	88 23       	and	r24, r24
     97c:	11 f0       	breq	.+4      	; 0x982 <lcd_print+0x14>
     97e:	66 23       	and	r22, r22
     980:	19 f4       	brne	.+6      	; 0x988 <lcd_print+0x1a>
	{
		lcd_home();
     982:	0e 94 8a 04 	call	0x914	; 0x914 <lcd_home>
     986:	02 c0       	rjmp	.+4      	; 0x98c <lcd_print+0x1e>
	}
	else
	{
		lcd_cursor(row,coloumn);
     988:	0e 94 9b 04 	call	0x936	; 0x936 <lcd_cursor>
	}
	if(digits==5 || flag==1)
     98c:	c5 30       	cpi	r28, 0x05	; 5
     98e:	d1 05       	cpc	r29, r1
     990:	71 f4       	brne	.+28     	; 0x9ae <lcd_print+0x40>
	{
		million=value/10000+48;
     992:	c8 01       	movw	r24, r16
     994:	60 e1       	ldi	r22, 0x10	; 16
     996:	77 e2       	ldi	r23, 0x27	; 39
     998:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <__udivmodhi4>
     99c:	cb 01       	movw	r24, r22
     99e:	c0 96       	adiw	r24, 0x30	; 48
     9a0:	90 93 28 04 	sts	0x0428, r25
     9a4:	80 93 27 04 	sts	0x0427, r24
		lcd_wr_char(million);
     9a8:	0e 94 69 04 	call	0x8d2	; 0x8d2 <lcd_wr_char>
     9ac:	05 c0       	rjmp	.+10     	; 0x9b8 <lcd_print+0x4a>
		flag=1;
	}
	if(digits==4 || flag==1)
     9ae:	c4 30       	cpi	r28, 0x04	; 4
     9b0:	d1 05       	cpc	r29, r1
     9b2:	11 f0       	breq	.+4      	; 0x9b8 <lcd_print+0x4a>
     9b4:	80 e0       	ldi	r24, 0x00	; 0
     9b6:	16 c0       	rjmp	.+44     	; 0x9e4 <lcd_print+0x76>
	{
		temp = value/1000;
     9b8:	c8 01       	movw	r24, r16
     9ba:	68 ee       	ldi	r22, 0xE8	; 232
     9bc:	73 e0       	ldi	r23, 0x03	; 3
     9be:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <__udivmodhi4>
     9c2:	cb 01       	movw	r24, r22
     9c4:	60 93 2e 04 	sts	0x042E, r22
     9c8:	90 93 2f 04 	sts	0x042F, r25
		thousand = temp%10 + 48;
     9cc:	6a e0       	ldi	r22, 0x0A	; 10
     9ce:	70 e0       	ldi	r23, 0x00	; 0
     9d0:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <__udivmodhi4>
     9d4:	c0 96       	adiw	r24, 0x30	; 48
     9d6:	90 93 41 04 	sts	0x0441, r25
     9da:	80 93 40 04 	sts	0x0440, r24
		lcd_wr_char(thousand);
     9de:	0e 94 69 04 	call	0x8d2	; 0x8d2 <lcd_wr_char>
     9e2:	81 e0       	ldi	r24, 0x01	; 1
		flag=1;
	}
	if(digits==3 || flag==1)
     9e4:	c3 30       	cpi	r28, 0x03	; 3
     9e6:	d1 05       	cpc	r29, r1
     9e8:	21 f0       	breq	.+8      	; 0x9f2 <lcd_print+0x84>
     9ea:	81 30       	cpi	r24, 0x01	; 1
     9ec:	11 f0       	breq	.+4      	; 0x9f2 <lcd_print+0x84>
     9ee:	80 e0       	ldi	r24, 0x00	; 0
     9f0:	16 c0       	rjmp	.+44     	; 0xa1e <lcd_print+0xb0>
	{
		temp = value/100;
     9f2:	c8 01       	movw	r24, r16
     9f4:	64 e6       	ldi	r22, 0x64	; 100
     9f6:	70 e0       	ldi	r23, 0x00	; 0
     9f8:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <__udivmodhi4>
     9fc:	cb 01       	movw	r24, r22
     9fe:	60 93 2e 04 	sts	0x042E, r22
     a02:	90 93 2f 04 	sts	0x042F, r25
		hundred = temp%10 + 48;
     a06:	6a e0       	ldi	r22, 0x0A	; 10
     a08:	70 e0       	ldi	r23, 0x00	; 0
     a0a:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <__udivmodhi4>
     a0e:	c0 96       	adiw	r24, 0x30	; 48
     a10:	90 93 3c 04 	sts	0x043C, r25
     a14:	80 93 3b 04 	sts	0x043B, r24
		lcd_wr_char(hundred);
     a18:	0e 94 69 04 	call	0x8d2	; 0x8d2 <lcd_wr_char>
     a1c:	81 e0       	ldi	r24, 0x01	; 1
		flag=1;
	}
	if(digits==2 || flag==1)
     a1e:	c2 30       	cpi	r28, 0x02	; 2
     a20:	d1 05       	cpc	r29, r1
     a22:	21 f0       	breq	.+8      	; 0xa2c <lcd_print+0xbe>
     a24:	81 30       	cpi	r24, 0x01	; 1
     a26:	11 f0       	breq	.+4      	; 0xa2c <lcd_print+0xbe>
     a28:	80 e0       	ldi	r24, 0x00	; 0
     a2a:	16 c0       	rjmp	.+44     	; 0xa58 <lcd_print+0xea>
	{
		temp = value/10;
     a2c:	c8 01       	movw	r24, r16
     a2e:	6a e0       	ldi	r22, 0x0A	; 10
     a30:	70 e0       	ldi	r23, 0x00	; 0
     a32:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <__udivmodhi4>
     a36:	cb 01       	movw	r24, r22
     a38:	60 93 2e 04 	sts	0x042E, r22
     a3c:	90 93 2f 04 	sts	0x042F, r25
		tens = temp%10 + 48;
     a40:	6a e0       	ldi	r22, 0x0A	; 10
     a42:	70 e0       	ldi	r23, 0x00	; 0
     a44:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <__udivmodhi4>
     a48:	c0 96       	adiw	r24, 0x30	; 48
     a4a:	90 93 39 04 	sts	0x0439, r25
     a4e:	80 93 38 04 	sts	0x0438, r24
		lcd_wr_char(tens);
     a52:	0e 94 69 04 	call	0x8d2	; 0x8d2 <lcd_wr_char>
     a56:	81 e0       	ldi	r24, 0x01	; 1
		flag=1;
	}
	if(digits==1 || flag==1)
     a58:	c1 30       	cpi	r28, 0x01	; 1
     a5a:	d1 05       	cpc	r29, r1
     a5c:	11 f0       	breq	.+4      	; 0xa62 <lcd_print+0xf4>
     a5e:	81 30       	cpi	r24, 0x01	; 1
     a60:	61 f4       	brne	.+24     	; 0xa7a <lcd_print+0x10c>
	{
		unit = value%10 + 48;
     a62:	c8 01       	movw	r24, r16
     a64:	6a e0       	ldi	r22, 0x0A	; 10
     a66:	70 e0       	ldi	r23, 0x00	; 0
     a68:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <__udivmodhi4>
     a6c:	c0 96       	adiw	r24, 0x30	; 48
     a6e:	90 93 3f 04 	sts	0x043F, r25
     a72:	80 93 3e 04 	sts	0x043E, r24
		lcd_wr_char(unit);
     a76:	0e 94 69 04 	call	0x8d2	; 0x8d2 <lcd_wr_char>
	}
	if(digits>5)
     a7a:	26 97       	sbiw	r28, 0x06	; 6
     a7c:	1c f0       	brlt	.+6      	; 0xa84 <lcd_print+0x116>
	{
		lcd_wr_char('E');
     a7e:	85 e4       	ldi	r24, 0x45	; 69
     a80:	0e 94 69 04 	call	0x8d2	; 0x8d2 <lcd_wr_char>
	}
}
     a84:	df 91       	pop	r29
     a86:	cf 91       	pop	r28
     a88:	1f 91       	pop	r17
     a8a:	0f 91       	pop	r16
     a8c:	08 95       	ret

00000a8e <lcd_port_config>:
float BATT_Voltage, BATT_V;

//Function to configure LCD port
void lcd_port_config (void)
{
 DDRC = DDRC | 0xF7; //all the LCD pin's direction set as output
     a8e:	87 b1       	in	r24, 0x07	; 7
     a90:	87 6f       	ori	r24, 0xF7	; 247
     a92:	87 b9       	out	0x07, r24	; 7
 PORTC = PORTC & 0x80; // all the LCD pins are set to logic 0 except PORTC 7
     a94:	88 b1       	in	r24, 0x08	; 8
     a96:	80 78       	andi	r24, 0x80	; 128
     a98:	88 b9       	out	0x08, r24	; 8
}
     a9a:	08 95       	ret

00000a9c <adc_pin_config>:

//ADC pin configuration
void adc_pin_config (void)
{
 DDRF = 0x00; //set PORTF direction as input
     a9c:	10 ba       	out	0x10, r1	; 16
 PORTF = 0x00; //set PORTF pins floating
     a9e:	11 ba       	out	0x11, r1	; 17
 DDRK = 0x00; //set PORTK direction as input
     aa0:	10 92 07 01 	sts	0x0107, r1
 PORTK = 0x00; //set PORTK pins floating
     aa4:	10 92 08 01 	sts	0x0108, r1
}
     aa8:	08 95       	ret

00000aaa <ir_port_init>:
float BATT_Voltage, BATT_V;

//Function to configure LCD port
void lcd_port_config (void)
{
 DDRC = DDRC | 0xF7; //all the LCD pin's direction set as output
     aaa:	87 b1       	in	r24, 0x07	; 7
     aac:	87 6f       	ori	r24, 0xF7	; 247
     aae:	87 b9       	out	0x07, r24	; 7
 PORTC = PORTC & 0x80; // all the LCD pins are set to logic 0 except PORTC 7
     ab0:	88 b1       	in	r24, 0x08	; 8
     ab2:	80 78       	andi	r24, 0x80	; 128
     ab4:	88 b9       	out	0x08, r24	; 8
}

//ADC pin configuration
void adc_pin_config (void)
{
 DDRF = 0x00; //set PORTF direction as input
     ab6:	10 ba       	out	0x10, r1	; 16
 PORTF = 0x00; //set PORTF pins floating
     ab8:	11 ba       	out	0x11, r1	; 17
 DDRK = 0x00; //set PORTK direction as input
     aba:	10 92 07 01 	sts	0x0107, r1
 PORTK = 0x00; //set PORTK pins floating
     abe:	10 92 08 01 	sts	0x0108, r1
//Function to Initialize PORTS
void ir_port_init()
{
	lcd_port_config();
	adc_pin_config();	
}
     ac2:	08 95       	ret

00000ac4 <adc_init>:

//Function to Initialize ADC
void adc_init()
{
	ADCSRA = 0x00;
     ac4:	ea e7       	ldi	r30, 0x7A	; 122
     ac6:	f0 e0       	ldi	r31, 0x00	; 0
     ac8:	10 82       	st	Z, r1
	ADCSRB = 0x00;		//MUX5 = 0
     aca:	10 92 7b 00 	sts	0x007B, r1
	ADMUX = 0x20;		//Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
     ace:	80 e2       	ldi	r24, 0x20	; 32
     ad0:	80 93 7c 00 	sts	0x007C, r24
	ACSR = 0x80;
     ad4:	80 e8       	ldi	r24, 0x80	; 128
     ad6:	80 bf       	out	0x30, r24	; 48
	ADCSRA = 0x86;		//ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
     ad8:	86 e8       	ldi	r24, 0x86	; 134
     ada:	80 83       	st	Z, r24
}
     adc:	08 95       	ret

00000ade <ADC_Conversion>:



//This Function accepts the Channel Number and returns the corresponding Analog Value 
unsigned char ADC_Conversion(unsigned char Ch)
{
     ade:	98 2f       	mov	r25, r24
	unsigned char a;
	if(Ch>7)
     ae0:	88 30       	cpi	r24, 0x08	; 8
     ae2:	18 f0       	brcs	.+6      	; 0xaea <ADC_Conversion+0xc>
	{
		ADCSRB = 0x08;
     ae4:	88 e0       	ldi	r24, 0x08	; 8
     ae6:	80 93 7b 00 	sts	0x007B, r24
	}
	Ch = Ch & 0x07;  			
	ADMUX= 0x20| Ch;	   		
     aea:	97 70       	andi	r25, 0x07	; 7
     aec:	90 62       	ori	r25, 0x20	; 32
     aee:	90 93 7c 00 	sts	0x007C, r25
	ADCSRA = ADCSRA | 0x40;		//Set start conversion bit
     af2:	80 91 7a 00 	lds	r24, 0x007A
     af6:	80 64       	ori	r24, 0x40	; 64
     af8:	80 93 7a 00 	sts	0x007A, r24
	while((ADCSRA&0x10)==0);	//Wait for ADC conversion to complete
     afc:	80 91 7a 00 	lds	r24, 0x007A
     b00:	84 ff       	sbrs	r24, 4
     b02:	fc cf       	rjmp	.-8      	; 0xafc <ADC_Conversion+0x1e>
	a=ADCH;
     b04:	80 91 79 00 	lds	r24, 0x0079
	ADCSRA = ADCSRA|0x10; //clear ADIF (ADC Interrupt Flag) by writing 1 to it
     b08:	90 91 7a 00 	lds	r25, 0x007A
     b0c:	90 61       	ori	r25, 0x10	; 16
     b0e:	90 93 7a 00 	sts	0x007A, r25
	ADCSRB = 0x00;
     b12:	10 92 7b 00 	sts	0x007B, r1
	return a;
}
     b16:	08 95       	ret

00000b18 <print_sensor>:


// This Function prints the Analog Value Of Corresponding Channel No. at required Row
// and Coloumn Location. 
void print_sensor(char row, char coloumn,unsigned char channel)
{
     b18:	0f 93       	push	r16
     b1a:	1f 93       	push	r17
     b1c:	18 2f       	mov	r17, r24
     b1e:	06 2f       	mov	r16, r22
     b20:	84 2f       	mov	r24, r20
	ADC_Value = ADC_Conversion(channel);
     b22:	0e 94 6f 05 	call	0xade	; 0xade <ADC_Conversion>
     b26:	48 2f       	mov	r20, r24
     b28:	80 93 31 04 	sts	0x0431, r24
	lcd_print(row, coloumn, ADC_Value, 3);
     b2c:	81 2f       	mov	r24, r17
     b2e:	60 2f       	mov	r22, r16
     b30:	50 e0       	ldi	r21, 0x00	; 0
     b32:	23 e0       	ldi	r18, 0x03	; 3
     b34:	30 e0       	ldi	r19, 0x00	; 0
     b36:	0e 94 b7 04 	call	0x96e	; 0x96e <lcd_print>
}
     b3a:	1f 91       	pop	r17
     b3c:	0f 91       	pop	r16
     b3e:	08 95       	ret

00000b40 <buzzer_pin_config>:
unsigned int start_signal=0;


void buzzer_pin_config (void)
{
 DDRC = DDRC | 0x08;		//Setting PORTC 3 as outpt
     b40:	3b 9a       	sbi	0x07, 3	; 7
 PORTC = PORTC & 0xF7;		//Setting PORTC 3 logic low to turnoff buzzer
     b42:	43 98       	cbi	0x08, 3	; 8
}
     b44:	08 95       	ret

00000b46 <port_init>:
unsigned int start_signal=0;


void buzzer_pin_config (void)
{
 DDRC = DDRC | 0x08;		//Setting PORTC 3 as outpt
     b46:	3b 9a       	sbi	0x07, 3	; 7
 PORTC = PORTC & 0xF7;		//Setting PORTC 3 logic low to turnoff buzzer
     b48:	43 98       	cbi	0x08, 3	; 8
//Function to initialize ports
void port_init()
{
	//motion_pin_config();
	buzzer_pin_config();
}
     b4a:	08 95       	ret

00000b4c <buzzer_on>:

void buzzer_on (void)
{
 unsigned char port_restore = 0;
 port_restore = PINC;
     b4c:	86 b1       	in	r24, 0x06	; 6
 port_restore = port_restore | 0x08;
     b4e:	88 60       	ori	r24, 0x08	; 8
 PORTC = port_restore;
     b50:	88 b9       	out	0x08, r24	; 8
}
     b52:	08 95       	ret

00000b54 <buzzer_off>:

void buzzer_off (void)
{
 unsigned char port_restore = 0;
 port_restore = PINC;
     b54:	86 b1       	in	r24, 0x06	; 6
 port_restore = port_restore & 0xF7;
     b56:	87 7f       	andi	r24, 0xF7	; 247
 PORTC = port_restore;
     b58:	88 b9       	out	0x08, r24	; 8
}
     b5a:	08 95       	ret

00000b5c <uart2_init>:
// char size: 8 bit
// parity: Disabled
void uart2_init(void)
{

 UCSR2B = 0x00; //disable while setting baud rate
     b5c:	e1 ed       	ldi	r30, 0xD1	; 209
     b5e:	f0 e0       	ldi	r31, 0x00	; 0
     b60:	10 82       	st	Z, r1
 UCSR2A = 0x00;
     b62:	10 92 d0 00 	sts	0x00D0, r1
 //UCSR2A = 0x20;
 UCSR2C = 0x06;
     b66:	86 e0       	ldi	r24, 0x06	; 6
     b68:	80 93 d2 00 	sts	0x00D2, r24
 UBRR2L = 0x5F; //set baud rate lo
     b6c:	8f e5       	ldi	r24, 0x5F	; 95
     b6e:	80 93 d4 00 	sts	0x00D4, r24
 UBRR2H = 0x00; //set baud rate hi
     b72:	10 92 d5 00 	sts	0x00D5, r1
 UCSR2B = 0x98;
     b76:	88 e9       	ldi	r24, 0x98	; 152
     b78:	80 83       	st	Z, r24
 //UCSR2B = 0xF8;
}
     b7a:	08 95       	ret

00000b7c <distribute_to>:

void distribute_to(int fruit_class){
	 route(fruit_class); 
     b7c:	0e 94 c5 02 	call	0x58a	; 0x58a <route>
	 let_fruit_go();
     b80:	0e 94 bc 02 	call	0x578	; 0x578 <let_fruit_go>
}
     b84:	08 95       	ret

00000b86 <init_devices>:


//Function To Initialize all The Devices
void init_devices()
{
 cli(); //Clears the global interrupts
     b86:	f8 94       	cli
unsigned int start_signal=0;


void buzzer_pin_config (void)
{
 DDRC = DDRC | 0x08;		//Setting PORTC 3 as outpt
     b88:	3b 9a       	sbi	0x07, 3	; 7
 PORTC = PORTC & 0xF7;		//Setting PORTC 3 logic low to turnoff buzzer
     b8a:	43 98       	cbi	0x08, 3	; 8
// char size: 8 bit
// parity: Disabled
void uart2_init(void)
{

 UCSR2B = 0x00; //disable while setting baud rate
     b8c:	e1 ed       	ldi	r30, 0xD1	; 209
     b8e:	f0 e0       	ldi	r31, 0x00	; 0
     b90:	10 82       	st	Z, r1
 UCSR2A = 0x00;
     b92:	10 92 d0 00 	sts	0x00D0, r1
 //UCSR2A = 0x20;
 UCSR2C = 0x06;
     b96:	86 e0       	ldi	r24, 0x06	; 6
     b98:	80 93 d2 00 	sts	0x00D2, r24
 UBRR2L = 0x5F; //set baud rate lo
     b9c:	8f e5       	ldi	r24, 0x5F	; 95
     b9e:	80 93 d4 00 	sts	0x00D4, r24
 UBRR2H = 0x00; //set baud rate hi
     ba2:	10 92 d5 00 	sts	0x00D5, r1
 UCSR2B = 0x98;
     ba6:	88 e9       	ldi	r24, 0x98	; 152
     ba8:	80 83       	st	Z, r24
unsigned int million;

//Function to configure LCD port
void lcd1_port_config (void)
{
 DDRC = DDRC | 0xF7; //all the LCD pin's direction set as output
     baa:	87 b1       	in	r24, 0x07	; 7
     bac:	87 6f       	ori	r24, 0xF7	; 247
     bae:	87 b9       	out	0x07, r24	; 7
 PORTC = PORTC & 0x80; // all the LCD pins are set to logic 0 except PORTC 7
     bb0:	88 b1       	in	r24, 0x08	; 8
     bb2:	80 78       	andi	r24, 0x80	; 128
     bb4:	88 b9       	out	0x08, r24	; 8


//Configure PORTB 5 pin for servo motor 1 operation
void servo1_pin_config (void)
{
 DDRB  = DDRB | 0x20;  //making PORTB 5 pin output
     bb6:	25 9a       	sbi	0x04, 5	; 4
 PORTB = PORTB | 0x20; //setting PORTB 5 pin to logic 1
     bb8:	2d 9a       	sbi	0x05, 5	; 5
}

//Configure PORTB 6 pin for servo motor 2 operation
void servo2_pin_config (void)
{
 DDRB  = DDRB | 0x40;  //making PORTB 6 pin output
     bba:	26 9a       	sbi	0x04, 6	; 4
 PORTB = PORTB | 0x40; //setting PORTB 6 pin to logic 1
     bbc:	2e 9a       	sbi	0x05, 6	; 5
 cli(); //Clears the global interrupts
 port_init();  //Initializes all the ports
 uart2_init(); //Initailize UART2 for serial communiaction
 lcd1_port_init();
 servo_port_init();
 timer1_init();
     bbe:	0e 94 3d 02 	call	0x47a	; 0x47a <timer1_init>
float BATT_Voltage, BATT_V;

//Function to configure LCD port
void lcd_port_config (void)
{
 DDRC = DDRC | 0xF7; //all the LCD pin's direction set as output
     bc2:	87 b1       	in	r24, 0x07	; 7
     bc4:	87 6f       	ori	r24, 0xF7	; 247
     bc6:	87 b9       	out	0x07, r24	; 7
 PORTC = PORTC & 0x80; // all the LCD pins are set to logic 0 except PORTC 7
     bc8:	88 b1       	in	r24, 0x08	; 8
     bca:	80 78       	andi	r24, 0x80	; 128
     bcc:	88 b9       	out	0x08, r24	; 8
}

//ADC pin configuration
void adc_pin_config (void)
{
 DDRF = 0x00; //set PORTF direction as input
     bce:	10 ba       	out	0x10, r1	; 16
 PORTF = 0x00; //set PORTF pins floating
     bd0:	11 ba       	out	0x11, r1	; 17
 DDRK = 0x00; //set PORTK direction as input
     bd2:	10 92 07 01 	sts	0x0107, r1
 PORTK = 0x00; //set PORTK pins floating
     bd6:	10 92 08 01 	sts	0x0108, r1
}

//Function to Initialize ADC
void adc_init()
{
	ADCSRA = 0x00;
     bda:	ea e7       	ldi	r30, 0x7A	; 122
     bdc:	f0 e0       	ldi	r31, 0x00	; 0
     bde:	10 82       	st	Z, r1
	ADCSRB = 0x00;		//MUX5 = 0
     be0:	10 92 7b 00 	sts	0x007B, r1
	ADMUX = 0x20;		//Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
     be4:	80 e2       	ldi	r24, 0x20	; 32
     be6:	80 93 7c 00 	sts	0x007C, r24
	ACSR = 0x80;
     bea:	80 e8       	ldi	r24, 0x80	; 128
     bec:	80 bf       	out	0x30, r24	; 48
	ADCSRA = 0x86;		//ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
     bee:	86 e8       	ldi	r24, 0x86	; 134
     bf0:	80 83       	st	Z, r24
 ir_port_init();
 adc_init();
 motion_port_init();  //Initializes all the ports
     bf2:	0e 94 1f 03 	call	0x63e	; 0x63e <motion_port_init>
 right_encoder_pin_config(); //right encoder pin config	
}

void left_position_encoder_interrupt_init (void) //Interrupt 4 enable
{
 cli(); //Clears the global interrupt
     bf6:	f8 94       	cli
 EICRB = EICRB | 0x02; // INT4 is set to trigger with falling edge
     bf8:	ea e6       	ldi	r30, 0x6A	; 106
     bfa:	f0 e0       	ldi	r31, 0x00	; 0
     bfc:	80 81       	ld	r24, Z
     bfe:	82 60       	ori	r24, 0x02	; 2
     c00:	80 83       	st	Z, r24
 EIMSK = EIMSK | 0x10; // Enable Interrupt INT4 for left position encoder
     c02:	ec 9a       	sbi	0x1d, 4	; 29
 sei();   // Enables the global interrupt 
     c04:	78 94       	sei
}

void right_position_encoder_interrupt_init (void) //Interrupt 5 enable
{
 cli(); //Clears the global interrupt
     c06:	f8 94       	cli
 EICRB = EICRB | 0x08; // INT5 is set to trigger with falling edge
     c08:	ea e6       	ldi	r30, 0x6A	; 106
     c0a:	f0 e0       	ldi	r31, 0x00	; 0
     c0c:	80 81       	ld	r24, Z
     c0e:	88 60       	ori	r24, 0x08	; 8
     c10:	80 83       	st	Z, r24
 EIMSK = EIMSK | 0x20; // Enable Interrupt INT5 for right position encoder
     c12:	ed 9a       	sbi	0x1d, 5	; 29
 sei();   // Enables the global interrupt 
     c14:	78 94       	sei
 left_position_encoder_interrupt_init();
 right_position_encoder_interrupt_init();
 lcd1_set_4bit();
     c16:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <lcd1_set_4bit>
 lcd1_init();
     c1a:	0e 94 37 01 	call	0x26e	; 0x26e <lcd1_init>
 barrior_gate_down(); 	
     c1e:	0e 94 af 02 	call	0x55e	; 0x55e <barrior_gate_down>
 empty=0; //currently hardcoding it but eed to sense & update in follo loop
     c22:	10 92 0e 03 	sts	0x030E, r1
     c26:	10 92 0d 03 	sts	0x030D, r1


 wait_for_class_label=0;
     c2a:	10 92 20 04 	sts	0x0420, r1
 extract_fruit=1;
     c2e:	81 e0       	ldi	r24, 0x01	; 1
     c30:	80 93 04 03 	sts	0x0304, r24
 ir_dispence=255;
     c34:	8f ef       	ldi	r24, 0xFF	; 255
     c36:	90 e0       	ldi	r25, 0x00	; 0
     c38:	90 93 06 03 	sts	0x0306, r25
     c3c:	80 93 05 03 	sts	0x0305, r24
 ir_ip=255;
     c40:	90 93 08 03 	sts	0x0308, r25
     c44:	80 93 07 03 	sts	0x0307, r24
 fruit_sensed=1;
     c48:	81 e0       	ldi	r24, 0x01	; 1
     c4a:	90 e0       	ldi	r25, 0x00	; 0
     c4c:	90 93 0a 03 	sts	0x030A, r25
     c50:	80 93 09 03 	sts	0x0309, r24
 ip_hungry=1;
     c54:	90 93 0c 03 	sts	0x030C, r25
     c58:	80 93 0b 03 	sts	0x030B, r24

 sei();   //Enables the global interrupts
     c5c:	78 94       	sei

}
     c5e:	08 95       	ret

00000c60 <__vector_51>:
	 let_fruit_go();
}


SIGNAL(SIG_USART2_RECV) 		// ISR for receive complete interrupt
{
     c60:	1f 92       	push	r1
     c62:	0f 92       	push	r0
     c64:	0f b6       	in	r0, 0x3f	; 63
     c66:	0f 92       	push	r0
     c68:	0b b6       	in	r0, 0x3b	; 59
     c6a:	0f 92       	push	r0
     c6c:	11 24       	eor	r1, r1
     c6e:	2f 93       	push	r18
     c70:	3f 93       	push	r19
     c72:	4f 93       	push	r20
     c74:	5f 93       	push	r21
     c76:	6f 93       	push	r22
     c78:	7f 93       	push	r23
     c7a:	8f 93       	push	r24
     c7c:	9f 93       	push	r25
     c7e:	af 93       	push	r26
     c80:	bf 93       	push	r27
     c82:	ef 93       	push	r30
     c84:	ff 93       	push	r31
	data = UDR2; 				//making copy of data from UDR2 (through serial communication) in 'data' variable 
     c86:	80 91 d6 00 	lds	r24, 0x00D6
     c8a:	80 93 3a 04 	sts	0x043A, r24
	
	switch(data)
     c8e:	86 33       	cpi	r24, 0x36	; 54
     c90:	61 f1       	breq	.+88     	; 0xcea <__vector_51+0x8a>
     c92:	87 33       	cpi	r24, 0x37	; 55
     c94:	40 f4       	brcc	.+16     	; 0xca6 <__vector_51+0x46>
     c96:	82 33       	cpi	r24, 0x32	; 50
     c98:	b1 f0       	breq	.+44     	; 0xcc6 <__vector_51+0x66>
     c9a:	83 33       	cpi	r24, 0x33	; 51
     c9c:	f9 f0       	breq	.+62     	; 0xcdc <__vector_51+0x7c>
     c9e:	81 33       	cpi	r24, 0x31	; 49
     ca0:	09 f0       	breq	.+2      	; 0xca4 <__vector_51+0x44>
     ca2:	52 c0       	rjmp	.+164    	; 0xd48 <__vector_51+0xe8>
     ca4:	09 c0       	rjmp	.+18     	; 0xcb8 <__vector_51+0x58>
     ca6:	88 33       	cpi	r24, 0x38	; 56
     ca8:	09 f4       	brne	.+2      	; 0xcac <__vector_51+0x4c>
     caa:	49 c0       	rjmp	.+146    	; 0xd3e <__vector_51+0xde>
     cac:	88 33       	cpi	r24, 0x38	; 56
     cae:	e0 f1       	brcs	.+120    	; 0xd28 <__vector_51+0xc8>
     cb0:	89 33       	cpi	r24, 0x39	; 57
     cb2:	09 f0       	breq	.+2      	; 0xcb6 <__vector_51+0x56>
     cb4:	49 c0       	rjmp	.+146    	; 0xd48 <__vector_51+0xe8>
     cb6:	3f c0       	rjmp	.+126    	; 0xd36 <__vector_51+0xd6>
	{

		case CLASS_1 :if(wait_for_class_label){
     cb8:	80 91 20 04 	lds	r24, 0x0420
     cbc:	88 23       	and	r24, r24
     cbe:	19 f0       	breq	.+6      	; 0xcc6 <__vector_51+0x66>
							distribute_to(1);
     cc0:	81 e0       	ldi	r24, 0x01	; 1
     cc2:	90 e0       	ldi	r25, 0x00	; 0
     cc4:	06 c0       	rjmp	.+12     	; 0xcd2 <__vector_51+0x72>
							wait_for_class_label=0;
							break;
					  }

		case CLASS_2 :if(wait_for_class_label){
     cc6:	80 91 20 04 	lds	r24, 0x0420
     cca:	88 23       	and	r24, r24
     ccc:	39 f0       	breq	.+14     	; 0xcdc <__vector_51+0x7c>
							distribute_to(2);
     cce:	82 e0       	ldi	r24, 0x02	; 2
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	0e 94 be 05 	call	0xb7c	; 0xb7c <distribute_to>
							wait_for_class_label=0;
     cd6:	10 92 20 04 	sts	0x0420, r1
     cda:	4f c0       	rjmp	.+158    	; 0xd7a <__vector_51+0x11a>
							break;
					  }

		case CLASS_3 :if(wait_for_class_label){
     cdc:	80 91 20 04 	lds	r24, 0x0420
     ce0:	88 23       	and	r24, r24
     ce2:	19 f0       	breq	.+6      	; 0xcea <__vector_51+0x8a>
							distribute_to(3);
     ce4:	83 e0       	ldi	r24, 0x03	; 3
     ce6:	90 e0       	ldi	r25, 0x00	; 0
     ce8:	f4 cf       	rjmp	.-24     	; 0xcd2 <__vector_51+0x72>
							wait_for_class_label=0;
							break;
					  }
		
		case INIT_SIG : init_devices();
     cea:	0e 94 c3 05 	call	0xb86	; 0xb86 <init_devices>
						init_signal=1; //set init_signal so that the code in main comes out of bysy waiting for init
     cee:	81 e0       	ldi	r24, 0x01	; 1
     cf0:	90 e0       	ldi	r25, 0x00	; 0
     cf2:	90 93 22 04 	sts	0x0422, r25
     cf6:	80 93 21 04 	sts	0x0421, r24
						//------- 
						cli();
     cfa:	f8 94       	cli
						UDR2 = data;   //echo data back to PC indicating initialisation complete & i am ready
     cfc:	80 91 3a 04 	lds	r24, 0x043A
     d00:	80 93 d6 00 	sts	0x00D6, r24
						sei();
     d04:	78 94       	sei
						//---------------
						lcd1_cursor(1,3);
     d06:	81 e0       	ldi	r24, 0x01	; 1
     d08:	63 e0       	ldi	r22, 0x03	; 3
     d0a:	0e 94 7d 01 	call	0x2fa	; 0x2fa <lcd1_cursor>
						lcd1_string("Welcome :)                ");
     d0e:	8d e0       	ldi	r24, 0x0D	; 13
     d10:	92 e0       	ldi	r25, 0x02	; 2
     d12:	0e 94 70 01 	call	0x2e0	; 0x2e0 <lcd1_string>
						lcd1_cursor(2,3);
     d16:	82 e0       	ldi	r24, 0x02	; 2
     d18:	63 e0       	ldi	r22, 0x03	; 3
     d1a:	0e 94 7d 01 	call	0x2fa	; 0x2fa <lcd1_cursor>
						lcd1_string("I am ready, press start   ");
     d1e:	88 e2       	ldi	r24, 0x28	; 40
     d20:	92 e0       	ldi	r25, 0x02	; 2
     d22:	0e 94 70 01 	call	0x2e0	; 0x2e0 <lcd1_string>
     d26:	29 c0       	rjmp	.+82     	; 0xd7a <__vector_51+0x11a>
						break;

		case START_SIG : start_signal=1; //set start_signal so that the code in main comes out of bysy waiting for start
     d28:	81 e0       	ldi	r24, 0x01	; 1
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	90 93 24 04 	sts	0x0424, r25
     d30:	80 93 23 04 	sts	0x0423, r24
     d34:	22 c0       	rjmp	.+68     	; 0xd7a <__vector_51+0x11a>
						 break;

		case PAUSE_SIG : start_signal=0; 
						 break;	    

		case STOP_SIG : init_signal=0;start_signal=0; 
     d36:	10 92 22 04 	sts	0x0422, r1
     d3a:	10 92 21 04 	sts	0x0421, r1
     d3e:	10 92 24 04 	sts	0x0424, r1
     d42:	10 92 23 04 	sts	0x0423, r1
     d46:	19 c0       	rjmp	.+50     	; 0xd7a <__vector_51+0x11a>
						 break;	    

		
		default: lcd1_cursor(1,3);
     d48:	81 e0       	ldi	r24, 0x01	; 1
     d4a:	63 e0       	ldi	r22, 0x03	; 3
     d4c:	0e 94 7d 01 	call	0x2fa	; 0x2fa <lcd1_cursor>
				 lcd1_string("Got some data from PC");
     d50:	83 e4       	ldi	r24, 0x43	; 67
     d52:	92 e0       	ldi	r25, 0x02	; 2
     d54:	0e 94 70 01 	call	0x2e0	; 0x2e0 <lcd1_string>
				 lcd1_cursor(2,3);
     d58:	82 e0       	ldi	r24, 0x02	; 2
     d5a:	63 e0       	ldi	r22, 0x03	; 3
     d5c:	0e 94 7d 01 	call	0x2fa	; 0x2fa <lcd1_cursor>
				 lcd1_string("Data: ");
     d60:	89 e5       	ldi	r24, 0x59	; 89
     d62:	92 e0       	ldi	r25, 0x02	; 2
     d64:	0e 94 70 01 	call	0x2e0	; 0x2e0 <lcd1_string>
				 lcd_print(2,10,data,4);
     d68:	40 91 3a 04 	lds	r20, 0x043A
     d6c:	82 e0       	ldi	r24, 0x02	; 2
     d6e:	6a e0       	ldi	r22, 0x0A	; 10
     d70:	50 e0       	ldi	r21, 0x00	; 0
     d72:	24 e0       	ldi	r18, 0x04	; 4
     d74:	30 e0       	ldi	r19, 0x00	; 0
     d76:	0e 94 b7 04 	call	0x96e	; 0x96e <lcd_print>
				 ;break;

	}

}
     d7a:	ff 91       	pop	r31
     d7c:	ef 91       	pop	r30
     d7e:	bf 91       	pop	r27
     d80:	af 91       	pop	r26
     d82:	9f 91       	pop	r25
     d84:	8f 91       	pop	r24
     d86:	7f 91       	pop	r23
     d88:	6f 91       	pop	r22
     d8a:	5f 91       	pop	r21
     d8c:	4f 91       	pop	r20
     d8e:	3f 91       	pop	r19
     d90:	2f 91       	pop	r18
     d92:	0f 90       	pop	r0
     d94:	0b be       	out	0x3b, r0	; 59
     d96:	0f 90       	pop	r0
     d98:	0f be       	out	0x3f, r0	; 63
     d9a:	0f 90       	pop	r0
     d9c:	1f 90       	pop	r1
     d9e:	18 95       	reti

00000da0 <senseAll>:
}

void senseAll(){
		//these are defined in values.h ir_dispense_channel 5
	    //ir_ip_channel 4
		ir_dispence = ADC_Conversion(ir_dispence_channel );
     da0:	85 e0       	ldi	r24, 0x05	; 5
     da2:	0e 94 6f 05 	call	0xade	; 0xade <ADC_Conversion>
     da6:	90 e0       	ldi	r25, 0x00	; 0
     da8:	90 93 06 03 	sts	0x0306, r25
     dac:	80 93 05 03 	sts	0x0305, r24
		if(ir_dispence > dispence_proximity_threshold){ fruit_sensed=0;}
     db0:	87 3e       	cpi	r24, 0xE7	; 231
     db2:	91 05       	cpc	r25, r1
     db4:	28 f0       	brcs	.+10     	; 0xdc0 <senseAll+0x20>
     db6:	10 92 0a 03 	sts	0x030A, r1
     dba:	10 92 09 03 	sts	0x0309, r1
     dbe:	06 c0       	rjmp	.+12     	; 0xdcc <senseAll+0x2c>
		else { fruit_sensed=1; }
     dc0:	81 e0       	ldi	r24, 0x01	; 1
     dc2:	90 e0       	ldi	r25, 0x00	; 0
     dc4:	90 93 0a 03 	sts	0x030A, r25
     dc8:	80 93 09 03 	sts	0x0309, r24

		ir_ip = ADC_Conversion(ir_ip_channel);
     dcc:	84 e0       	ldi	r24, 0x04	; 4
     dce:	0e 94 6f 05 	call	0xade	; 0xade <ADC_Conversion>
     dd2:	90 e0       	ldi	r25, 0x00	; 0
     dd4:	90 93 08 03 	sts	0x0308, r25
     dd8:	80 93 07 03 	sts	0x0307, r24
		if(ir_ip > ip_proximity_threshold ) { ip_hungry=1;}
     ddc:	89 3c       	cpi	r24, 0xC9	; 201
     dde:	91 05       	cpc	r25, r1
     de0:	38 f0       	brcs	.+14     	; 0xdf0 <senseAll+0x50>
     de2:	81 e0       	ldi	r24, 0x01	; 1
     de4:	90 e0       	ldi	r25, 0x00	; 0
     de6:	90 93 0c 03 	sts	0x030C, r25
     dea:	80 93 0b 03 	sts	0x030B, r24
     dee:	08 95       	ret
		else { ip_hungry=0;}
     df0:	10 92 0c 03 	sts	0x030C, r1
     df4:	10 92 0b 03 	sts	0x030B, r1
     df8:	08 95       	ret

00000dfa <myfun>:
 sei();   //Enables the global interrupts

}


void myfun(){
     dfa:	88 e8       	ldi	r24, 0x88	; 136
     dfc:	93 e1       	ldi	r25, 0x13	; 19
     dfe:	29 e1       	ldi	r18, 0x19	; 25
     e00:	30 e0       	ldi	r19, 0x00	; 0
     e02:	f9 01       	movw	r30, r18
     e04:	31 97       	sbiw	r30, 0x01	; 1
     e06:	f1 f7       	brne	.-4      	; 0xe04 <myfun+0xa>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e08:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e0a:	d9 f7       	brne	.-10     	; 0xe02 <myfun+0x8>
_delay_ms(fun_delay);
lcd1_cursor(1,2);
     e0c:	81 e0       	ldi	r24, 0x01	; 1
     e0e:	62 e0       	ldi	r22, 0x02	; 2
     e10:	0e 94 7d 01 	call	0x2fa	; 0x2fa <lcd1_cursor>
lcd1_string("---------------------------------");
     e14:	80 e6       	ldi	r24, 0x60	; 96
     e16:	92 e0       	ldi	r25, 0x02	; 2
     e18:	0e 94 70 01 	call	0x2e0	; 0x2e0 <lcd1_string>
lcd1_cursor(2,2);
     e1c:	82 e0       	ldi	r24, 0x02	; 2
     e1e:	62 e0       	ldi	r22, 0x02	; 2
     e20:	0e 94 7d 01 	call	0x2fa	; 0x2fa <lcd1_cursor>
lcd1_string("---------------------------------");
     e24:	80 e6       	ldi	r24, 0x60	; 96
     e26:	92 e0       	ldi	r25, 0x02	; 2
     e28:	0e 94 70 01 	call	0x2e0	; 0x2e0 <lcd1_string>
lcd_print(1,14,ir_dispence,3);
     e2c:	40 91 05 03 	lds	r20, 0x0305
     e30:	50 91 06 03 	lds	r21, 0x0306
     e34:	81 e0       	ldi	r24, 0x01	; 1
     e36:	6e e0       	ldi	r22, 0x0E	; 14
     e38:	23 e0       	ldi	r18, 0x03	; 3
     e3a:	30 e0       	ldi	r19, 0x00	; 0
     e3c:	0e 94 b7 04 	call	0x96e	; 0x96e <lcd_print>
lcd_print(2,14,ir_ip,3);
     e40:	40 91 07 03 	lds	r20, 0x0307
     e44:	50 91 08 03 	lds	r21, 0x0308
     e48:	82 e0       	ldi	r24, 0x02	; 2
     e4a:	6e e0       	ldi	r22, 0x0E	; 14
     e4c:	23 e0       	ldi	r18, 0x03	; 3
     e4e:	30 e0       	ldi	r19, 0x00	; 0
     e50:	0e 94 b7 04 	call	0x96e	; 0x96e <lcd_print>
senseAll();
     e54:	0e 94 d0 06 	call	0xda0	; 0xda0 <senseAll>
}
     e58:	08 95       	ret

00000e5a <main>:
		//empty=sense sharp sensor
}

//Main Function
int main(void)
{
     e5a:	0f 93       	push	r16
     e5c:	1f 93       	push	r17
     e5e:	cf 93       	push	r28
     e60:	df 93       	push	r29
	init_devices();
     e62:	0e 94 c3 05 	call	0xb86	; 0xb86 <init_devices>
	init_signal=0;start_signal=0;
     e66:	10 92 22 04 	sts	0x0422, r1
     e6a:	10 92 21 04 	sts	0x0421, r1
     e6e:	10 92 24 04 	sts	0x0424, r1
     e72:	10 92 23 04 	sts	0x0423, r1
	lcd1_cursor(1,1);
     e76:	81 e0       	ldi	r24, 0x01	; 1
     e78:	61 e0       	ldi	r22, 0x01	; 1
     e7a:	0e 94 7d 01 	call	0x2fa	; 0x2fa <lcd1_cursor>
	lcd1_string("Hukum mere Aakaa....");
     e7e:	82 e8       	ldi	r24, 0x82	; 130
     e80:	92 e0       	ldi	r25, 0x02	; 2
     e82:	0e 94 70 01 	call	0x2e0	; 0x2e0 <lcd1_string>
	lcd1_cursor(2,1);
     e86:	82 e0       	ldi	r24, 0x02	; 2
     e88:	61 e0       	ldi	r22, 0x01	; 1
     e8a:	0e 94 7d 01 	call	0x2fa	; 0x2fa <lcd1_cursor>
	lcd1_string("Waiting for init_signal");
     e8e:	87 e9       	ldi	r24, 0x97	; 151
     e90:	92 e0       	ldi	r25, 0x02	; 2
     e92:	0e 94 70 01 	call	0x2e0	; 0x2e0 <lcd1_string>
     e96:	c9 e1       	ldi	r28, 0x19	; 25
     e98:	d0 e0       	ldi	r29, 0x00	; 0
				extract_fruit=0;
				stop(); //stops the DC motor controlling piston
				_delay_ms(500);
				//------- send signal to PC asking for class label of this fruit
				cli();
				UDR2=0x3F;
     e9a:	0f e3       	ldi	r16, 0x3F	; 63
				wait_for_class_label=1;
     e9c:	11 e0       	ldi	r17, 0x01	; 1
	lcd1_cursor(1,1);
	lcd1_string("Hukum mere Aakaa....");
	lcd1_cursor(2,1);
	lcd1_string("Waiting for init_signal");
	while(1){
		while(!init_signal);
     e9e:	80 91 21 04 	lds	r24, 0x0421
     ea2:	90 91 22 04 	lds	r25, 0x0422
     ea6:	89 2b       	or	r24, r25
     ea8:	09 f4       	brne	.+2      	; 0xeac <main+0x52>
     eaa:	05 c1       	rjmp	.+522    	; 0x10b6 <main+0x25c>
		while(!start_signal);
     eac:	80 91 23 04 	lds	r24, 0x0423
     eb0:	90 91 24 04 	lds	r25, 0x0424
     eb4:	89 2b       	or	r24, r25
     eb6:	09 f0       	breq	.+2      	; 0xeba <main+0x60>
     eb8:	f5 c0       	rjmp	.+490    	; 0x10a4 <main+0x24a>
     eba:	fc c0       	rjmp	.+504    	; 0x10b4 <main+0x25a>
		while(start_signal)
		{
			senseAll();
			while (start_signal && !ip_hungry){
				extract_fruit=0;
     ebc:	10 92 04 03 	sts	0x0304, r1
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     ec0:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     ec2:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
     ec4:	82 b9       	out	0x02, r24	; 2
     ec6:	88 e8       	ldi	r24, 0x88	; 136
     ec8:	93 e1       	ldi	r25, 0x13	; 19
     eca:	fe 01       	movw	r30, r28
     ecc:	31 97       	sbiw	r30, 0x01	; 1
     ece:	f1 f7       	brne	.-4      	; 0xecc <main+0x72>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ed0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ed2:	d9 f7       	brne	.-10     	; 0xeca <main+0x70>
				stop(); //stops the DC motor controlling piston
				_delay_ms(500);
				//------- send signal to PC asking for class label of this fruit
				cli();
     ed4:	f8 94       	cli
				UDR2=0x3F;
     ed6:	00 93 d6 00 	sts	0x00D6, r16
				wait_for_class_label=1;
     eda:	10 93 20 04 	sts	0x0420, r17
				sei();
     ede:	78 94       	sei
				//---------------
				
				lcd1_cursor(1,2);
     ee0:	81 e0       	ldi	r24, 0x01	; 1
     ee2:	62 e0       	ldi	r22, 0x02	; 2
     ee4:	0e 94 7d 01 	call	0x2fa	; 0x2fa <lcd1_cursor>
				lcd1_string(":) got fruit");
     ee8:	8f ea       	ldi	r24, 0xAF	; 175
     eea:	92 e0       	ldi	r25, 0x02	; 2
     eec:	0e 94 70 01 	call	0x2e0	; 0x2e0 <lcd1_string>
				lcd1_cursor(2,2);
     ef0:	82 e0       	ldi	r24, 0x02	; 2
     ef2:	62 e0       	ldi	r22, 0x02	; 2
     ef4:	0e 94 7d 01 	call	0x2fa	; 0x2fa <lcd1_cursor>
				lcd1_string("piston stop");
     ef8:	8c eb       	ldi	r24, 0xBC	; 188
     efa:	92 e0       	ldi	r25, 0x02	; 2
     efc:	0e 94 70 01 	call	0x2e0	; 0x2e0 <lcd1_string>
				lcd_print(1,14,ir_dispence,3);
     f00:	40 91 05 03 	lds	r20, 0x0305
     f04:	50 91 06 03 	lds	r21, 0x0306
     f08:	81 e0       	ldi	r24, 0x01	; 1
     f0a:	6e e0       	ldi	r22, 0x0E	; 14
     f0c:	23 e0       	ldi	r18, 0x03	; 3
     f0e:	30 e0       	ldi	r19, 0x00	; 0
     f10:	0e 94 b7 04 	call	0x96e	; 0x96e <lcd_print>
				lcd_print(2,14,ir_ip,3);	
     f14:	40 91 07 03 	lds	r20, 0x0307
     f18:	50 91 08 03 	lds	r21, 0x0308
     f1c:	82 e0       	ldi	r24, 0x02	; 2
     f1e:	6e e0       	ldi	r22, 0x0E	; 14
     f20:	23 e0       	ldi	r18, 0x03	; 3
     f22:	30 e0       	ldi	r19, 0x00	; 0
     f24:	0e 94 b7 04 	call	0x96e	; 0x96e <lcd_print>
								
				while(start_signal && wait_for_class_label); //busy waiting for class label from PC
     f28:	20 91 20 04 	lds	r18, 0x0420
     f2c:	80 91 23 04 	lds	r24, 0x0423
     f30:	90 91 24 04 	lds	r25, 0x0424
     f34:	89 2b       	or	r24, r25
     f36:	11 f0       	breq	.+4      	; 0xf3c <main+0xe2>
     f38:	22 23       	and	r18, r18
     f3a:	f1 f7       	brne	.-4      	; 0xf38 <main+0xde>
				senseAll();
     f3c:	0e 94 d0 06 	call	0xda0	; 0xda0 <senseAll>
		while(!init_signal);
		while(!start_signal);
		while(start_signal)
		{
			senseAll();
			while (start_signal && !ip_hungry){
     f40:	80 91 23 04 	lds	r24, 0x0423
     f44:	90 91 24 04 	lds	r25, 0x0424
     f48:	89 2b       	or	r24, r25
     f4a:	39 f0       	breq	.+14     	; 0xf5a <main+0x100>
     f4c:	80 91 0b 03 	lds	r24, 0x030B
     f50:	90 91 0c 03 	lds	r25, 0x030C
     f54:	89 2b       	or	r24, r25
     f56:	09 f4       	brne	.+2      	; 0xf5a <main+0x100>
     f58:	b1 cf       	rjmp	.-158    	; 0xebc <main+0x62>
				lcd_print(2,14,ir_ip,3);	
								
				while(start_signal && wait_for_class_label); //busy waiting for class label from PC
				senseAll();
			}
			myfun();
     f5a:	0e 94 fd 06 	call	0xdfa	; 0xdfa <myfun>

			if (start_signal && ip_hungry ){
     f5e:	80 91 23 04 	lds	r24, 0x0423
     f62:	90 91 24 04 	lds	r25, 0x0424
     f66:	89 2b       	or	r24, r25
     f68:	09 f4       	brne	.+2      	; 0xf6c <main+0x112>
     f6a:	3f c0       	rjmp	.+126    	; 0xfea <main+0x190>
     f6c:	80 91 0b 03 	lds	r24, 0x030B
     f70:	90 91 0c 03 	lds	r25, 0x030C
     f74:	89 2b       	or	r24, r25
     f76:	c9 f1       	breq	.+114    	; 0xfea <main+0x190>
					extract_fruit=1;
     f78:	10 93 04 03 	sts	0x0304, r17
					lcd1_cursor(1,5);
     f7c:	81 e0       	ldi	r24, 0x01	; 1
     f7e:	65 e0       	ldi	r22, 0x05	; 5
     f80:	0e 94 7d 01 	call	0x2fa	; 0x2fa <lcd1_cursor>
					lcd1_string("hungry!!");
     f84:	88 ec       	ldi	r24, 0xC8	; 200
     f86:	92 e0       	ldi	r25, 0x02	; 2
     f88:	1a c0       	rjmp	.+52     	; 0xfbe <main+0x164>
				 	lcd_print(2,14,ir_ip,3);	
			}
		
			while(start_signal && ip_hungry && extract_fruit && !fruit_sensed)
			{
					senseAll();
     f8a:	0e 94 d0 06 	call	0xda0	; 0xda0 <senseAll>

					backward_mm(dc_motor_move_distance_back); //Moves piston backward by dc_motor_move_distance mm
     f8e:	89 e0       	ldi	r24, 0x09	; 9
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	0e 94 df 03 	call	0x7be	; 0x7be <backward_mm>
					if(fruit_sensed) break;
     f96:	80 91 09 03 	lds	r24, 0x0309
     f9a:	90 91 0a 03 	lds	r25, 0x030A
     f9e:	89 2b       	or	r24, r25
     fa0:	d9 f5       	brne	.+118    	; 0x1018 <main+0x1be>
					//_delay_ms(dc_motor_motion_delay);
					//stop();
					//_delay_ms(dc_motor_motion_delay);
					
					lcd1_cursor(1,2);
     fa2:	81 e0       	ldi	r24, 0x01	; 1
     fa4:	62 e0       	ldi	r22, 0x02	; 2
     fa6:	0e 94 7d 01 	call	0x2fa	; 0x2fa <lcd1_cursor>
					lcd1_string("IPU hungry");
     faa:	81 ed       	ldi	r24, 0xD1	; 209
     fac:	92 e0       	ldi	r25, 0x02	; 2
     fae:	0e 94 70 01 	call	0x2e0	; 0x2e0 <lcd1_string>
					lcd1_cursor(2,2);
     fb2:	82 e0       	ldi	r24, 0x02	; 2
     fb4:	62 e0       	ldi	r22, 0x02	; 2
     fb6:	0e 94 7d 01 	call	0x2fa	; 0x2fa <lcd1_cursor>
					lcd1_string("mvng back");
     fba:	8c ed       	ldi	r24, 0xDC	; 220
     fbc:	92 e0       	ldi	r25, 0x02	; 2
     fbe:	0e 94 70 01 	call	0x2e0	; 0x2e0 <lcd1_string>
					lcd_print(1,14,ir_dispence,3);
     fc2:	40 91 05 03 	lds	r20, 0x0305
     fc6:	50 91 06 03 	lds	r21, 0x0306
     fca:	81 e0       	ldi	r24, 0x01	; 1
     fcc:	6e e0       	ldi	r22, 0x0E	; 14
     fce:	23 e0       	ldi	r18, 0x03	; 3
     fd0:	30 e0       	ldi	r19, 0x00	; 0
     fd2:	0e 94 b7 04 	call	0x96e	; 0x96e <lcd_print>
					lcd_print(2,14,ir_ip,3);	
     fd6:	40 91 07 03 	lds	r20, 0x0307
     fda:	50 91 08 03 	lds	r21, 0x0308
     fde:	82 e0       	ldi	r24, 0x02	; 2
     fe0:	6e e0       	ldi	r22, 0x0E	; 14
     fe2:	23 e0       	ldi	r18, 0x03	; 3
     fe4:	30 e0       	ldi	r19, 0x00	; 0
     fe6:	0e 94 b7 04 	call	0x96e	; 0x96e <lcd_print>
					lcd1_string("hungry!!");
					lcd_print(1,14,ir_dispence,3);
				 	lcd_print(2,14,ir_ip,3);	
			}
		
			while(start_signal && ip_hungry && extract_fruit && !fruit_sensed)
     fea:	80 91 23 04 	lds	r24, 0x0423
     fee:	90 91 24 04 	lds	r25, 0x0424
     ff2:	89 2b       	or	r24, r25
     ff4:	89 f0       	breq	.+34     	; 0x1018 <main+0x1be>
     ff6:	80 91 0b 03 	lds	r24, 0x030B
     ffa:	90 91 0c 03 	lds	r25, 0x030C
     ffe:	89 2b       	or	r24, r25
    1000:	59 f0       	breq	.+22     	; 0x1018 <main+0x1be>
    1002:	80 91 04 03 	lds	r24, 0x0304
    1006:	88 23       	and	r24, r24
    1008:	39 f0       	breq	.+14     	; 0x1018 <main+0x1be>
    100a:	80 91 09 03 	lds	r24, 0x0309
    100e:	90 91 0a 03 	lds	r25, 0x030A
    1012:	89 2b       	or	r24, r25
    1014:	09 f4       	brne	.+2      	; 0x1018 <main+0x1be>
    1016:	b9 cf       	rjmp	.-142    	; 0xf8a <main+0x130>
					lcd1_cursor(2,2);
					lcd1_string("mvng back");
					lcd_print(1,14,ir_dispence,3);
					lcd_print(2,14,ir_ip,3);	
			}
			myfun();			
    1018:	0e 94 fd 06 	call	0xdfa	; 0xdfa <myfun>
    101c:	2a c0       	rjmp	.+84     	; 0x1072 <main+0x218>
	
			while(start_signal && fruit_sensed && ip_hungry && extract_fruit )
			{	
				lcd1_cursor(1,2);
    101e:	81 e0       	ldi	r24, 0x01	; 1
    1020:	62 e0       	ldi	r22, 0x02	; 2
    1022:	0e 94 7d 01 	call	0x2fa	; 0x2fa <lcd1_cursor>
				lcd1_string("ip:no frt");
    1026:	86 ee       	ldi	r24, 0xE6	; 230
    1028:	92 e0       	ldi	r25, 0x02	; 2
    102a:	0e 94 70 01 	call	0x2e0	; 0x2e0 <lcd1_string>
				lcd1_cursor(2,2);
    102e:	82 e0       	ldi	r24, 0x02	; 2
    1030:	62 e0       	ldi	r22, 0x02	; 2
    1032:	0e 94 7d 01 	call	0x2fa	; 0x2fa <lcd1_cursor>
				lcd1_string("mvng ahead");
    1036:	80 ef       	ldi	r24, 0xF0	; 240
    1038:	92 e0       	ldi	r25, 0x02	; 2
    103a:	0e 94 70 01 	call	0x2e0	; 0x2e0 <lcd1_string>
				lcd_print(1,14,ir_dispence,3);
    103e:	40 91 05 03 	lds	r20, 0x0305
    1042:	50 91 06 03 	lds	r21, 0x0306
    1046:	81 e0       	ldi	r24, 0x01	; 1
    1048:	6e e0       	ldi	r22, 0x0E	; 14
    104a:	23 e0       	ldi	r18, 0x03	; 3
    104c:	30 e0       	ldi	r19, 0x00	; 0
    104e:	0e 94 b7 04 	call	0x96e	; 0x96e <lcd_print>
				lcd_print(2,14,ir_ip,3);
    1052:	40 91 07 03 	lds	r20, 0x0307
    1056:	50 91 08 03 	lds	r21, 0x0308
    105a:	82 e0       	ldi	r24, 0x02	; 2
    105c:	6e e0       	ldi	r22, 0x0E	; 14
    105e:	23 e0       	ldi	r18, 0x03	; 3
    1060:	30 e0       	ldi	r19, 0x00	; 0
    1062:	0e 94 b7 04 	call	0x96e	; 0x96e <lcd_print>

				forward_mm(dc_motor_move_distance); //Moves piston forward by dc_motor_move_distance distance
    1066:	89 e1       	ldi	r24, 0x19	; 25
    1068:	90 e0       	ldi	r25, 0x00	; 0
    106a:	0e 94 e6 03 	call	0x7cc	; 0x7cc <forward_mm>
				//_delay_ms(dc_motor_motion_delay);
				//stop();
				//_delay_ms(dc_motor_motion_delay);
				senseAll();	
    106e:	0e 94 d0 06 	call	0xda0	; 0xda0 <senseAll>
					lcd_print(1,14,ir_dispence,3);
					lcd_print(2,14,ir_ip,3);	
			}
			myfun();			
	
			while(start_signal && fruit_sensed && ip_hungry && extract_fruit )
    1072:	80 91 23 04 	lds	r24, 0x0423
    1076:	90 91 24 04 	lds	r25, 0x0424
    107a:	89 2b       	or	r24, r25
    107c:	89 f0       	breq	.+34     	; 0x10a0 <main+0x246>
    107e:	80 91 09 03 	lds	r24, 0x0309
    1082:	90 91 0a 03 	lds	r25, 0x030A
    1086:	89 2b       	or	r24, r25
    1088:	59 f0       	breq	.+22     	; 0x10a0 <main+0x246>
    108a:	80 91 0b 03 	lds	r24, 0x030B
    108e:	90 91 0c 03 	lds	r25, 0x030C
    1092:	89 2b       	or	r24, r25
    1094:	29 f0       	breq	.+10     	; 0x10a0 <main+0x246>
    1096:	80 91 04 03 	lds	r24, 0x0304
    109a:	88 23       	and	r24, r24
    109c:	09 f0       	breq	.+2      	; 0x10a0 <main+0x246>
    109e:	bf cf       	rjmp	.-130    	; 0x101e <main+0x1c4>
				//_delay_ms(dc_motor_motion_delay);
				//stop();
				//_delay_ms(dc_motor_motion_delay);
				senseAll();	
			}
			myfun();			
    10a0:	0e 94 fd 06 	call	0xdfa	; 0xdfa <myfun>
	lcd1_cursor(2,1);
	lcd1_string("Waiting for init_signal");
	while(1){
		while(!init_signal);
		while(!start_signal);
		while(start_signal)
    10a4:	80 91 23 04 	lds	r24, 0x0423
    10a8:	90 91 24 04 	lds	r25, 0x0424
    10ac:	89 2b       	or	r24, r25
    10ae:	09 f4       	brne	.+2      	; 0x10b2 <main+0x258>
    10b0:	f6 ce       	rjmp	.-532    	; 0xe9e <main+0x44>
    10b2:	44 cf       	rjmp	.-376    	; 0xf3c <main+0xe2>
    10b4:	ff cf       	rjmp	.-2      	; 0x10b4 <main+0x25a>
    10b6:	ff cf       	rjmp	.-2      	; 0x10b6 <main+0x25c>

000010b8 <main2>:
	lcd1_cursor(2,2);
	lcd1_string("Now my time to relax :D       ");
	*/
}

void main2(){
    10b8:	cf 93       	push	r28
    10ba:	df 93       	push	r29
	init_devices();
    10bc:	0e 94 c3 05 	call	0xb86	; 0xb86 <init_devices>
	lcd1_set_4bit();
    10c0:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <lcd1_set_4bit>
	lcd1_init();
    10c4:	0e 94 37 01 	call	0x26e	; 0x26e <lcd1_init>

	lcd1_cursor(1,3);
    10c8:	81 e0       	ldi	r24, 0x01	; 1
    10ca:	63 e0       	ldi	r22, 0x03	; 3
    10cc:	0e 94 7d 01 	call	0x2fa	; 0x2fa <lcd1_cursor>
	lcd1_string("hi");
    10d0:	8b ef       	ldi	r24, 0xFB	; 251
    10d2:	92 e0       	ldi	r25, 0x02	; 2
    10d4:	0e 94 70 01 	call	0x2e0	; 0x2e0 <lcd1_string>
    10d8:	20 e2       	ldi	r18, 0x20	; 32
    10da:	3e e4       	ldi	r19, 0x4E	; 78
	_delay_ms(2000);
	
	}*/
	while(1){
		_delay_ms(2000);
		backward_mm(dc_motor_move_distance); //Moves piston backward by dc_motor_move_distance mm
    10dc:	c9 e1       	ldi	r28, 0x19	; 25
    10de:	d0 e0       	ldi	r29, 0x00	; 0
    10e0:	05 c0       	rjmp	.+10     	; 0x10ec <main2+0x34>
    10e2:	ce 01       	movw	r24, r28
    10e4:	01 97       	sbiw	r24, 0x01	; 1
    10e6:	f1 f7       	brne	.-4      	; 0x10e4 <main2+0x2c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10e8:	21 50       	subi	r18, 0x01	; 1
    10ea:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10ec:	21 15       	cp	r18, r1
    10ee:	31 05       	cpc	r19, r1
    10f0:	c1 f7       	brne	.-16     	; 0x10e2 <main2+0x2a>
    10f2:	89 e1       	ldi	r24, 0x19	; 25
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	0e 94 df 03 	call	0x7be	; 0x7be <backward_mm>
    10fa:	80 e2       	ldi	r24, 0x20	; 32
    10fc:	9e e4       	ldi	r25, 0x4E	; 78
    10fe:	fe 01       	movw	r30, r28
    1100:	31 97       	sbiw	r30, 0x01	; 1
    1102:	f1 f7       	brne	.-4      	; 0x1100 <main2+0x48>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1104:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1106:	d9 f7       	brne	.-10     	; 0x10fe <main2+0x46>
		
			_delay_ms(2000);
		forward_mm(dc_motor_move_distance); //Moves piston forward by dc_motor_move_distance distance
    1108:	89 e1       	ldi	r24, 0x19	; 25
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	0e 94 e6 03 	call	0x7cc	; 0x7cc <forward_mm>
    1110:	20 e2       	ldi	r18, 0x20	; 32
    1112:	3e e4       	ldi	r19, 0x4E	; 78
    1114:	e6 cf       	rjmp	.-52     	; 0x10e2 <main2+0x2a>

00001116 <Sharp_GP2D12_estimation>:
// analog value of Sharp Sensor. 
unsigned int Sharp_GP2D12_estimation(unsigned char adc_reading)
{
	float distance;
	unsigned int distanceInt;
	distance = (int)(10.00*(2799.6*(1.00/(pow(adc_reading,1.1546)))));
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	a0 e0       	ldi	r26, 0x00	; 0
    111a:	b0 e0       	ldi	r27, 0x00	; 0
    111c:	bc 01       	movw	r22, r24
    111e:	cd 01       	movw	r24, r26
    1120:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <__floatunsisf>
    1124:	2f ee       	ldi	r18, 0xEF	; 239
    1126:	39 ec       	ldi	r19, 0xC9	; 201
    1128:	43 e9       	ldi	r20, 0x93	; 147
    112a:	5f e3       	ldi	r21, 0x3F	; 63
    112c:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <pow>
    1130:	9b 01       	movw	r18, r22
    1132:	ac 01       	movw	r20, r24
	distanceInt = (int)distance;
    1134:	60 e0       	ldi	r22, 0x00	; 0
    1136:	70 e0       	ldi	r23, 0x00	; 0
    1138:	80 e8       	ldi	r24, 0x80	; 128
    113a:	9f e3       	ldi	r25, 0x3F	; 63
    113c:	0e 94 8f 0b 	call	0x171e	; 0x171e <__divsf3>
    1140:	2a e9       	ldi	r18, 0x9A	; 154
    1142:	39 ef       	ldi	r19, 0xF9	; 249
    1144:	4e e2       	ldi	r20, 0x2E	; 46
    1146:	55 e4       	ldi	r21, 0x45	; 69
    1148:	0e 94 95 0a 	call	0x152a	; 0x152a <__mulsf3>
    114c:	20 e0       	ldi	r18, 0x00	; 0
    114e:	30 e0       	ldi	r19, 0x00	; 0
    1150:	40 e2       	ldi	r20, 0x20	; 32
    1152:	51 e4       	ldi	r21, 0x41	; 65
    1154:	0e 94 95 0a 	call	0x152a	; 0x152a <__mulsf3>
    1158:	0e 94 c9 0c 	call	0x1992	; 0x1992 <__fixsfsi>
    115c:	88 27       	eor	r24, r24
    115e:	77 fd       	sbrc	r23, 7
    1160:	80 95       	com	r24
    1162:	98 2f       	mov	r25, r24
    1164:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <__floatsisf>
    1168:	0e 94 c9 0c 	call	0x1992	; 0x1992 <__fixsfsi>
    116c:	9b 01       	movw	r18, r22
    116e:	83 e0       	ldi	r24, 0x03	; 3
    1170:	61 32       	cpi	r22, 0x21	; 33
    1172:	78 07       	cpc	r23, r24
    1174:	10 f0       	brcs	.+4      	; 0x117a <Sharp_GP2D12_estimation+0x64>
    1176:	20 e2       	ldi	r18, 0x20	; 32
    1178:	33 e0       	ldi	r19, 0x03	; 3
	if(distanceInt>800)
	{
		distanceInt=800;
	}
	return distanceInt;
}
    117a:	c9 01       	movw	r24, r18
    117c:	08 95       	ret

0000117e <__fixunssfsi>:
    117e:	ef 92       	push	r14
    1180:	ff 92       	push	r15
    1182:	0f 93       	push	r16
    1184:	1f 93       	push	r17
    1186:	7b 01       	movw	r14, r22
    1188:	8c 01       	movw	r16, r24
    118a:	20 e0       	ldi	r18, 0x00	; 0
    118c:	30 e0       	ldi	r19, 0x00	; 0
    118e:	40 e0       	ldi	r20, 0x00	; 0
    1190:	5f e4       	ldi	r21, 0x4F	; 79
    1192:	0e 94 3b 0c 	call	0x1876	; 0x1876 <__gesf2>
    1196:	88 23       	and	r24, r24
    1198:	8c f0       	brlt	.+34     	; 0x11bc <__fixunssfsi+0x3e>
    119a:	c8 01       	movw	r24, r16
    119c:	b7 01       	movw	r22, r14
    119e:	20 e0       	ldi	r18, 0x00	; 0
    11a0:	30 e0       	ldi	r19, 0x00	; 0
    11a2:	40 e0       	ldi	r20, 0x00	; 0
    11a4:	5f e4       	ldi	r21, 0x4F	; 79
    11a6:	0e 94 37 0a 	call	0x146e	; 0x146e <__subsf3>
    11aa:	0e 94 c9 0c 	call	0x1992	; 0x1992 <__fixsfsi>
    11ae:	9b 01       	movw	r18, r22
    11b0:	ac 01       	movw	r20, r24
    11b2:	20 50       	subi	r18, 0x00	; 0
    11b4:	30 40       	sbci	r19, 0x00	; 0
    11b6:	40 40       	sbci	r20, 0x00	; 0
    11b8:	50 48       	sbci	r21, 0x80	; 128
    11ba:	06 c0       	rjmp	.+12     	; 0x11c8 <__fixunssfsi+0x4a>
    11bc:	c8 01       	movw	r24, r16
    11be:	b7 01       	movw	r22, r14
    11c0:	0e 94 c9 0c 	call	0x1992	; 0x1992 <__fixsfsi>
    11c4:	9b 01       	movw	r18, r22
    11c6:	ac 01       	movw	r20, r24
    11c8:	b9 01       	movw	r22, r18
    11ca:	ca 01       	movw	r24, r20
    11cc:	1f 91       	pop	r17
    11ce:	0f 91       	pop	r16
    11d0:	ff 90       	pop	r15
    11d2:	ef 90       	pop	r14
    11d4:	08 95       	ret

000011d6 <_fpadd_parts>:
    11d6:	a0 e0       	ldi	r26, 0x00	; 0
    11d8:	b0 e0       	ldi	r27, 0x00	; 0
    11da:	e1 ef       	ldi	r30, 0xF1	; 241
    11dc:	f8 e0       	ldi	r31, 0x08	; 8
    11de:	0c 94 9f 0f 	jmp	0x1f3e	; 0x1f3e <__prologue_saves__>
    11e2:	dc 01       	movw	r26, r24
    11e4:	2b 01       	movw	r4, r22
    11e6:	fa 01       	movw	r30, r20
    11e8:	9c 91       	ld	r25, X
    11ea:	92 30       	cpi	r25, 0x02	; 2
    11ec:	08 f4       	brcc	.+2      	; 0x11f0 <_fpadd_parts+0x1a>
    11ee:	39 c1       	rjmp	.+626    	; 0x1462 <_fpadd_parts+0x28c>
    11f0:	eb 01       	movw	r28, r22
    11f2:	88 81       	ld	r24, Y
    11f4:	82 30       	cpi	r24, 0x02	; 2
    11f6:	08 f4       	brcc	.+2      	; 0x11fa <_fpadd_parts+0x24>
    11f8:	33 c1       	rjmp	.+614    	; 0x1460 <_fpadd_parts+0x28a>
    11fa:	94 30       	cpi	r25, 0x04	; 4
    11fc:	69 f4       	brne	.+26     	; 0x1218 <_fpadd_parts+0x42>
    11fe:	84 30       	cpi	r24, 0x04	; 4
    1200:	09 f0       	breq	.+2      	; 0x1204 <_fpadd_parts+0x2e>
    1202:	2f c1       	rjmp	.+606    	; 0x1462 <_fpadd_parts+0x28c>
    1204:	11 96       	adiw	r26, 0x01	; 1
    1206:	9c 91       	ld	r25, X
    1208:	11 97       	sbiw	r26, 0x01	; 1
    120a:	89 81       	ldd	r24, Y+1	; 0x01
    120c:	98 17       	cp	r25, r24
    120e:	09 f4       	brne	.+2      	; 0x1212 <_fpadd_parts+0x3c>
    1210:	28 c1       	rjmp	.+592    	; 0x1462 <_fpadd_parts+0x28c>
    1212:	af e0       	ldi	r26, 0x0F	; 15
    1214:	b3 e0       	ldi	r27, 0x03	; 3
    1216:	25 c1       	rjmp	.+586    	; 0x1462 <_fpadd_parts+0x28c>
    1218:	84 30       	cpi	r24, 0x04	; 4
    121a:	09 f4       	brne	.+2      	; 0x121e <_fpadd_parts+0x48>
    121c:	21 c1       	rjmp	.+578    	; 0x1460 <_fpadd_parts+0x28a>
    121e:	82 30       	cpi	r24, 0x02	; 2
    1220:	a9 f4       	brne	.+42     	; 0x124c <_fpadd_parts+0x76>
    1222:	92 30       	cpi	r25, 0x02	; 2
    1224:	09 f0       	breq	.+2      	; 0x1228 <_fpadd_parts+0x52>
    1226:	1d c1       	rjmp	.+570    	; 0x1462 <_fpadd_parts+0x28c>
    1228:	9a 01       	movw	r18, r20
    122a:	ad 01       	movw	r20, r26
    122c:	88 e0       	ldi	r24, 0x08	; 8
    122e:	ea 01       	movw	r28, r20
    1230:	09 90       	ld	r0, Y+
    1232:	ae 01       	movw	r20, r28
    1234:	e9 01       	movw	r28, r18
    1236:	09 92       	st	Y+, r0
    1238:	9e 01       	movw	r18, r28
    123a:	81 50       	subi	r24, 0x01	; 1
    123c:	c1 f7       	brne	.-16     	; 0x122e <_fpadd_parts+0x58>
    123e:	e2 01       	movw	r28, r4
    1240:	89 81       	ldd	r24, Y+1	; 0x01
    1242:	11 96       	adiw	r26, 0x01	; 1
    1244:	9c 91       	ld	r25, X
    1246:	89 23       	and	r24, r25
    1248:	81 83       	std	Z+1, r24	; 0x01
    124a:	08 c1       	rjmp	.+528    	; 0x145c <_fpadd_parts+0x286>
    124c:	92 30       	cpi	r25, 0x02	; 2
    124e:	09 f4       	brne	.+2      	; 0x1252 <_fpadd_parts+0x7c>
    1250:	07 c1       	rjmp	.+526    	; 0x1460 <_fpadd_parts+0x28a>
    1252:	12 96       	adiw	r26, 0x02	; 2
    1254:	2d 90       	ld	r2, X+
    1256:	3c 90       	ld	r3, X
    1258:	13 97       	sbiw	r26, 0x03	; 3
    125a:	eb 01       	movw	r28, r22
    125c:	8a 81       	ldd	r24, Y+2	; 0x02
    125e:	9b 81       	ldd	r25, Y+3	; 0x03
    1260:	14 96       	adiw	r26, 0x04	; 4
    1262:	ad 90       	ld	r10, X+
    1264:	bd 90       	ld	r11, X+
    1266:	cd 90       	ld	r12, X+
    1268:	dc 90       	ld	r13, X
    126a:	17 97       	sbiw	r26, 0x07	; 7
    126c:	ec 80       	ldd	r14, Y+4	; 0x04
    126e:	fd 80       	ldd	r15, Y+5	; 0x05
    1270:	0e 81       	ldd	r16, Y+6	; 0x06
    1272:	1f 81       	ldd	r17, Y+7	; 0x07
    1274:	91 01       	movw	r18, r2
    1276:	28 1b       	sub	r18, r24
    1278:	39 0b       	sbc	r19, r25
    127a:	b9 01       	movw	r22, r18
    127c:	37 ff       	sbrs	r19, 7
    127e:	04 c0       	rjmp	.+8      	; 0x1288 <_fpadd_parts+0xb2>
    1280:	66 27       	eor	r22, r22
    1282:	77 27       	eor	r23, r23
    1284:	62 1b       	sub	r22, r18
    1286:	73 0b       	sbc	r23, r19
    1288:	60 32       	cpi	r22, 0x20	; 32
    128a:	71 05       	cpc	r23, r1
    128c:	0c f0       	brlt	.+2      	; 0x1290 <_fpadd_parts+0xba>
    128e:	61 c0       	rjmp	.+194    	; 0x1352 <_fpadd_parts+0x17c>
    1290:	12 16       	cp	r1, r18
    1292:	13 06       	cpc	r1, r19
    1294:	6c f5       	brge	.+90     	; 0x12f0 <_fpadd_parts+0x11a>
    1296:	37 01       	movw	r6, r14
    1298:	48 01       	movw	r8, r16
    129a:	06 2e       	mov	r0, r22
    129c:	04 c0       	rjmp	.+8      	; 0x12a6 <_fpadd_parts+0xd0>
    129e:	96 94       	lsr	r9
    12a0:	87 94       	ror	r8
    12a2:	77 94       	ror	r7
    12a4:	67 94       	ror	r6
    12a6:	0a 94       	dec	r0
    12a8:	d2 f7       	brpl	.-12     	; 0x129e <_fpadd_parts+0xc8>
    12aa:	21 e0       	ldi	r18, 0x01	; 1
    12ac:	30 e0       	ldi	r19, 0x00	; 0
    12ae:	40 e0       	ldi	r20, 0x00	; 0
    12b0:	50 e0       	ldi	r21, 0x00	; 0
    12b2:	04 c0       	rjmp	.+8      	; 0x12bc <_fpadd_parts+0xe6>
    12b4:	22 0f       	add	r18, r18
    12b6:	33 1f       	adc	r19, r19
    12b8:	44 1f       	adc	r20, r20
    12ba:	55 1f       	adc	r21, r21
    12bc:	6a 95       	dec	r22
    12be:	d2 f7       	brpl	.-12     	; 0x12b4 <_fpadd_parts+0xde>
    12c0:	21 50       	subi	r18, 0x01	; 1
    12c2:	30 40       	sbci	r19, 0x00	; 0
    12c4:	40 40       	sbci	r20, 0x00	; 0
    12c6:	50 40       	sbci	r21, 0x00	; 0
    12c8:	2e 21       	and	r18, r14
    12ca:	3f 21       	and	r19, r15
    12cc:	40 23       	and	r20, r16
    12ce:	51 23       	and	r21, r17
    12d0:	21 15       	cp	r18, r1
    12d2:	31 05       	cpc	r19, r1
    12d4:	41 05       	cpc	r20, r1
    12d6:	51 05       	cpc	r21, r1
    12d8:	21 f0       	breq	.+8      	; 0x12e2 <_fpadd_parts+0x10c>
    12da:	21 e0       	ldi	r18, 0x01	; 1
    12dc:	30 e0       	ldi	r19, 0x00	; 0
    12de:	40 e0       	ldi	r20, 0x00	; 0
    12e0:	50 e0       	ldi	r21, 0x00	; 0
    12e2:	79 01       	movw	r14, r18
    12e4:	8a 01       	movw	r16, r20
    12e6:	e6 28       	or	r14, r6
    12e8:	f7 28       	or	r15, r7
    12ea:	08 29       	or	r16, r8
    12ec:	19 29       	or	r17, r9
    12ee:	3c c0       	rjmp	.+120    	; 0x1368 <_fpadd_parts+0x192>
    12f0:	23 2b       	or	r18, r19
    12f2:	d1 f1       	breq	.+116    	; 0x1368 <_fpadd_parts+0x192>
    12f4:	26 0e       	add	r2, r22
    12f6:	37 1e       	adc	r3, r23
    12f8:	35 01       	movw	r6, r10
    12fa:	46 01       	movw	r8, r12
    12fc:	06 2e       	mov	r0, r22
    12fe:	04 c0       	rjmp	.+8      	; 0x1308 <_fpadd_parts+0x132>
    1300:	96 94       	lsr	r9
    1302:	87 94       	ror	r8
    1304:	77 94       	ror	r7
    1306:	67 94       	ror	r6
    1308:	0a 94       	dec	r0
    130a:	d2 f7       	brpl	.-12     	; 0x1300 <_fpadd_parts+0x12a>
    130c:	21 e0       	ldi	r18, 0x01	; 1
    130e:	30 e0       	ldi	r19, 0x00	; 0
    1310:	40 e0       	ldi	r20, 0x00	; 0
    1312:	50 e0       	ldi	r21, 0x00	; 0
    1314:	04 c0       	rjmp	.+8      	; 0x131e <_fpadd_parts+0x148>
    1316:	22 0f       	add	r18, r18
    1318:	33 1f       	adc	r19, r19
    131a:	44 1f       	adc	r20, r20
    131c:	55 1f       	adc	r21, r21
    131e:	6a 95       	dec	r22
    1320:	d2 f7       	brpl	.-12     	; 0x1316 <_fpadd_parts+0x140>
    1322:	21 50       	subi	r18, 0x01	; 1
    1324:	30 40       	sbci	r19, 0x00	; 0
    1326:	40 40       	sbci	r20, 0x00	; 0
    1328:	50 40       	sbci	r21, 0x00	; 0
    132a:	2a 21       	and	r18, r10
    132c:	3b 21       	and	r19, r11
    132e:	4c 21       	and	r20, r12
    1330:	5d 21       	and	r21, r13
    1332:	21 15       	cp	r18, r1
    1334:	31 05       	cpc	r19, r1
    1336:	41 05       	cpc	r20, r1
    1338:	51 05       	cpc	r21, r1
    133a:	21 f0       	breq	.+8      	; 0x1344 <_fpadd_parts+0x16e>
    133c:	21 e0       	ldi	r18, 0x01	; 1
    133e:	30 e0       	ldi	r19, 0x00	; 0
    1340:	40 e0       	ldi	r20, 0x00	; 0
    1342:	50 e0       	ldi	r21, 0x00	; 0
    1344:	59 01       	movw	r10, r18
    1346:	6a 01       	movw	r12, r20
    1348:	a6 28       	or	r10, r6
    134a:	b7 28       	or	r11, r7
    134c:	c8 28       	or	r12, r8
    134e:	d9 28       	or	r13, r9
    1350:	0b c0       	rjmp	.+22     	; 0x1368 <_fpadd_parts+0x192>
    1352:	82 15       	cp	r24, r2
    1354:	93 05       	cpc	r25, r3
    1356:	2c f0       	brlt	.+10     	; 0x1362 <_fpadd_parts+0x18c>
    1358:	1c 01       	movw	r2, r24
    135a:	aa 24       	eor	r10, r10
    135c:	bb 24       	eor	r11, r11
    135e:	65 01       	movw	r12, r10
    1360:	03 c0       	rjmp	.+6      	; 0x1368 <_fpadd_parts+0x192>
    1362:	ee 24       	eor	r14, r14
    1364:	ff 24       	eor	r15, r15
    1366:	87 01       	movw	r16, r14
    1368:	11 96       	adiw	r26, 0x01	; 1
    136a:	9c 91       	ld	r25, X
    136c:	d2 01       	movw	r26, r4
    136e:	11 96       	adiw	r26, 0x01	; 1
    1370:	8c 91       	ld	r24, X
    1372:	98 17       	cp	r25, r24
    1374:	09 f4       	brne	.+2      	; 0x1378 <_fpadd_parts+0x1a2>
    1376:	45 c0       	rjmp	.+138    	; 0x1402 <_fpadd_parts+0x22c>
    1378:	99 23       	and	r25, r25
    137a:	39 f0       	breq	.+14     	; 0x138a <_fpadd_parts+0x1b4>
    137c:	a8 01       	movw	r20, r16
    137e:	97 01       	movw	r18, r14
    1380:	2a 19       	sub	r18, r10
    1382:	3b 09       	sbc	r19, r11
    1384:	4c 09       	sbc	r20, r12
    1386:	5d 09       	sbc	r21, r13
    1388:	06 c0       	rjmp	.+12     	; 0x1396 <_fpadd_parts+0x1c0>
    138a:	a6 01       	movw	r20, r12
    138c:	95 01       	movw	r18, r10
    138e:	2e 19       	sub	r18, r14
    1390:	3f 09       	sbc	r19, r15
    1392:	40 0b       	sbc	r20, r16
    1394:	51 0b       	sbc	r21, r17
    1396:	57 fd       	sbrc	r21, 7
    1398:	08 c0       	rjmp	.+16     	; 0x13aa <_fpadd_parts+0x1d4>
    139a:	11 82       	std	Z+1, r1	; 0x01
    139c:	33 82       	std	Z+3, r3	; 0x03
    139e:	22 82       	std	Z+2, r2	; 0x02
    13a0:	24 83       	std	Z+4, r18	; 0x04
    13a2:	35 83       	std	Z+5, r19	; 0x05
    13a4:	46 83       	std	Z+6, r20	; 0x06
    13a6:	57 83       	std	Z+7, r21	; 0x07
    13a8:	1d c0       	rjmp	.+58     	; 0x13e4 <_fpadd_parts+0x20e>
    13aa:	81 e0       	ldi	r24, 0x01	; 1
    13ac:	81 83       	std	Z+1, r24	; 0x01
    13ae:	33 82       	std	Z+3, r3	; 0x03
    13b0:	22 82       	std	Z+2, r2	; 0x02
    13b2:	88 27       	eor	r24, r24
    13b4:	99 27       	eor	r25, r25
    13b6:	dc 01       	movw	r26, r24
    13b8:	82 1b       	sub	r24, r18
    13ba:	93 0b       	sbc	r25, r19
    13bc:	a4 0b       	sbc	r26, r20
    13be:	b5 0b       	sbc	r27, r21
    13c0:	84 83       	std	Z+4, r24	; 0x04
    13c2:	95 83       	std	Z+5, r25	; 0x05
    13c4:	a6 83       	std	Z+6, r26	; 0x06
    13c6:	b7 83       	std	Z+7, r27	; 0x07
    13c8:	0d c0       	rjmp	.+26     	; 0x13e4 <_fpadd_parts+0x20e>
    13ca:	22 0f       	add	r18, r18
    13cc:	33 1f       	adc	r19, r19
    13ce:	44 1f       	adc	r20, r20
    13d0:	55 1f       	adc	r21, r21
    13d2:	24 83       	std	Z+4, r18	; 0x04
    13d4:	35 83       	std	Z+5, r19	; 0x05
    13d6:	46 83       	std	Z+6, r20	; 0x06
    13d8:	57 83       	std	Z+7, r21	; 0x07
    13da:	82 81       	ldd	r24, Z+2	; 0x02
    13dc:	93 81       	ldd	r25, Z+3	; 0x03
    13de:	01 97       	sbiw	r24, 0x01	; 1
    13e0:	93 83       	std	Z+3, r25	; 0x03
    13e2:	82 83       	std	Z+2, r24	; 0x02
    13e4:	24 81       	ldd	r18, Z+4	; 0x04
    13e6:	35 81       	ldd	r19, Z+5	; 0x05
    13e8:	46 81       	ldd	r20, Z+6	; 0x06
    13ea:	57 81       	ldd	r21, Z+7	; 0x07
    13ec:	da 01       	movw	r26, r20
    13ee:	c9 01       	movw	r24, r18
    13f0:	01 97       	sbiw	r24, 0x01	; 1
    13f2:	a1 09       	sbc	r26, r1
    13f4:	b1 09       	sbc	r27, r1
    13f6:	8f 5f       	subi	r24, 0xFF	; 255
    13f8:	9f 4f       	sbci	r25, 0xFF	; 255
    13fa:	af 4f       	sbci	r26, 0xFF	; 255
    13fc:	bf 43       	sbci	r27, 0x3F	; 63
    13fe:	28 f3       	brcs	.-54     	; 0x13ca <_fpadd_parts+0x1f4>
    1400:	0b c0       	rjmp	.+22     	; 0x1418 <_fpadd_parts+0x242>
    1402:	91 83       	std	Z+1, r25	; 0x01
    1404:	33 82       	std	Z+3, r3	; 0x03
    1406:	22 82       	std	Z+2, r2	; 0x02
    1408:	ea 0c       	add	r14, r10
    140a:	fb 1c       	adc	r15, r11
    140c:	0c 1d       	adc	r16, r12
    140e:	1d 1d       	adc	r17, r13
    1410:	e4 82       	std	Z+4, r14	; 0x04
    1412:	f5 82       	std	Z+5, r15	; 0x05
    1414:	06 83       	std	Z+6, r16	; 0x06
    1416:	17 83       	std	Z+7, r17	; 0x07
    1418:	83 e0       	ldi	r24, 0x03	; 3
    141a:	80 83       	st	Z, r24
    141c:	24 81       	ldd	r18, Z+4	; 0x04
    141e:	35 81       	ldd	r19, Z+5	; 0x05
    1420:	46 81       	ldd	r20, Z+6	; 0x06
    1422:	57 81       	ldd	r21, Z+7	; 0x07
    1424:	57 ff       	sbrs	r21, 7
    1426:	1a c0       	rjmp	.+52     	; 0x145c <_fpadd_parts+0x286>
    1428:	c9 01       	movw	r24, r18
    142a:	aa 27       	eor	r26, r26
    142c:	97 fd       	sbrc	r25, 7
    142e:	a0 95       	com	r26
    1430:	ba 2f       	mov	r27, r26
    1432:	81 70       	andi	r24, 0x01	; 1
    1434:	90 70       	andi	r25, 0x00	; 0
    1436:	a0 70       	andi	r26, 0x00	; 0
    1438:	b0 70       	andi	r27, 0x00	; 0
    143a:	56 95       	lsr	r21
    143c:	47 95       	ror	r20
    143e:	37 95       	ror	r19
    1440:	27 95       	ror	r18
    1442:	82 2b       	or	r24, r18
    1444:	93 2b       	or	r25, r19
    1446:	a4 2b       	or	r26, r20
    1448:	b5 2b       	or	r27, r21
    144a:	84 83       	std	Z+4, r24	; 0x04
    144c:	95 83       	std	Z+5, r25	; 0x05
    144e:	a6 83       	std	Z+6, r26	; 0x06
    1450:	b7 83       	std	Z+7, r27	; 0x07
    1452:	82 81       	ldd	r24, Z+2	; 0x02
    1454:	93 81       	ldd	r25, Z+3	; 0x03
    1456:	01 96       	adiw	r24, 0x01	; 1
    1458:	93 83       	std	Z+3, r25	; 0x03
    145a:	82 83       	std	Z+2, r24	; 0x02
    145c:	df 01       	movw	r26, r30
    145e:	01 c0       	rjmp	.+2      	; 0x1462 <_fpadd_parts+0x28c>
    1460:	d2 01       	movw	r26, r4
    1462:	cd 01       	movw	r24, r26
    1464:	cd b7       	in	r28, 0x3d	; 61
    1466:	de b7       	in	r29, 0x3e	; 62
    1468:	e2 e1       	ldi	r30, 0x12	; 18
    146a:	0c 94 bb 0f 	jmp	0x1f76	; 0x1f76 <__epilogue_restores__>

0000146e <__subsf3>:
    146e:	a0 e2       	ldi	r26, 0x20	; 32
    1470:	b0 e0       	ldi	r27, 0x00	; 0
    1472:	ed e3       	ldi	r30, 0x3D	; 61
    1474:	fa e0       	ldi	r31, 0x0A	; 10
    1476:	0c 94 ab 0f 	jmp	0x1f56	; 0x1f56 <__prologue_saves__+0x18>
    147a:	69 83       	std	Y+1, r22	; 0x01
    147c:	7a 83       	std	Y+2, r23	; 0x02
    147e:	8b 83       	std	Y+3, r24	; 0x03
    1480:	9c 83       	std	Y+4, r25	; 0x04
    1482:	2d 83       	std	Y+5, r18	; 0x05
    1484:	3e 83       	std	Y+6, r19	; 0x06
    1486:	4f 83       	std	Y+7, r20	; 0x07
    1488:	58 87       	std	Y+8, r21	; 0x08
    148a:	e9 e0       	ldi	r30, 0x09	; 9
    148c:	ee 2e       	mov	r14, r30
    148e:	f1 2c       	mov	r15, r1
    1490:	ec 0e       	add	r14, r28
    1492:	fd 1e       	adc	r15, r29
    1494:	ce 01       	movw	r24, r28
    1496:	01 96       	adiw	r24, 0x01	; 1
    1498:	b7 01       	movw	r22, r14
    149a:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <__unpack_f>
    149e:	8e 01       	movw	r16, r28
    14a0:	0f 5e       	subi	r16, 0xEF	; 239
    14a2:	1f 4f       	sbci	r17, 0xFF	; 255
    14a4:	ce 01       	movw	r24, r28
    14a6:	05 96       	adiw	r24, 0x05	; 5
    14a8:	b8 01       	movw	r22, r16
    14aa:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <__unpack_f>
    14ae:	8a 89       	ldd	r24, Y+18	; 0x12
    14b0:	91 e0       	ldi	r25, 0x01	; 1
    14b2:	89 27       	eor	r24, r25
    14b4:	8a 8b       	std	Y+18, r24	; 0x12
    14b6:	c7 01       	movw	r24, r14
    14b8:	b8 01       	movw	r22, r16
    14ba:	ae 01       	movw	r20, r28
    14bc:	47 5e       	subi	r20, 0xE7	; 231
    14be:	5f 4f       	sbci	r21, 0xFF	; 255
    14c0:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <_fpadd_parts>
    14c4:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <__pack_f>
    14c8:	a0 96       	adiw	r28, 0x20	; 32
    14ca:	e6 e0       	ldi	r30, 0x06	; 6
    14cc:	0c 94 c7 0f 	jmp	0x1f8e	; 0x1f8e <__epilogue_restores__+0x18>

000014d0 <__addsf3>:
    14d0:	a0 e2       	ldi	r26, 0x20	; 32
    14d2:	b0 e0       	ldi	r27, 0x00	; 0
    14d4:	ee e6       	ldi	r30, 0x6E	; 110
    14d6:	fa e0       	ldi	r31, 0x0A	; 10
    14d8:	0c 94 ab 0f 	jmp	0x1f56	; 0x1f56 <__prologue_saves__+0x18>
    14dc:	69 83       	std	Y+1, r22	; 0x01
    14de:	7a 83       	std	Y+2, r23	; 0x02
    14e0:	8b 83       	std	Y+3, r24	; 0x03
    14e2:	9c 83       	std	Y+4, r25	; 0x04
    14e4:	2d 83       	std	Y+5, r18	; 0x05
    14e6:	3e 83       	std	Y+6, r19	; 0x06
    14e8:	4f 83       	std	Y+7, r20	; 0x07
    14ea:	58 87       	std	Y+8, r21	; 0x08
    14ec:	f9 e0       	ldi	r31, 0x09	; 9
    14ee:	ef 2e       	mov	r14, r31
    14f0:	f1 2c       	mov	r15, r1
    14f2:	ec 0e       	add	r14, r28
    14f4:	fd 1e       	adc	r15, r29
    14f6:	ce 01       	movw	r24, r28
    14f8:	01 96       	adiw	r24, 0x01	; 1
    14fa:	b7 01       	movw	r22, r14
    14fc:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <__unpack_f>
    1500:	8e 01       	movw	r16, r28
    1502:	0f 5e       	subi	r16, 0xEF	; 239
    1504:	1f 4f       	sbci	r17, 0xFF	; 255
    1506:	ce 01       	movw	r24, r28
    1508:	05 96       	adiw	r24, 0x05	; 5
    150a:	b8 01       	movw	r22, r16
    150c:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <__unpack_f>
    1510:	c7 01       	movw	r24, r14
    1512:	b8 01       	movw	r22, r16
    1514:	ae 01       	movw	r20, r28
    1516:	47 5e       	subi	r20, 0xE7	; 231
    1518:	5f 4f       	sbci	r21, 0xFF	; 255
    151a:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <_fpadd_parts>
    151e:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <__pack_f>
    1522:	a0 96       	adiw	r28, 0x20	; 32
    1524:	e6 e0       	ldi	r30, 0x06	; 6
    1526:	0c 94 c7 0f 	jmp	0x1f8e	; 0x1f8e <__epilogue_restores__+0x18>

0000152a <__mulsf3>:
    152a:	a0 e2       	ldi	r26, 0x20	; 32
    152c:	b0 e0       	ldi	r27, 0x00	; 0
    152e:	eb e9       	ldi	r30, 0x9B	; 155
    1530:	fa e0       	ldi	r31, 0x0A	; 10
    1532:	0c 94 9f 0f 	jmp	0x1f3e	; 0x1f3e <__prologue_saves__>
    1536:	69 83       	std	Y+1, r22	; 0x01
    1538:	7a 83       	std	Y+2, r23	; 0x02
    153a:	8b 83       	std	Y+3, r24	; 0x03
    153c:	9c 83       	std	Y+4, r25	; 0x04
    153e:	2d 83       	std	Y+5, r18	; 0x05
    1540:	3e 83       	std	Y+6, r19	; 0x06
    1542:	4f 83       	std	Y+7, r20	; 0x07
    1544:	58 87       	std	Y+8, r21	; 0x08
    1546:	ce 01       	movw	r24, r28
    1548:	01 96       	adiw	r24, 0x01	; 1
    154a:	be 01       	movw	r22, r28
    154c:	67 5f       	subi	r22, 0xF7	; 247
    154e:	7f 4f       	sbci	r23, 0xFF	; 255
    1550:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <__unpack_f>
    1554:	ce 01       	movw	r24, r28
    1556:	05 96       	adiw	r24, 0x05	; 5
    1558:	be 01       	movw	r22, r28
    155a:	6f 5e       	subi	r22, 0xEF	; 239
    155c:	7f 4f       	sbci	r23, 0xFF	; 255
    155e:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <__unpack_f>
    1562:	99 85       	ldd	r25, Y+9	; 0x09
    1564:	92 30       	cpi	r25, 0x02	; 2
    1566:	88 f0       	brcs	.+34     	; 0x158a <__mulsf3+0x60>
    1568:	89 89       	ldd	r24, Y+17	; 0x11
    156a:	82 30       	cpi	r24, 0x02	; 2
    156c:	c8 f0       	brcs	.+50     	; 0x15a0 <__mulsf3+0x76>
    156e:	94 30       	cpi	r25, 0x04	; 4
    1570:	19 f4       	brne	.+6      	; 0x1578 <__mulsf3+0x4e>
    1572:	82 30       	cpi	r24, 0x02	; 2
    1574:	51 f4       	brne	.+20     	; 0x158a <__mulsf3+0x60>
    1576:	04 c0       	rjmp	.+8      	; 0x1580 <__mulsf3+0x56>
    1578:	84 30       	cpi	r24, 0x04	; 4
    157a:	29 f4       	brne	.+10     	; 0x1586 <__mulsf3+0x5c>
    157c:	92 30       	cpi	r25, 0x02	; 2
    157e:	81 f4       	brne	.+32     	; 0x15a0 <__mulsf3+0x76>
    1580:	8f e0       	ldi	r24, 0x0F	; 15
    1582:	93 e0       	ldi	r25, 0x03	; 3
    1584:	c6 c0       	rjmp	.+396    	; 0x1712 <__mulsf3+0x1e8>
    1586:	92 30       	cpi	r25, 0x02	; 2
    1588:	49 f4       	brne	.+18     	; 0x159c <__mulsf3+0x72>
    158a:	20 e0       	ldi	r18, 0x00	; 0
    158c:	9a 85       	ldd	r25, Y+10	; 0x0a
    158e:	8a 89       	ldd	r24, Y+18	; 0x12
    1590:	98 13       	cpse	r25, r24
    1592:	21 e0       	ldi	r18, 0x01	; 1
    1594:	2a 87       	std	Y+10, r18	; 0x0a
    1596:	ce 01       	movw	r24, r28
    1598:	09 96       	adiw	r24, 0x09	; 9
    159a:	bb c0       	rjmp	.+374    	; 0x1712 <__mulsf3+0x1e8>
    159c:	82 30       	cpi	r24, 0x02	; 2
    159e:	49 f4       	brne	.+18     	; 0x15b2 <__mulsf3+0x88>
    15a0:	20 e0       	ldi	r18, 0x00	; 0
    15a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    15a4:	8a 89       	ldd	r24, Y+18	; 0x12
    15a6:	98 13       	cpse	r25, r24
    15a8:	21 e0       	ldi	r18, 0x01	; 1
    15aa:	2a 8b       	std	Y+18, r18	; 0x12
    15ac:	ce 01       	movw	r24, r28
    15ae:	41 96       	adiw	r24, 0x11	; 17
    15b0:	b0 c0       	rjmp	.+352    	; 0x1712 <__mulsf3+0x1e8>
    15b2:	2d 84       	ldd	r2, Y+13	; 0x0d
    15b4:	3e 84       	ldd	r3, Y+14	; 0x0e
    15b6:	4f 84       	ldd	r4, Y+15	; 0x0f
    15b8:	58 88       	ldd	r5, Y+16	; 0x10
    15ba:	6d 88       	ldd	r6, Y+21	; 0x15
    15bc:	7e 88       	ldd	r7, Y+22	; 0x16
    15be:	8f 88       	ldd	r8, Y+23	; 0x17
    15c0:	98 8c       	ldd	r9, Y+24	; 0x18
    15c2:	ee 24       	eor	r14, r14
    15c4:	ff 24       	eor	r15, r15
    15c6:	87 01       	movw	r16, r14
    15c8:	aa 24       	eor	r10, r10
    15ca:	bb 24       	eor	r11, r11
    15cc:	65 01       	movw	r12, r10
    15ce:	40 e0       	ldi	r20, 0x00	; 0
    15d0:	50 e0       	ldi	r21, 0x00	; 0
    15d2:	60 e0       	ldi	r22, 0x00	; 0
    15d4:	70 e0       	ldi	r23, 0x00	; 0
    15d6:	e0 e0       	ldi	r30, 0x00	; 0
    15d8:	f0 e0       	ldi	r31, 0x00	; 0
    15da:	c1 01       	movw	r24, r2
    15dc:	81 70       	andi	r24, 0x01	; 1
    15de:	90 70       	andi	r25, 0x00	; 0
    15e0:	89 2b       	or	r24, r25
    15e2:	e9 f0       	breq	.+58     	; 0x161e <__mulsf3+0xf4>
    15e4:	e6 0c       	add	r14, r6
    15e6:	f7 1c       	adc	r15, r7
    15e8:	08 1d       	adc	r16, r8
    15ea:	19 1d       	adc	r17, r9
    15ec:	9a 01       	movw	r18, r20
    15ee:	ab 01       	movw	r20, r22
    15f0:	2a 0d       	add	r18, r10
    15f2:	3b 1d       	adc	r19, r11
    15f4:	4c 1d       	adc	r20, r12
    15f6:	5d 1d       	adc	r21, r13
    15f8:	80 e0       	ldi	r24, 0x00	; 0
    15fa:	90 e0       	ldi	r25, 0x00	; 0
    15fc:	a0 e0       	ldi	r26, 0x00	; 0
    15fe:	b0 e0       	ldi	r27, 0x00	; 0
    1600:	e6 14       	cp	r14, r6
    1602:	f7 04       	cpc	r15, r7
    1604:	08 05       	cpc	r16, r8
    1606:	19 05       	cpc	r17, r9
    1608:	20 f4       	brcc	.+8      	; 0x1612 <__mulsf3+0xe8>
    160a:	81 e0       	ldi	r24, 0x01	; 1
    160c:	90 e0       	ldi	r25, 0x00	; 0
    160e:	a0 e0       	ldi	r26, 0x00	; 0
    1610:	b0 e0       	ldi	r27, 0x00	; 0
    1612:	ba 01       	movw	r22, r20
    1614:	a9 01       	movw	r20, r18
    1616:	48 0f       	add	r20, r24
    1618:	59 1f       	adc	r21, r25
    161a:	6a 1f       	adc	r22, r26
    161c:	7b 1f       	adc	r23, r27
    161e:	aa 0c       	add	r10, r10
    1620:	bb 1c       	adc	r11, r11
    1622:	cc 1c       	adc	r12, r12
    1624:	dd 1c       	adc	r13, r13
    1626:	97 fe       	sbrs	r9, 7
    1628:	08 c0       	rjmp	.+16     	; 0x163a <__mulsf3+0x110>
    162a:	81 e0       	ldi	r24, 0x01	; 1
    162c:	90 e0       	ldi	r25, 0x00	; 0
    162e:	a0 e0       	ldi	r26, 0x00	; 0
    1630:	b0 e0       	ldi	r27, 0x00	; 0
    1632:	a8 2a       	or	r10, r24
    1634:	b9 2a       	or	r11, r25
    1636:	ca 2a       	or	r12, r26
    1638:	db 2a       	or	r13, r27
    163a:	31 96       	adiw	r30, 0x01	; 1
    163c:	e0 32       	cpi	r30, 0x20	; 32
    163e:	f1 05       	cpc	r31, r1
    1640:	49 f0       	breq	.+18     	; 0x1654 <__mulsf3+0x12a>
    1642:	66 0c       	add	r6, r6
    1644:	77 1c       	adc	r7, r7
    1646:	88 1c       	adc	r8, r8
    1648:	99 1c       	adc	r9, r9
    164a:	56 94       	lsr	r5
    164c:	47 94       	ror	r4
    164e:	37 94       	ror	r3
    1650:	27 94       	ror	r2
    1652:	c3 cf       	rjmp	.-122    	; 0x15da <__mulsf3+0xb0>
    1654:	fa 85       	ldd	r31, Y+10	; 0x0a
    1656:	ea 89       	ldd	r30, Y+18	; 0x12
    1658:	2b 89       	ldd	r18, Y+19	; 0x13
    165a:	3c 89       	ldd	r19, Y+20	; 0x14
    165c:	8b 85       	ldd	r24, Y+11	; 0x0b
    165e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1660:	28 0f       	add	r18, r24
    1662:	39 1f       	adc	r19, r25
    1664:	2e 5f       	subi	r18, 0xFE	; 254
    1666:	3f 4f       	sbci	r19, 0xFF	; 255
    1668:	17 c0       	rjmp	.+46     	; 0x1698 <__mulsf3+0x16e>
    166a:	ca 01       	movw	r24, r20
    166c:	81 70       	andi	r24, 0x01	; 1
    166e:	90 70       	andi	r25, 0x00	; 0
    1670:	89 2b       	or	r24, r25
    1672:	61 f0       	breq	.+24     	; 0x168c <__mulsf3+0x162>
    1674:	16 95       	lsr	r17
    1676:	07 95       	ror	r16
    1678:	f7 94       	ror	r15
    167a:	e7 94       	ror	r14
    167c:	80 e0       	ldi	r24, 0x00	; 0
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	a0 e0       	ldi	r26, 0x00	; 0
    1682:	b0 e8       	ldi	r27, 0x80	; 128
    1684:	e8 2a       	or	r14, r24
    1686:	f9 2a       	or	r15, r25
    1688:	0a 2b       	or	r16, r26
    168a:	1b 2b       	or	r17, r27
    168c:	76 95       	lsr	r23
    168e:	67 95       	ror	r22
    1690:	57 95       	ror	r21
    1692:	47 95       	ror	r20
    1694:	2f 5f       	subi	r18, 0xFF	; 255
    1696:	3f 4f       	sbci	r19, 0xFF	; 255
    1698:	77 fd       	sbrc	r23, 7
    169a:	e7 cf       	rjmp	.-50     	; 0x166a <__mulsf3+0x140>
    169c:	0c c0       	rjmp	.+24     	; 0x16b6 <__mulsf3+0x18c>
    169e:	44 0f       	add	r20, r20
    16a0:	55 1f       	adc	r21, r21
    16a2:	66 1f       	adc	r22, r22
    16a4:	77 1f       	adc	r23, r23
    16a6:	17 fd       	sbrc	r17, 7
    16a8:	41 60       	ori	r20, 0x01	; 1
    16aa:	ee 0c       	add	r14, r14
    16ac:	ff 1c       	adc	r15, r15
    16ae:	00 1f       	adc	r16, r16
    16b0:	11 1f       	adc	r17, r17
    16b2:	21 50       	subi	r18, 0x01	; 1
    16b4:	30 40       	sbci	r19, 0x00	; 0
    16b6:	40 30       	cpi	r20, 0x00	; 0
    16b8:	90 e0       	ldi	r25, 0x00	; 0
    16ba:	59 07       	cpc	r21, r25
    16bc:	90 e0       	ldi	r25, 0x00	; 0
    16be:	69 07       	cpc	r22, r25
    16c0:	90 e4       	ldi	r25, 0x40	; 64
    16c2:	79 07       	cpc	r23, r25
    16c4:	60 f3       	brcs	.-40     	; 0x169e <__mulsf3+0x174>
    16c6:	2b 8f       	std	Y+27, r18	; 0x1b
    16c8:	3c 8f       	std	Y+28, r19	; 0x1c
    16ca:	db 01       	movw	r26, r22
    16cc:	ca 01       	movw	r24, r20
    16ce:	8f 77       	andi	r24, 0x7F	; 127
    16d0:	90 70       	andi	r25, 0x00	; 0
    16d2:	a0 70       	andi	r26, 0x00	; 0
    16d4:	b0 70       	andi	r27, 0x00	; 0
    16d6:	80 34       	cpi	r24, 0x40	; 64
    16d8:	91 05       	cpc	r25, r1
    16da:	a1 05       	cpc	r26, r1
    16dc:	b1 05       	cpc	r27, r1
    16de:	61 f4       	brne	.+24     	; 0x16f8 <__mulsf3+0x1ce>
    16e0:	47 fd       	sbrc	r20, 7
    16e2:	0a c0       	rjmp	.+20     	; 0x16f8 <__mulsf3+0x1ce>
    16e4:	e1 14       	cp	r14, r1
    16e6:	f1 04       	cpc	r15, r1
    16e8:	01 05       	cpc	r16, r1
    16ea:	11 05       	cpc	r17, r1
    16ec:	29 f0       	breq	.+10     	; 0x16f8 <__mulsf3+0x1ce>
    16ee:	40 5c       	subi	r20, 0xC0	; 192
    16f0:	5f 4f       	sbci	r21, 0xFF	; 255
    16f2:	6f 4f       	sbci	r22, 0xFF	; 255
    16f4:	7f 4f       	sbci	r23, 0xFF	; 255
    16f6:	40 78       	andi	r20, 0x80	; 128
    16f8:	1a 8e       	std	Y+26, r1	; 0x1a
    16fa:	fe 17       	cp	r31, r30
    16fc:	11 f0       	breq	.+4      	; 0x1702 <__mulsf3+0x1d8>
    16fe:	81 e0       	ldi	r24, 0x01	; 1
    1700:	8a 8f       	std	Y+26, r24	; 0x1a
    1702:	4d 8f       	std	Y+29, r20	; 0x1d
    1704:	5e 8f       	std	Y+30, r21	; 0x1e
    1706:	6f 8f       	std	Y+31, r22	; 0x1f
    1708:	78 a3       	std	Y+32, r23	; 0x20
    170a:	83 e0       	ldi	r24, 0x03	; 3
    170c:	89 8f       	std	Y+25, r24	; 0x19
    170e:	ce 01       	movw	r24, r28
    1710:	49 96       	adiw	r24, 0x19	; 25
    1712:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <__pack_f>
    1716:	a0 96       	adiw	r28, 0x20	; 32
    1718:	e2 e1       	ldi	r30, 0x12	; 18
    171a:	0c 94 bb 0f 	jmp	0x1f76	; 0x1f76 <__epilogue_restores__>

0000171e <__divsf3>:
    171e:	a8 e1       	ldi	r26, 0x18	; 24
    1720:	b0 e0       	ldi	r27, 0x00	; 0
    1722:	e5 e9       	ldi	r30, 0x95	; 149
    1724:	fb e0       	ldi	r31, 0x0B	; 11
    1726:	0c 94 a7 0f 	jmp	0x1f4e	; 0x1f4e <__prologue_saves__+0x10>
    172a:	69 83       	std	Y+1, r22	; 0x01
    172c:	7a 83       	std	Y+2, r23	; 0x02
    172e:	8b 83       	std	Y+3, r24	; 0x03
    1730:	9c 83       	std	Y+4, r25	; 0x04
    1732:	2d 83       	std	Y+5, r18	; 0x05
    1734:	3e 83       	std	Y+6, r19	; 0x06
    1736:	4f 83       	std	Y+7, r20	; 0x07
    1738:	58 87       	std	Y+8, r21	; 0x08
    173a:	b9 e0       	ldi	r27, 0x09	; 9
    173c:	eb 2e       	mov	r14, r27
    173e:	f1 2c       	mov	r15, r1
    1740:	ec 0e       	add	r14, r28
    1742:	fd 1e       	adc	r15, r29
    1744:	ce 01       	movw	r24, r28
    1746:	01 96       	adiw	r24, 0x01	; 1
    1748:	b7 01       	movw	r22, r14
    174a:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <__unpack_f>
    174e:	8e 01       	movw	r16, r28
    1750:	0f 5e       	subi	r16, 0xEF	; 239
    1752:	1f 4f       	sbci	r17, 0xFF	; 255
    1754:	ce 01       	movw	r24, r28
    1756:	05 96       	adiw	r24, 0x05	; 5
    1758:	b8 01       	movw	r22, r16
    175a:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <__unpack_f>
    175e:	29 85       	ldd	r18, Y+9	; 0x09
    1760:	22 30       	cpi	r18, 0x02	; 2
    1762:	08 f4       	brcc	.+2      	; 0x1766 <__divsf3+0x48>
    1764:	7e c0       	rjmp	.+252    	; 0x1862 <__divsf3+0x144>
    1766:	39 89       	ldd	r19, Y+17	; 0x11
    1768:	32 30       	cpi	r19, 0x02	; 2
    176a:	10 f4       	brcc	.+4      	; 0x1770 <__divsf3+0x52>
    176c:	b8 01       	movw	r22, r16
    176e:	7c c0       	rjmp	.+248    	; 0x1868 <__divsf3+0x14a>
    1770:	8a 85       	ldd	r24, Y+10	; 0x0a
    1772:	9a 89       	ldd	r25, Y+18	; 0x12
    1774:	89 27       	eor	r24, r25
    1776:	8a 87       	std	Y+10, r24	; 0x0a
    1778:	24 30       	cpi	r18, 0x04	; 4
    177a:	11 f0       	breq	.+4      	; 0x1780 <__divsf3+0x62>
    177c:	22 30       	cpi	r18, 0x02	; 2
    177e:	31 f4       	brne	.+12     	; 0x178c <__divsf3+0x6e>
    1780:	23 17       	cp	r18, r19
    1782:	09 f0       	breq	.+2      	; 0x1786 <__divsf3+0x68>
    1784:	6e c0       	rjmp	.+220    	; 0x1862 <__divsf3+0x144>
    1786:	6f e0       	ldi	r22, 0x0F	; 15
    1788:	73 e0       	ldi	r23, 0x03	; 3
    178a:	6e c0       	rjmp	.+220    	; 0x1868 <__divsf3+0x14a>
    178c:	34 30       	cpi	r19, 0x04	; 4
    178e:	39 f4       	brne	.+14     	; 0x179e <__divsf3+0x80>
    1790:	1d 86       	std	Y+13, r1	; 0x0d
    1792:	1e 86       	std	Y+14, r1	; 0x0e
    1794:	1f 86       	std	Y+15, r1	; 0x0f
    1796:	18 8a       	std	Y+16, r1	; 0x10
    1798:	1c 86       	std	Y+12, r1	; 0x0c
    179a:	1b 86       	std	Y+11, r1	; 0x0b
    179c:	04 c0       	rjmp	.+8      	; 0x17a6 <__divsf3+0x88>
    179e:	32 30       	cpi	r19, 0x02	; 2
    17a0:	21 f4       	brne	.+8      	; 0x17aa <__divsf3+0x8c>
    17a2:	84 e0       	ldi	r24, 0x04	; 4
    17a4:	89 87       	std	Y+9, r24	; 0x09
    17a6:	b7 01       	movw	r22, r14
    17a8:	5f c0       	rjmp	.+190    	; 0x1868 <__divsf3+0x14a>
    17aa:	2b 85       	ldd	r18, Y+11	; 0x0b
    17ac:	3c 85       	ldd	r19, Y+12	; 0x0c
    17ae:	8b 89       	ldd	r24, Y+19	; 0x13
    17b0:	9c 89       	ldd	r25, Y+20	; 0x14
    17b2:	28 1b       	sub	r18, r24
    17b4:	39 0b       	sbc	r19, r25
    17b6:	3c 87       	std	Y+12, r19	; 0x0c
    17b8:	2b 87       	std	Y+11, r18	; 0x0b
    17ba:	ed 84       	ldd	r14, Y+13	; 0x0d
    17bc:	fe 84       	ldd	r15, Y+14	; 0x0e
    17be:	0f 85       	ldd	r16, Y+15	; 0x0f
    17c0:	18 89       	ldd	r17, Y+16	; 0x10
    17c2:	ad 88       	ldd	r10, Y+21	; 0x15
    17c4:	be 88       	ldd	r11, Y+22	; 0x16
    17c6:	cf 88       	ldd	r12, Y+23	; 0x17
    17c8:	d8 8c       	ldd	r13, Y+24	; 0x18
    17ca:	ea 14       	cp	r14, r10
    17cc:	fb 04       	cpc	r15, r11
    17ce:	0c 05       	cpc	r16, r12
    17d0:	1d 05       	cpc	r17, r13
    17d2:	40 f4       	brcc	.+16     	; 0x17e4 <__divsf3+0xc6>
    17d4:	ee 0c       	add	r14, r14
    17d6:	ff 1c       	adc	r15, r15
    17d8:	00 1f       	adc	r16, r16
    17da:	11 1f       	adc	r17, r17
    17dc:	21 50       	subi	r18, 0x01	; 1
    17de:	30 40       	sbci	r19, 0x00	; 0
    17e0:	3c 87       	std	Y+12, r19	; 0x0c
    17e2:	2b 87       	std	Y+11, r18	; 0x0b
    17e4:	20 e0       	ldi	r18, 0x00	; 0
    17e6:	30 e0       	ldi	r19, 0x00	; 0
    17e8:	40 e0       	ldi	r20, 0x00	; 0
    17ea:	50 e0       	ldi	r21, 0x00	; 0
    17ec:	80 e0       	ldi	r24, 0x00	; 0
    17ee:	90 e0       	ldi	r25, 0x00	; 0
    17f0:	a0 e0       	ldi	r26, 0x00	; 0
    17f2:	b0 e4       	ldi	r27, 0x40	; 64
    17f4:	60 e0       	ldi	r22, 0x00	; 0
    17f6:	70 e0       	ldi	r23, 0x00	; 0
    17f8:	ea 14       	cp	r14, r10
    17fa:	fb 04       	cpc	r15, r11
    17fc:	0c 05       	cpc	r16, r12
    17fe:	1d 05       	cpc	r17, r13
    1800:	40 f0       	brcs	.+16     	; 0x1812 <__divsf3+0xf4>
    1802:	28 2b       	or	r18, r24
    1804:	39 2b       	or	r19, r25
    1806:	4a 2b       	or	r20, r26
    1808:	5b 2b       	or	r21, r27
    180a:	ea 18       	sub	r14, r10
    180c:	fb 08       	sbc	r15, r11
    180e:	0c 09       	sbc	r16, r12
    1810:	1d 09       	sbc	r17, r13
    1812:	b6 95       	lsr	r27
    1814:	a7 95       	ror	r26
    1816:	97 95       	ror	r25
    1818:	87 95       	ror	r24
    181a:	ee 0c       	add	r14, r14
    181c:	ff 1c       	adc	r15, r15
    181e:	00 1f       	adc	r16, r16
    1820:	11 1f       	adc	r17, r17
    1822:	6f 5f       	subi	r22, 0xFF	; 255
    1824:	7f 4f       	sbci	r23, 0xFF	; 255
    1826:	6f 31       	cpi	r22, 0x1F	; 31
    1828:	71 05       	cpc	r23, r1
    182a:	31 f7       	brne	.-52     	; 0x17f8 <__divsf3+0xda>
    182c:	da 01       	movw	r26, r20
    182e:	c9 01       	movw	r24, r18
    1830:	8f 77       	andi	r24, 0x7F	; 127
    1832:	90 70       	andi	r25, 0x00	; 0
    1834:	a0 70       	andi	r26, 0x00	; 0
    1836:	b0 70       	andi	r27, 0x00	; 0
    1838:	80 34       	cpi	r24, 0x40	; 64
    183a:	91 05       	cpc	r25, r1
    183c:	a1 05       	cpc	r26, r1
    183e:	b1 05       	cpc	r27, r1
    1840:	61 f4       	brne	.+24     	; 0x185a <__divsf3+0x13c>
    1842:	27 fd       	sbrc	r18, 7
    1844:	0a c0       	rjmp	.+20     	; 0x185a <__divsf3+0x13c>
    1846:	e1 14       	cp	r14, r1
    1848:	f1 04       	cpc	r15, r1
    184a:	01 05       	cpc	r16, r1
    184c:	11 05       	cpc	r17, r1
    184e:	29 f0       	breq	.+10     	; 0x185a <__divsf3+0x13c>
    1850:	20 5c       	subi	r18, 0xC0	; 192
    1852:	3f 4f       	sbci	r19, 0xFF	; 255
    1854:	4f 4f       	sbci	r20, 0xFF	; 255
    1856:	5f 4f       	sbci	r21, 0xFF	; 255
    1858:	20 78       	andi	r18, 0x80	; 128
    185a:	2d 87       	std	Y+13, r18	; 0x0d
    185c:	3e 87       	std	Y+14, r19	; 0x0e
    185e:	4f 87       	std	Y+15, r20	; 0x0f
    1860:	58 8b       	std	Y+16, r21	; 0x10
    1862:	be 01       	movw	r22, r28
    1864:	67 5f       	subi	r22, 0xF7	; 247
    1866:	7f 4f       	sbci	r23, 0xFF	; 255
    1868:	cb 01       	movw	r24, r22
    186a:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <__pack_f>
    186e:	68 96       	adiw	r28, 0x18	; 24
    1870:	ea e0       	ldi	r30, 0x0A	; 10
    1872:	0c 94 c3 0f 	jmp	0x1f86	; 0x1f86 <__epilogue_restores__+0x10>

00001876 <__gesf2>:
    1876:	a8 e1       	ldi	r26, 0x18	; 24
    1878:	b0 e0       	ldi	r27, 0x00	; 0
    187a:	e1 e4       	ldi	r30, 0x41	; 65
    187c:	fc e0       	ldi	r31, 0x0C	; 12
    187e:	0c 94 ab 0f 	jmp	0x1f56	; 0x1f56 <__prologue_saves__+0x18>
    1882:	69 83       	std	Y+1, r22	; 0x01
    1884:	7a 83       	std	Y+2, r23	; 0x02
    1886:	8b 83       	std	Y+3, r24	; 0x03
    1888:	9c 83       	std	Y+4, r25	; 0x04
    188a:	2d 83       	std	Y+5, r18	; 0x05
    188c:	3e 83       	std	Y+6, r19	; 0x06
    188e:	4f 83       	std	Y+7, r20	; 0x07
    1890:	58 87       	std	Y+8, r21	; 0x08
    1892:	89 e0       	ldi	r24, 0x09	; 9
    1894:	e8 2e       	mov	r14, r24
    1896:	f1 2c       	mov	r15, r1
    1898:	ec 0e       	add	r14, r28
    189a:	fd 1e       	adc	r15, r29
    189c:	ce 01       	movw	r24, r28
    189e:	01 96       	adiw	r24, 0x01	; 1
    18a0:	b7 01       	movw	r22, r14
    18a2:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <__unpack_f>
    18a6:	8e 01       	movw	r16, r28
    18a8:	0f 5e       	subi	r16, 0xEF	; 239
    18aa:	1f 4f       	sbci	r17, 0xFF	; 255
    18ac:	ce 01       	movw	r24, r28
    18ae:	05 96       	adiw	r24, 0x05	; 5
    18b0:	b8 01       	movw	r22, r16
    18b2:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <__unpack_f>
    18b6:	89 85       	ldd	r24, Y+9	; 0x09
    18b8:	82 30       	cpi	r24, 0x02	; 2
    18ba:	40 f0       	brcs	.+16     	; 0x18cc <__gesf2+0x56>
    18bc:	89 89       	ldd	r24, Y+17	; 0x11
    18be:	82 30       	cpi	r24, 0x02	; 2
    18c0:	28 f0       	brcs	.+10     	; 0x18cc <__gesf2+0x56>
    18c2:	c7 01       	movw	r24, r14
    18c4:	b8 01       	movw	r22, r16
    18c6:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <__fpcmp_parts_f>
    18ca:	01 c0       	rjmp	.+2      	; 0x18ce <__gesf2+0x58>
    18cc:	8f ef       	ldi	r24, 0xFF	; 255
    18ce:	68 96       	adiw	r28, 0x18	; 24
    18d0:	e6 e0       	ldi	r30, 0x06	; 6
    18d2:	0c 94 c7 0f 	jmp	0x1f8e	; 0x1f8e <__epilogue_restores__+0x18>

000018d6 <__floatsisf>:
    18d6:	a8 e0       	ldi	r26, 0x08	; 8
    18d8:	b0 e0       	ldi	r27, 0x00	; 0
    18da:	e1 e7       	ldi	r30, 0x71	; 113
    18dc:	fc e0       	ldi	r31, 0x0C	; 12
    18de:	0c 94 a8 0f 	jmp	0x1f50	; 0x1f50 <__prologue_saves__+0x12>
    18e2:	9b 01       	movw	r18, r22
    18e4:	ac 01       	movw	r20, r24
    18e6:	83 e0       	ldi	r24, 0x03	; 3
    18e8:	89 83       	std	Y+1, r24	; 0x01
    18ea:	da 01       	movw	r26, r20
    18ec:	c9 01       	movw	r24, r18
    18ee:	88 27       	eor	r24, r24
    18f0:	b7 fd       	sbrc	r27, 7
    18f2:	83 95       	inc	r24
    18f4:	99 27       	eor	r25, r25
    18f6:	aa 27       	eor	r26, r26
    18f8:	bb 27       	eor	r27, r27
    18fa:	b8 2e       	mov	r11, r24
    18fc:	21 15       	cp	r18, r1
    18fe:	31 05       	cpc	r19, r1
    1900:	41 05       	cpc	r20, r1
    1902:	51 05       	cpc	r21, r1
    1904:	19 f4       	brne	.+6      	; 0x190c <__floatsisf+0x36>
    1906:	82 e0       	ldi	r24, 0x02	; 2
    1908:	89 83       	std	Y+1, r24	; 0x01
    190a:	3a c0       	rjmp	.+116    	; 0x1980 <__floatsisf+0xaa>
    190c:	88 23       	and	r24, r24
    190e:	a9 f0       	breq	.+42     	; 0x193a <__floatsisf+0x64>
    1910:	20 30       	cpi	r18, 0x00	; 0
    1912:	80 e0       	ldi	r24, 0x00	; 0
    1914:	38 07       	cpc	r19, r24
    1916:	80 e0       	ldi	r24, 0x00	; 0
    1918:	48 07       	cpc	r20, r24
    191a:	80 e8       	ldi	r24, 0x80	; 128
    191c:	58 07       	cpc	r21, r24
    191e:	29 f4       	brne	.+10     	; 0x192a <__floatsisf+0x54>
    1920:	60 e0       	ldi	r22, 0x00	; 0
    1922:	70 e0       	ldi	r23, 0x00	; 0
    1924:	80 e0       	ldi	r24, 0x00	; 0
    1926:	9f ec       	ldi	r25, 0xCF	; 207
    1928:	30 c0       	rjmp	.+96     	; 0x198a <__floatsisf+0xb4>
    192a:	ee 24       	eor	r14, r14
    192c:	ff 24       	eor	r15, r15
    192e:	87 01       	movw	r16, r14
    1930:	e2 1a       	sub	r14, r18
    1932:	f3 0a       	sbc	r15, r19
    1934:	04 0b       	sbc	r16, r20
    1936:	15 0b       	sbc	r17, r21
    1938:	02 c0       	rjmp	.+4      	; 0x193e <__floatsisf+0x68>
    193a:	79 01       	movw	r14, r18
    193c:	8a 01       	movw	r16, r20
    193e:	8e e1       	ldi	r24, 0x1E	; 30
    1940:	c8 2e       	mov	r12, r24
    1942:	d1 2c       	mov	r13, r1
    1944:	dc 82       	std	Y+4, r13	; 0x04
    1946:	cb 82       	std	Y+3, r12	; 0x03
    1948:	ed 82       	std	Y+5, r14	; 0x05
    194a:	fe 82       	std	Y+6, r15	; 0x06
    194c:	0f 83       	std	Y+7, r16	; 0x07
    194e:	18 87       	std	Y+8, r17	; 0x08
    1950:	c8 01       	movw	r24, r16
    1952:	b7 01       	movw	r22, r14
    1954:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <__clzsi2>
    1958:	01 97       	sbiw	r24, 0x01	; 1
    195a:	18 16       	cp	r1, r24
    195c:	19 06       	cpc	r1, r25
    195e:	84 f4       	brge	.+32     	; 0x1980 <__floatsisf+0xaa>
    1960:	08 2e       	mov	r0, r24
    1962:	04 c0       	rjmp	.+8      	; 0x196c <__floatsisf+0x96>
    1964:	ee 0c       	add	r14, r14
    1966:	ff 1c       	adc	r15, r15
    1968:	00 1f       	adc	r16, r16
    196a:	11 1f       	adc	r17, r17
    196c:	0a 94       	dec	r0
    196e:	d2 f7       	brpl	.-12     	; 0x1964 <__floatsisf+0x8e>
    1970:	ed 82       	std	Y+5, r14	; 0x05
    1972:	fe 82       	std	Y+6, r15	; 0x06
    1974:	0f 83       	std	Y+7, r16	; 0x07
    1976:	18 87       	std	Y+8, r17	; 0x08
    1978:	c8 1a       	sub	r12, r24
    197a:	d9 0a       	sbc	r13, r25
    197c:	dc 82       	std	Y+4, r13	; 0x04
    197e:	cb 82       	std	Y+3, r12	; 0x03
    1980:	ba 82       	std	Y+2, r11	; 0x02
    1982:	ce 01       	movw	r24, r28
    1984:	01 96       	adiw	r24, 0x01	; 1
    1986:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <__pack_f>
    198a:	28 96       	adiw	r28, 0x08	; 8
    198c:	e9 e0       	ldi	r30, 0x09	; 9
    198e:	0c 94 c4 0f 	jmp	0x1f88	; 0x1f88 <__epilogue_restores__+0x12>

00001992 <__fixsfsi>:
    1992:	ac e0       	ldi	r26, 0x0C	; 12
    1994:	b0 e0       	ldi	r27, 0x00	; 0
    1996:	ef ec       	ldi	r30, 0xCF	; 207
    1998:	fc e0       	ldi	r31, 0x0C	; 12
    199a:	0c 94 af 0f 	jmp	0x1f5e	; 0x1f5e <__prologue_saves__+0x20>
    199e:	69 83       	std	Y+1, r22	; 0x01
    19a0:	7a 83       	std	Y+2, r23	; 0x02
    19a2:	8b 83       	std	Y+3, r24	; 0x03
    19a4:	9c 83       	std	Y+4, r25	; 0x04
    19a6:	ce 01       	movw	r24, r28
    19a8:	01 96       	adiw	r24, 0x01	; 1
    19aa:	be 01       	movw	r22, r28
    19ac:	6b 5f       	subi	r22, 0xFB	; 251
    19ae:	7f 4f       	sbci	r23, 0xFF	; 255
    19b0:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <__unpack_f>
    19b4:	8d 81       	ldd	r24, Y+5	; 0x05
    19b6:	82 30       	cpi	r24, 0x02	; 2
    19b8:	61 f1       	breq	.+88     	; 0x1a12 <__fixsfsi+0x80>
    19ba:	82 30       	cpi	r24, 0x02	; 2
    19bc:	50 f1       	brcs	.+84     	; 0x1a12 <__fixsfsi+0x80>
    19be:	84 30       	cpi	r24, 0x04	; 4
    19c0:	21 f4       	brne	.+8      	; 0x19ca <__fixsfsi+0x38>
    19c2:	8e 81       	ldd	r24, Y+6	; 0x06
    19c4:	88 23       	and	r24, r24
    19c6:	51 f1       	breq	.+84     	; 0x1a1c <__fixsfsi+0x8a>
    19c8:	2e c0       	rjmp	.+92     	; 0x1a26 <__fixsfsi+0x94>
    19ca:	2f 81       	ldd	r18, Y+7	; 0x07
    19cc:	38 85       	ldd	r19, Y+8	; 0x08
    19ce:	37 fd       	sbrc	r19, 7
    19d0:	20 c0       	rjmp	.+64     	; 0x1a12 <__fixsfsi+0x80>
    19d2:	6e 81       	ldd	r22, Y+6	; 0x06
    19d4:	2f 31       	cpi	r18, 0x1F	; 31
    19d6:	31 05       	cpc	r19, r1
    19d8:	1c f0       	brlt	.+6      	; 0x19e0 <__fixsfsi+0x4e>
    19da:	66 23       	and	r22, r22
    19dc:	f9 f0       	breq	.+62     	; 0x1a1c <__fixsfsi+0x8a>
    19de:	23 c0       	rjmp	.+70     	; 0x1a26 <__fixsfsi+0x94>
    19e0:	8e e1       	ldi	r24, 0x1E	; 30
    19e2:	90 e0       	ldi	r25, 0x00	; 0
    19e4:	82 1b       	sub	r24, r18
    19e6:	93 0b       	sbc	r25, r19
    19e8:	29 85       	ldd	r18, Y+9	; 0x09
    19ea:	3a 85       	ldd	r19, Y+10	; 0x0a
    19ec:	4b 85       	ldd	r20, Y+11	; 0x0b
    19ee:	5c 85       	ldd	r21, Y+12	; 0x0c
    19f0:	04 c0       	rjmp	.+8      	; 0x19fa <__fixsfsi+0x68>
    19f2:	56 95       	lsr	r21
    19f4:	47 95       	ror	r20
    19f6:	37 95       	ror	r19
    19f8:	27 95       	ror	r18
    19fa:	8a 95       	dec	r24
    19fc:	d2 f7       	brpl	.-12     	; 0x19f2 <__fixsfsi+0x60>
    19fe:	66 23       	and	r22, r22
    1a00:	b1 f0       	breq	.+44     	; 0x1a2e <__fixsfsi+0x9c>
    1a02:	50 95       	com	r21
    1a04:	40 95       	com	r20
    1a06:	30 95       	com	r19
    1a08:	21 95       	neg	r18
    1a0a:	3f 4f       	sbci	r19, 0xFF	; 255
    1a0c:	4f 4f       	sbci	r20, 0xFF	; 255
    1a0e:	5f 4f       	sbci	r21, 0xFF	; 255
    1a10:	0e c0       	rjmp	.+28     	; 0x1a2e <__fixsfsi+0x9c>
    1a12:	20 e0       	ldi	r18, 0x00	; 0
    1a14:	30 e0       	ldi	r19, 0x00	; 0
    1a16:	40 e0       	ldi	r20, 0x00	; 0
    1a18:	50 e0       	ldi	r21, 0x00	; 0
    1a1a:	09 c0       	rjmp	.+18     	; 0x1a2e <__fixsfsi+0x9c>
    1a1c:	2f ef       	ldi	r18, 0xFF	; 255
    1a1e:	3f ef       	ldi	r19, 0xFF	; 255
    1a20:	4f ef       	ldi	r20, 0xFF	; 255
    1a22:	5f e7       	ldi	r21, 0x7F	; 127
    1a24:	04 c0       	rjmp	.+8      	; 0x1a2e <__fixsfsi+0x9c>
    1a26:	20 e0       	ldi	r18, 0x00	; 0
    1a28:	30 e0       	ldi	r19, 0x00	; 0
    1a2a:	40 e0       	ldi	r20, 0x00	; 0
    1a2c:	50 e8       	ldi	r21, 0x80	; 128
    1a2e:	b9 01       	movw	r22, r18
    1a30:	ca 01       	movw	r24, r20
    1a32:	2c 96       	adiw	r28, 0x0c	; 12
    1a34:	e2 e0       	ldi	r30, 0x02	; 2
    1a36:	0c 94 cb 0f 	jmp	0x1f96	; 0x1f96 <__epilogue_restores__+0x20>

00001a3a <__floatunsisf>:
    1a3a:	a8 e0       	ldi	r26, 0x08	; 8
    1a3c:	b0 e0       	ldi	r27, 0x00	; 0
    1a3e:	e3 e2       	ldi	r30, 0x23	; 35
    1a40:	fd e0       	ldi	r31, 0x0D	; 13
    1a42:	0c 94 a7 0f 	jmp	0x1f4e	; 0x1f4e <__prologue_saves__+0x10>
    1a46:	7b 01       	movw	r14, r22
    1a48:	8c 01       	movw	r16, r24
    1a4a:	61 15       	cp	r22, r1
    1a4c:	71 05       	cpc	r23, r1
    1a4e:	81 05       	cpc	r24, r1
    1a50:	91 05       	cpc	r25, r1
    1a52:	19 f4       	brne	.+6      	; 0x1a5a <__floatunsisf+0x20>
    1a54:	82 e0       	ldi	r24, 0x02	; 2
    1a56:	89 83       	std	Y+1, r24	; 0x01
    1a58:	60 c0       	rjmp	.+192    	; 0x1b1a <__floatunsisf+0xe0>
    1a5a:	83 e0       	ldi	r24, 0x03	; 3
    1a5c:	89 83       	std	Y+1, r24	; 0x01
    1a5e:	8e e1       	ldi	r24, 0x1E	; 30
    1a60:	c8 2e       	mov	r12, r24
    1a62:	d1 2c       	mov	r13, r1
    1a64:	dc 82       	std	Y+4, r13	; 0x04
    1a66:	cb 82       	std	Y+3, r12	; 0x03
    1a68:	ed 82       	std	Y+5, r14	; 0x05
    1a6a:	fe 82       	std	Y+6, r15	; 0x06
    1a6c:	0f 83       	std	Y+7, r16	; 0x07
    1a6e:	18 87       	std	Y+8, r17	; 0x08
    1a70:	c8 01       	movw	r24, r16
    1a72:	b7 01       	movw	r22, r14
    1a74:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <__clzsi2>
    1a78:	fc 01       	movw	r30, r24
    1a7a:	31 97       	sbiw	r30, 0x01	; 1
    1a7c:	f7 ff       	sbrs	r31, 7
    1a7e:	3b c0       	rjmp	.+118    	; 0x1af6 <__floatunsisf+0xbc>
    1a80:	22 27       	eor	r18, r18
    1a82:	33 27       	eor	r19, r19
    1a84:	2e 1b       	sub	r18, r30
    1a86:	3f 0b       	sbc	r19, r31
    1a88:	57 01       	movw	r10, r14
    1a8a:	68 01       	movw	r12, r16
    1a8c:	02 2e       	mov	r0, r18
    1a8e:	04 c0       	rjmp	.+8      	; 0x1a98 <__floatunsisf+0x5e>
    1a90:	d6 94       	lsr	r13
    1a92:	c7 94       	ror	r12
    1a94:	b7 94       	ror	r11
    1a96:	a7 94       	ror	r10
    1a98:	0a 94       	dec	r0
    1a9a:	d2 f7       	brpl	.-12     	; 0x1a90 <__floatunsisf+0x56>
    1a9c:	40 e0       	ldi	r20, 0x00	; 0
    1a9e:	50 e0       	ldi	r21, 0x00	; 0
    1aa0:	60 e0       	ldi	r22, 0x00	; 0
    1aa2:	70 e0       	ldi	r23, 0x00	; 0
    1aa4:	81 e0       	ldi	r24, 0x01	; 1
    1aa6:	90 e0       	ldi	r25, 0x00	; 0
    1aa8:	a0 e0       	ldi	r26, 0x00	; 0
    1aaa:	b0 e0       	ldi	r27, 0x00	; 0
    1aac:	04 c0       	rjmp	.+8      	; 0x1ab6 <__floatunsisf+0x7c>
    1aae:	88 0f       	add	r24, r24
    1ab0:	99 1f       	adc	r25, r25
    1ab2:	aa 1f       	adc	r26, r26
    1ab4:	bb 1f       	adc	r27, r27
    1ab6:	2a 95       	dec	r18
    1ab8:	d2 f7       	brpl	.-12     	; 0x1aae <__floatunsisf+0x74>
    1aba:	01 97       	sbiw	r24, 0x01	; 1
    1abc:	a1 09       	sbc	r26, r1
    1abe:	b1 09       	sbc	r27, r1
    1ac0:	8e 21       	and	r24, r14
    1ac2:	9f 21       	and	r25, r15
    1ac4:	a0 23       	and	r26, r16
    1ac6:	b1 23       	and	r27, r17
    1ac8:	00 97       	sbiw	r24, 0x00	; 0
    1aca:	a1 05       	cpc	r26, r1
    1acc:	b1 05       	cpc	r27, r1
    1ace:	21 f0       	breq	.+8      	; 0x1ad8 <__floatunsisf+0x9e>
    1ad0:	41 e0       	ldi	r20, 0x01	; 1
    1ad2:	50 e0       	ldi	r21, 0x00	; 0
    1ad4:	60 e0       	ldi	r22, 0x00	; 0
    1ad6:	70 e0       	ldi	r23, 0x00	; 0
    1ad8:	4a 29       	or	r20, r10
    1ada:	5b 29       	or	r21, r11
    1adc:	6c 29       	or	r22, r12
    1ade:	7d 29       	or	r23, r13
    1ae0:	4d 83       	std	Y+5, r20	; 0x05
    1ae2:	5e 83       	std	Y+6, r21	; 0x06
    1ae4:	6f 83       	std	Y+7, r22	; 0x07
    1ae6:	78 87       	std	Y+8, r23	; 0x08
    1ae8:	8e e1       	ldi	r24, 0x1E	; 30
    1aea:	90 e0       	ldi	r25, 0x00	; 0
    1aec:	8e 1b       	sub	r24, r30
    1aee:	9f 0b       	sbc	r25, r31
    1af0:	9c 83       	std	Y+4, r25	; 0x04
    1af2:	8b 83       	std	Y+3, r24	; 0x03
    1af4:	12 c0       	rjmp	.+36     	; 0x1b1a <__floatunsisf+0xe0>
    1af6:	30 97       	sbiw	r30, 0x00	; 0
    1af8:	81 f0       	breq	.+32     	; 0x1b1a <__floatunsisf+0xe0>
    1afa:	0e 2e       	mov	r0, r30
    1afc:	04 c0       	rjmp	.+8      	; 0x1b06 <__floatunsisf+0xcc>
    1afe:	ee 0c       	add	r14, r14
    1b00:	ff 1c       	adc	r15, r15
    1b02:	00 1f       	adc	r16, r16
    1b04:	11 1f       	adc	r17, r17
    1b06:	0a 94       	dec	r0
    1b08:	d2 f7       	brpl	.-12     	; 0x1afe <__floatunsisf+0xc4>
    1b0a:	ed 82       	std	Y+5, r14	; 0x05
    1b0c:	fe 82       	std	Y+6, r15	; 0x06
    1b0e:	0f 83       	std	Y+7, r16	; 0x07
    1b10:	18 87       	std	Y+8, r17	; 0x08
    1b12:	ce 1a       	sub	r12, r30
    1b14:	df 0a       	sbc	r13, r31
    1b16:	dc 82       	std	Y+4, r13	; 0x04
    1b18:	cb 82       	std	Y+3, r12	; 0x03
    1b1a:	1a 82       	std	Y+2, r1	; 0x02
    1b1c:	ce 01       	movw	r24, r28
    1b1e:	01 96       	adiw	r24, 0x01	; 1
    1b20:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <__pack_f>
    1b24:	28 96       	adiw	r28, 0x08	; 8
    1b26:	ea e0       	ldi	r30, 0x0A	; 10
    1b28:	0c 94 c3 0f 	jmp	0x1f86	; 0x1f86 <__epilogue_restores__+0x10>

00001b2c <__clzsi2>:
    1b2c:	ef 92       	push	r14
    1b2e:	ff 92       	push	r15
    1b30:	0f 93       	push	r16
    1b32:	1f 93       	push	r17
    1b34:	7b 01       	movw	r14, r22
    1b36:	8c 01       	movw	r16, r24
    1b38:	80 e0       	ldi	r24, 0x00	; 0
    1b3a:	e8 16       	cp	r14, r24
    1b3c:	80 e0       	ldi	r24, 0x00	; 0
    1b3e:	f8 06       	cpc	r15, r24
    1b40:	81 e0       	ldi	r24, 0x01	; 1
    1b42:	08 07       	cpc	r16, r24
    1b44:	80 e0       	ldi	r24, 0x00	; 0
    1b46:	18 07       	cpc	r17, r24
    1b48:	88 f4       	brcc	.+34     	; 0x1b6c <__clzsi2+0x40>
    1b4a:	8f ef       	ldi	r24, 0xFF	; 255
    1b4c:	e8 16       	cp	r14, r24
    1b4e:	f1 04       	cpc	r15, r1
    1b50:	01 05       	cpc	r16, r1
    1b52:	11 05       	cpc	r17, r1
    1b54:	31 f0       	breq	.+12     	; 0x1b62 <__clzsi2+0x36>
    1b56:	28 f0       	brcs	.+10     	; 0x1b62 <__clzsi2+0x36>
    1b58:	88 e0       	ldi	r24, 0x08	; 8
    1b5a:	90 e0       	ldi	r25, 0x00	; 0
    1b5c:	a0 e0       	ldi	r26, 0x00	; 0
    1b5e:	b0 e0       	ldi	r27, 0x00	; 0
    1b60:	17 c0       	rjmp	.+46     	; 0x1b90 <__clzsi2+0x64>
    1b62:	80 e0       	ldi	r24, 0x00	; 0
    1b64:	90 e0       	ldi	r25, 0x00	; 0
    1b66:	a0 e0       	ldi	r26, 0x00	; 0
    1b68:	b0 e0       	ldi	r27, 0x00	; 0
    1b6a:	12 c0       	rjmp	.+36     	; 0x1b90 <__clzsi2+0x64>
    1b6c:	80 e0       	ldi	r24, 0x00	; 0
    1b6e:	e8 16       	cp	r14, r24
    1b70:	80 e0       	ldi	r24, 0x00	; 0
    1b72:	f8 06       	cpc	r15, r24
    1b74:	80 e0       	ldi	r24, 0x00	; 0
    1b76:	08 07       	cpc	r16, r24
    1b78:	81 e0       	ldi	r24, 0x01	; 1
    1b7a:	18 07       	cpc	r17, r24
    1b7c:	28 f0       	brcs	.+10     	; 0x1b88 <__clzsi2+0x5c>
    1b7e:	88 e1       	ldi	r24, 0x18	; 24
    1b80:	90 e0       	ldi	r25, 0x00	; 0
    1b82:	a0 e0       	ldi	r26, 0x00	; 0
    1b84:	b0 e0       	ldi	r27, 0x00	; 0
    1b86:	04 c0       	rjmp	.+8      	; 0x1b90 <__clzsi2+0x64>
    1b88:	80 e1       	ldi	r24, 0x10	; 16
    1b8a:	90 e0       	ldi	r25, 0x00	; 0
    1b8c:	a0 e0       	ldi	r26, 0x00	; 0
    1b8e:	b0 e0       	ldi	r27, 0x00	; 0
    1b90:	20 e2       	ldi	r18, 0x20	; 32
    1b92:	30 e0       	ldi	r19, 0x00	; 0
    1b94:	40 e0       	ldi	r20, 0x00	; 0
    1b96:	50 e0       	ldi	r21, 0x00	; 0
    1b98:	28 1b       	sub	r18, r24
    1b9a:	39 0b       	sbc	r19, r25
    1b9c:	4a 0b       	sbc	r20, r26
    1b9e:	5b 0b       	sbc	r21, r27
    1ba0:	04 c0       	rjmp	.+8      	; 0x1baa <__clzsi2+0x7e>
    1ba2:	16 95       	lsr	r17
    1ba4:	07 95       	ror	r16
    1ba6:	f7 94       	ror	r15
    1ba8:	e7 94       	ror	r14
    1baa:	8a 95       	dec	r24
    1bac:	d2 f7       	brpl	.-12     	; 0x1ba2 <__clzsi2+0x76>
    1bae:	f7 01       	movw	r30, r14
    1bb0:	e9 5e       	subi	r30, 0xE9	; 233
    1bb2:	fc 4f       	sbci	r31, 0xFC	; 252
    1bb4:	80 81       	ld	r24, Z
    1bb6:	28 1b       	sub	r18, r24
    1bb8:	31 09       	sbc	r19, r1
    1bba:	41 09       	sbc	r20, r1
    1bbc:	51 09       	sbc	r21, r1
    1bbe:	c9 01       	movw	r24, r18
    1bc0:	1f 91       	pop	r17
    1bc2:	0f 91       	pop	r16
    1bc4:	ff 90       	pop	r15
    1bc6:	ef 90       	pop	r14
    1bc8:	08 95       	ret

00001bca <__pack_f>:
    1bca:	df 92       	push	r13
    1bcc:	ef 92       	push	r14
    1bce:	ff 92       	push	r15
    1bd0:	0f 93       	push	r16
    1bd2:	1f 93       	push	r17
    1bd4:	fc 01       	movw	r30, r24
    1bd6:	e4 80       	ldd	r14, Z+4	; 0x04
    1bd8:	f5 80       	ldd	r15, Z+5	; 0x05
    1bda:	06 81       	ldd	r16, Z+6	; 0x06
    1bdc:	17 81       	ldd	r17, Z+7	; 0x07
    1bde:	d1 80       	ldd	r13, Z+1	; 0x01
    1be0:	80 81       	ld	r24, Z
    1be2:	82 30       	cpi	r24, 0x02	; 2
    1be4:	48 f4       	brcc	.+18     	; 0x1bf8 <__pack_f+0x2e>
    1be6:	80 e0       	ldi	r24, 0x00	; 0
    1be8:	90 e0       	ldi	r25, 0x00	; 0
    1bea:	a0 e1       	ldi	r26, 0x10	; 16
    1bec:	b0 e0       	ldi	r27, 0x00	; 0
    1bee:	e8 2a       	or	r14, r24
    1bf0:	f9 2a       	or	r15, r25
    1bf2:	0a 2b       	or	r16, r26
    1bf4:	1b 2b       	or	r17, r27
    1bf6:	a5 c0       	rjmp	.+330    	; 0x1d42 <__pack_f+0x178>
    1bf8:	84 30       	cpi	r24, 0x04	; 4
    1bfa:	09 f4       	brne	.+2      	; 0x1bfe <__pack_f+0x34>
    1bfc:	9f c0       	rjmp	.+318    	; 0x1d3c <__pack_f+0x172>
    1bfe:	82 30       	cpi	r24, 0x02	; 2
    1c00:	21 f4       	brne	.+8      	; 0x1c0a <__pack_f+0x40>
    1c02:	ee 24       	eor	r14, r14
    1c04:	ff 24       	eor	r15, r15
    1c06:	87 01       	movw	r16, r14
    1c08:	05 c0       	rjmp	.+10     	; 0x1c14 <__pack_f+0x4a>
    1c0a:	e1 14       	cp	r14, r1
    1c0c:	f1 04       	cpc	r15, r1
    1c0e:	01 05       	cpc	r16, r1
    1c10:	11 05       	cpc	r17, r1
    1c12:	19 f4       	brne	.+6      	; 0x1c1a <__pack_f+0x50>
    1c14:	e0 e0       	ldi	r30, 0x00	; 0
    1c16:	f0 e0       	ldi	r31, 0x00	; 0
    1c18:	96 c0       	rjmp	.+300    	; 0x1d46 <__pack_f+0x17c>
    1c1a:	62 81       	ldd	r22, Z+2	; 0x02
    1c1c:	73 81       	ldd	r23, Z+3	; 0x03
    1c1e:	9f ef       	ldi	r25, 0xFF	; 255
    1c20:	62 38       	cpi	r22, 0x82	; 130
    1c22:	79 07       	cpc	r23, r25
    1c24:	0c f0       	brlt	.+2      	; 0x1c28 <__pack_f+0x5e>
    1c26:	5b c0       	rjmp	.+182    	; 0x1cde <__pack_f+0x114>
    1c28:	22 e8       	ldi	r18, 0x82	; 130
    1c2a:	3f ef       	ldi	r19, 0xFF	; 255
    1c2c:	26 1b       	sub	r18, r22
    1c2e:	37 0b       	sbc	r19, r23
    1c30:	2a 31       	cpi	r18, 0x1A	; 26
    1c32:	31 05       	cpc	r19, r1
    1c34:	2c f0       	brlt	.+10     	; 0x1c40 <__pack_f+0x76>
    1c36:	20 e0       	ldi	r18, 0x00	; 0
    1c38:	30 e0       	ldi	r19, 0x00	; 0
    1c3a:	40 e0       	ldi	r20, 0x00	; 0
    1c3c:	50 e0       	ldi	r21, 0x00	; 0
    1c3e:	2a c0       	rjmp	.+84     	; 0x1c94 <__pack_f+0xca>
    1c40:	b8 01       	movw	r22, r16
    1c42:	a7 01       	movw	r20, r14
    1c44:	02 2e       	mov	r0, r18
    1c46:	04 c0       	rjmp	.+8      	; 0x1c50 <__pack_f+0x86>
    1c48:	76 95       	lsr	r23
    1c4a:	67 95       	ror	r22
    1c4c:	57 95       	ror	r21
    1c4e:	47 95       	ror	r20
    1c50:	0a 94       	dec	r0
    1c52:	d2 f7       	brpl	.-12     	; 0x1c48 <__pack_f+0x7e>
    1c54:	81 e0       	ldi	r24, 0x01	; 1
    1c56:	90 e0       	ldi	r25, 0x00	; 0
    1c58:	a0 e0       	ldi	r26, 0x00	; 0
    1c5a:	b0 e0       	ldi	r27, 0x00	; 0
    1c5c:	04 c0       	rjmp	.+8      	; 0x1c66 <__pack_f+0x9c>
    1c5e:	88 0f       	add	r24, r24
    1c60:	99 1f       	adc	r25, r25
    1c62:	aa 1f       	adc	r26, r26
    1c64:	bb 1f       	adc	r27, r27
    1c66:	2a 95       	dec	r18
    1c68:	d2 f7       	brpl	.-12     	; 0x1c5e <__pack_f+0x94>
    1c6a:	01 97       	sbiw	r24, 0x01	; 1
    1c6c:	a1 09       	sbc	r26, r1
    1c6e:	b1 09       	sbc	r27, r1
    1c70:	8e 21       	and	r24, r14
    1c72:	9f 21       	and	r25, r15
    1c74:	a0 23       	and	r26, r16
    1c76:	b1 23       	and	r27, r17
    1c78:	00 97       	sbiw	r24, 0x00	; 0
    1c7a:	a1 05       	cpc	r26, r1
    1c7c:	b1 05       	cpc	r27, r1
    1c7e:	21 f0       	breq	.+8      	; 0x1c88 <__pack_f+0xbe>
    1c80:	81 e0       	ldi	r24, 0x01	; 1
    1c82:	90 e0       	ldi	r25, 0x00	; 0
    1c84:	a0 e0       	ldi	r26, 0x00	; 0
    1c86:	b0 e0       	ldi	r27, 0x00	; 0
    1c88:	9a 01       	movw	r18, r20
    1c8a:	ab 01       	movw	r20, r22
    1c8c:	28 2b       	or	r18, r24
    1c8e:	39 2b       	or	r19, r25
    1c90:	4a 2b       	or	r20, r26
    1c92:	5b 2b       	or	r21, r27
    1c94:	da 01       	movw	r26, r20
    1c96:	c9 01       	movw	r24, r18
    1c98:	8f 77       	andi	r24, 0x7F	; 127
    1c9a:	90 70       	andi	r25, 0x00	; 0
    1c9c:	a0 70       	andi	r26, 0x00	; 0
    1c9e:	b0 70       	andi	r27, 0x00	; 0
    1ca0:	80 34       	cpi	r24, 0x40	; 64
    1ca2:	91 05       	cpc	r25, r1
    1ca4:	a1 05       	cpc	r26, r1
    1ca6:	b1 05       	cpc	r27, r1
    1ca8:	39 f4       	brne	.+14     	; 0x1cb8 <__pack_f+0xee>
    1caa:	27 ff       	sbrs	r18, 7
    1cac:	09 c0       	rjmp	.+18     	; 0x1cc0 <__pack_f+0xf6>
    1cae:	20 5c       	subi	r18, 0xC0	; 192
    1cb0:	3f 4f       	sbci	r19, 0xFF	; 255
    1cb2:	4f 4f       	sbci	r20, 0xFF	; 255
    1cb4:	5f 4f       	sbci	r21, 0xFF	; 255
    1cb6:	04 c0       	rjmp	.+8      	; 0x1cc0 <__pack_f+0xf6>
    1cb8:	21 5c       	subi	r18, 0xC1	; 193
    1cba:	3f 4f       	sbci	r19, 0xFF	; 255
    1cbc:	4f 4f       	sbci	r20, 0xFF	; 255
    1cbe:	5f 4f       	sbci	r21, 0xFF	; 255
    1cc0:	e0 e0       	ldi	r30, 0x00	; 0
    1cc2:	f0 e0       	ldi	r31, 0x00	; 0
    1cc4:	20 30       	cpi	r18, 0x00	; 0
    1cc6:	a0 e0       	ldi	r26, 0x00	; 0
    1cc8:	3a 07       	cpc	r19, r26
    1cca:	a0 e0       	ldi	r26, 0x00	; 0
    1ccc:	4a 07       	cpc	r20, r26
    1cce:	a0 e4       	ldi	r26, 0x40	; 64
    1cd0:	5a 07       	cpc	r21, r26
    1cd2:	10 f0       	brcs	.+4      	; 0x1cd8 <__pack_f+0x10e>
    1cd4:	e1 e0       	ldi	r30, 0x01	; 1
    1cd6:	f0 e0       	ldi	r31, 0x00	; 0
    1cd8:	79 01       	movw	r14, r18
    1cda:	8a 01       	movw	r16, r20
    1cdc:	27 c0       	rjmp	.+78     	; 0x1d2c <__pack_f+0x162>
    1cde:	60 38       	cpi	r22, 0x80	; 128
    1ce0:	71 05       	cpc	r23, r1
    1ce2:	64 f5       	brge	.+88     	; 0x1d3c <__pack_f+0x172>
    1ce4:	fb 01       	movw	r30, r22
    1ce6:	e1 58       	subi	r30, 0x81	; 129
    1ce8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cea:	d8 01       	movw	r26, r16
    1cec:	c7 01       	movw	r24, r14
    1cee:	8f 77       	andi	r24, 0x7F	; 127
    1cf0:	90 70       	andi	r25, 0x00	; 0
    1cf2:	a0 70       	andi	r26, 0x00	; 0
    1cf4:	b0 70       	andi	r27, 0x00	; 0
    1cf6:	80 34       	cpi	r24, 0x40	; 64
    1cf8:	91 05       	cpc	r25, r1
    1cfa:	a1 05       	cpc	r26, r1
    1cfc:	b1 05       	cpc	r27, r1
    1cfe:	39 f4       	brne	.+14     	; 0x1d0e <__pack_f+0x144>
    1d00:	e7 fe       	sbrs	r14, 7
    1d02:	0d c0       	rjmp	.+26     	; 0x1d1e <__pack_f+0x154>
    1d04:	80 e4       	ldi	r24, 0x40	; 64
    1d06:	90 e0       	ldi	r25, 0x00	; 0
    1d08:	a0 e0       	ldi	r26, 0x00	; 0
    1d0a:	b0 e0       	ldi	r27, 0x00	; 0
    1d0c:	04 c0       	rjmp	.+8      	; 0x1d16 <__pack_f+0x14c>
    1d0e:	8f e3       	ldi	r24, 0x3F	; 63
    1d10:	90 e0       	ldi	r25, 0x00	; 0
    1d12:	a0 e0       	ldi	r26, 0x00	; 0
    1d14:	b0 e0       	ldi	r27, 0x00	; 0
    1d16:	e8 0e       	add	r14, r24
    1d18:	f9 1e       	adc	r15, r25
    1d1a:	0a 1f       	adc	r16, r26
    1d1c:	1b 1f       	adc	r17, r27
    1d1e:	17 ff       	sbrs	r17, 7
    1d20:	05 c0       	rjmp	.+10     	; 0x1d2c <__pack_f+0x162>
    1d22:	16 95       	lsr	r17
    1d24:	07 95       	ror	r16
    1d26:	f7 94       	ror	r15
    1d28:	e7 94       	ror	r14
    1d2a:	31 96       	adiw	r30, 0x01	; 1
    1d2c:	87 e0       	ldi	r24, 0x07	; 7
    1d2e:	16 95       	lsr	r17
    1d30:	07 95       	ror	r16
    1d32:	f7 94       	ror	r15
    1d34:	e7 94       	ror	r14
    1d36:	8a 95       	dec	r24
    1d38:	d1 f7       	brne	.-12     	; 0x1d2e <__pack_f+0x164>
    1d3a:	05 c0       	rjmp	.+10     	; 0x1d46 <__pack_f+0x17c>
    1d3c:	ee 24       	eor	r14, r14
    1d3e:	ff 24       	eor	r15, r15
    1d40:	87 01       	movw	r16, r14
    1d42:	ef ef       	ldi	r30, 0xFF	; 255
    1d44:	f0 e0       	ldi	r31, 0x00	; 0
    1d46:	6e 2f       	mov	r22, r30
    1d48:	67 95       	ror	r22
    1d4a:	66 27       	eor	r22, r22
    1d4c:	67 95       	ror	r22
    1d4e:	90 2f       	mov	r25, r16
    1d50:	9f 77       	andi	r25, 0x7F	; 127
    1d52:	d7 94       	ror	r13
    1d54:	dd 24       	eor	r13, r13
    1d56:	d7 94       	ror	r13
    1d58:	8e 2f       	mov	r24, r30
    1d5a:	86 95       	lsr	r24
    1d5c:	49 2f       	mov	r20, r25
    1d5e:	46 2b       	or	r20, r22
    1d60:	58 2f       	mov	r21, r24
    1d62:	5d 29       	or	r21, r13
    1d64:	b7 01       	movw	r22, r14
    1d66:	ca 01       	movw	r24, r20
    1d68:	1f 91       	pop	r17
    1d6a:	0f 91       	pop	r16
    1d6c:	ff 90       	pop	r15
    1d6e:	ef 90       	pop	r14
    1d70:	df 90       	pop	r13
    1d72:	08 95       	ret

00001d74 <__unpack_f>:
    1d74:	fc 01       	movw	r30, r24
    1d76:	db 01       	movw	r26, r22
    1d78:	40 81       	ld	r20, Z
    1d7a:	51 81       	ldd	r21, Z+1	; 0x01
    1d7c:	22 81       	ldd	r18, Z+2	; 0x02
    1d7e:	62 2f       	mov	r22, r18
    1d80:	6f 77       	andi	r22, 0x7F	; 127
    1d82:	70 e0       	ldi	r23, 0x00	; 0
    1d84:	22 1f       	adc	r18, r18
    1d86:	22 27       	eor	r18, r18
    1d88:	22 1f       	adc	r18, r18
    1d8a:	93 81       	ldd	r25, Z+3	; 0x03
    1d8c:	89 2f       	mov	r24, r25
    1d8e:	88 0f       	add	r24, r24
    1d90:	82 2b       	or	r24, r18
    1d92:	28 2f       	mov	r18, r24
    1d94:	30 e0       	ldi	r19, 0x00	; 0
    1d96:	99 1f       	adc	r25, r25
    1d98:	99 27       	eor	r25, r25
    1d9a:	99 1f       	adc	r25, r25
    1d9c:	11 96       	adiw	r26, 0x01	; 1
    1d9e:	9c 93       	st	X, r25
    1da0:	11 97       	sbiw	r26, 0x01	; 1
    1da2:	21 15       	cp	r18, r1
    1da4:	31 05       	cpc	r19, r1
    1da6:	a9 f5       	brne	.+106    	; 0x1e12 <__unpack_f+0x9e>
    1da8:	41 15       	cp	r20, r1
    1daa:	51 05       	cpc	r21, r1
    1dac:	61 05       	cpc	r22, r1
    1dae:	71 05       	cpc	r23, r1
    1db0:	11 f4       	brne	.+4      	; 0x1db6 <__unpack_f+0x42>
    1db2:	82 e0       	ldi	r24, 0x02	; 2
    1db4:	37 c0       	rjmp	.+110    	; 0x1e24 <__unpack_f+0xb0>
    1db6:	82 e8       	ldi	r24, 0x82	; 130
    1db8:	9f ef       	ldi	r25, 0xFF	; 255
    1dba:	13 96       	adiw	r26, 0x03	; 3
    1dbc:	9c 93       	st	X, r25
    1dbe:	8e 93       	st	-X, r24
    1dc0:	12 97       	sbiw	r26, 0x02	; 2
    1dc2:	9a 01       	movw	r18, r20
    1dc4:	ab 01       	movw	r20, r22
    1dc6:	67 e0       	ldi	r22, 0x07	; 7
    1dc8:	22 0f       	add	r18, r18
    1dca:	33 1f       	adc	r19, r19
    1dcc:	44 1f       	adc	r20, r20
    1dce:	55 1f       	adc	r21, r21
    1dd0:	6a 95       	dec	r22
    1dd2:	d1 f7       	brne	.-12     	; 0x1dc8 <__unpack_f+0x54>
    1dd4:	83 e0       	ldi	r24, 0x03	; 3
    1dd6:	8c 93       	st	X, r24
    1dd8:	0d c0       	rjmp	.+26     	; 0x1df4 <__unpack_f+0x80>
    1dda:	22 0f       	add	r18, r18
    1ddc:	33 1f       	adc	r19, r19
    1dde:	44 1f       	adc	r20, r20
    1de0:	55 1f       	adc	r21, r21
    1de2:	12 96       	adiw	r26, 0x02	; 2
    1de4:	8d 91       	ld	r24, X+
    1de6:	9c 91       	ld	r25, X
    1de8:	13 97       	sbiw	r26, 0x03	; 3
    1dea:	01 97       	sbiw	r24, 0x01	; 1
    1dec:	13 96       	adiw	r26, 0x03	; 3
    1dee:	9c 93       	st	X, r25
    1df0:	8e 93       	st	-X, r24
    1df2:	12 97       	sbiw	r26, 0x02	; 2
    1df4:	20 30       	cpi	r18, 0x00	; 0
    1df6:	80 e0       	ldi	r24, 0x00	; 0
    1df8:	38 07       	cpc	r19, r24
    1dfa:	80 e0       	ldi	r24, 0x00	; 0
    1dfc:	48 07       	cpc	r20, r24
    1dfe:	80 e4       	ldi	r24, 0x40	; 64
    1e00:	58 07       	cpc	r21, r24
    1e02:	58 f3       	brcs	.-42     	; 0x1dda <__unpack_f+0x66>
    1e04:	14 96       	adiw	r26, 0x04	; 4
    1e06:	2d 93       	st	X+, r18
    1e08:	3d 93       	st	X+, r19
    1e0a:	4d 93       	st	X+, r20
    1e0c:	5c 93       	st	X, r21
    1e0e:	17 97       	sbiw	r26, 0x07	; 7
    1e10:	08 95       	ret
    1e12:	2f 3f       	cpi	r18, 0xFF	; 255
    1e14:	31 05       	cpc	r19, r1
    1e16:	79 f4       	brne	.+30     	; 0x1e36 <__unpack_f+0xc2>
    1e18:	41 15       	cp	r20, r1
    1e1a:	51 05       	cpc	r21, r1
    1e1c:	61 05       	cpc	r22, r1
    1e1e:	71 05       	cpc	r23, r1
    1e20:	19 f4       	brne	.+6      	; 0x1e28 <__unpack_f+0xb4>
    1e22:	84 e0       	ldi	r24, 0x04	; 4
    1e24:	8c 93       	st	X, r24
    1e26:	08 95       	ret
    1e28:	64 ff       	sbrs	r22, 4
    1e2a:	03 c0       	rjmp	.+6      	; 0x1e32 <__unpack_f+0xbe>
    1e2c:	81 e0       	ldi	r24, 0x01	; 1
    1e2e:	8c 93       	st	X, r24
    1e30:	12 c0       	rjmp	.+36     	; 0x1e56 <__unpack_f+0xe2>
    1e32:	1c 92       	st	X, r1
    1e34:	10 c0       	rjmp	.+32     	; 0x1e56 <__unpack_f+0xe2>
    1e36:	2f 57       	subi	r18, 0x7F	; 127
    1e38:	30 40       	sbci	r19, 0x00	; 0
    1e3a:	13 96       	adiw	r26, 0x03	; 3
    1e3c:	3c 93       	st	X, r19
    1e3e:	2e 93       	st	-X, r18
    1e40:	12 97       	sbiw	r26, 0x02	; 2
    1e42:	83 e0       	ldi	r24, 0x03	; 3
    1e44:	8c 93       	st	X, r24
    1e46:	87 e0       	ldi	r24, 0x07	; 7
    1e48:	44 0f       	add	r20, r20
    1e4a:	55 1f       	adc	r21, r21
    1e4c:	66 1f       	adc	r22, r22
    1e4e:	77 1f       	adc	r23, r23
    1e50:	8a 95       	dec	r24
    1e52:	d1 f7       	brne	.-12     	; 0x1e48 <__unpack_f+0xd4>
    1e54:	70 64       	ori	r23, 0x40	; 64
    1e56:	14 96       	adiw	r26, 0x04	; 4
    1e58:	4d 93       	st	X+, r20
    1e5a:	5d 93       	st	X+, r21
    1e5c:	6d 93       	st	X+, r22
    1e5e:	7c 93       	st	X, r23
    1e60:	17 97       	sbiw	r26, 0x07	; 7
    1e62:	08 95       	ret

00001e64 <__fpcmp_parts_f>:
    1e64:	1f 93       	push	r17
    1e66:	dc 01       	movw	r26, r24
    1e68:	fb 01       	movw	r30, r22
    1e6a:	9c 91       	ld	r25, X
    1e6c:	92 30       	cpi	r25, 0x02	; 2
    1e6e:	08 f4       	brcc	.+2      	; 0x1e72 <__fpcmp_parts_f+0xe>
    1e70:	47 c0       	rjmp	.+142    	; 0x1f00 <__fpcmp_parts_f+0x9c>
    1e72:	80 81       	ld	r24, Z
    1e74:	82 30       	cpi	r24, 0x02	; 2
    1e76:	08 f4       	brcc	.+2      	; 0x1e7a <__fpcmp_parts_f+0x16>
    1e78:	43 c0       	rjmp	.+134    	; 0x1f00 <__fpcmp_parts_f+0x9c>
    1e7a:	94 30       	cpi	r25, 0x04	; 4
    1e7c:	51 f4       	brne	.+20     	; 0x1e92 <__fpcmp_parts_f+0x2e>
    1e7e:	11 96       	adiw	r26, 0x01	; 1
    1e80:	1c 91       	ld	r17, X
    1e82:	84 30       	cpi	r24, 0x04	; 4
    1e84:	99 f5       	brne	.+102    	; 0x1eec <__fpcmp_parts_f+0x88>
    1e86:	81 81       	ldd	r24, Z+1	; 0x01
    1e88:	68 2f       	mov	r22, r24
    1e8a:	70 e0       	ldi	r23, 0x00	; 0
    1e8c:	61 1b       	sub	r22, r17
    1e8e:	71 09       	sbc	r23, r1
    1e90:	3f c0       	rjmp	.+126    	; 0x1f10 <__fpcmp_parts_f+0xac>
    1e92:	84 30       	cpi	r24, 0x04	; 4
    1e94:	21 f0       	breq	.+8      	; 0x1e9e <__fpcmp_parts_f+0x3a>
    1e96:	92 30       	cpi	r25, 0x02	; 2
    1e98:	31 f4       	brne	.+12     	; 0x1ea6 <__fpcmp_parts_f+0x42>
    1e9a:	82 30       	cpi	r24, 0x02	; 2
    1e9c:	b9 f1       	breq	.+110    	; 0x1f0c <__fpcmp_parts_f+0xa8>
    1e9e:	81 81       	ldd	r24, Z+1	; 0x01
    1ea0:	88 23       	and	r24, r24
    1ea2:	89 f1       	breq	.+98     	; 0x1f06 <__fpcmp_parts_f+0xa2>
    1ea4:	2d c0       	rjmp	.+90     	; 0x1f00 <__fpcmp_parts_f+0x9c>
    1ea6:	11 96       	adiw	r26, 0x01	; 1
    1ea8:	1c 91       	ld	r17, X
    1eaa:	11 97       	sbiw	r26, 0x01	; 1
    1eac:	82 30       	cpi	r24, 0x02	; 2
    1eae:	f1 f0       	breq	.+60     	; 0x1eec <__fpcmp_parts_f+0x88>
    1eb0:	81 81       	ldd	r24, Z+1	; 0x01
    1eb2:	18 17       	cp	r17, r24
    1eb4:	d9 f4       	brne	.+54     	; 0x1eec <__fpcmp_parts_f+0x88>
    1eb6:	12 96       	adiw	r26, 0x02	; 2
    1eb8:	2d 91       	ld	r18, X+
    1eba:	3c 91       	ld	r19, X
    1ebc:	13 97       	sbiw	r26, 0x03	; 3
    1ebe:	82 81       	ldd	r24, Z+2	; 0x02
    1ec0:	93 81       	ldd	r25, Z+3	; 0x03
    1ec2:	82 17       	cp	r24, r18
    1ec4:	93 07       	cpc	r25, r19
    1ec6:	94 f0       	brlt	.+36     	; 0x1eec <__fpcmp_parts_f+0x88>
    1ec8:	28 17       	cp	r18, r24
    1eca:	39 07       	cpc	r19, r25
    1ecc:	bc f0       	brlt	.+46     	; 0x1efc <__fpcmp_parts_f+0x98>
    1ece:	14 96       	adiw	r26, 0x04	; 4
    1ed0:	8d 91       	ld	r24, X+
    1ed2:	9d 91       	ld	r25, X+
    1ed4:	0d 90       	ld	r0, X+
    1ed6:	bc 91       	ld	r27, X
    1ed8:	a0 2d       	mov	r26, r0
    1eda:	24 81       	ldd	r18, Z+4	; 0x04
    1edc:	35 81       	ldd	r19, Z+5	; 0x05
    1ede:	46 81       	ldd	r20, Z+6	; 0x06
    1ee0:	57 81       	ldd	r21, Z+7	; 0x07
    1ee2:	28 17       	cp	r18, r24
    1ee4:	39 07       	cpc	r19, r25
    1ee6:	4a 07       	cpc	r20, r26
    1ee8:	5b 07       	cpc	r21, r27
    1eea:	18 f4       	brcc	.+6      	; 0x1ef2 <__fpcmp_parts_f+0x8e>
    1eec:	11 23       	and	r17, r17
    1eee:	41 f0       	breq	.+16     	; 0x1f00 <__fpcmp_parts_f+0x9c>
    1ef0:	0a c0       	rjmp	.+20     	; 0x1f06 <__fpcmp_parts_f+0xa2>
    1ef2:	82 17       	cp	r24, r18
    1ef4:	93 07       	cpc	r25, r19
    1ef6:	a4 07       	cpc	r26, r20
    1ef8:	b5 07       	cpc	r27, r21
    1efa:	40 f4       	brcc	.+16     	; 0x1f0c <__fpcmp_parts_f+0xa8>
    1efc:	11 23       	and	r17, r17
    1efe:	19 f0       	breq	.+6      	; 0x1f06 <__fpcmp_parts_f+0xa2>
    1f00:	61 e0       	ldi	r22, 0x01	; 1
    1f02:	70 e0       	ldi	r23, 0x00	; 0
    1f04:	05 c0       	rjmp	.+10     	; 0x1f10 <__fpcmp_parts_f+0xac>
    1f06:	6f ef       	ldi	r22, 0xFF	; 255
    1f08:	7f ef       	ldi	r23, 0xFF	; 255
    1f0a:	02 c0       	rjmp	.+4      	; 0x1f10 <__fpcmp_parts_f+0xac>
    1f0c:	60 e0       	ldi	r22, 0x00	; 0
    1f0e:	70 e0       	ldi	r23, 0x00	; 0
    1f10:	cb 01       	movw	r24, r22
    1f12:	1f 91       	pop	r17
    1f14:	08 95       	ret

00001f16 <__udivmodhi4>:
    1f16:	aa 1b       	sub	r26, r26
    1f18:	bb 1b       	sub	r27, r27
    1f1a:	51 e1       	ldi	r21, 0x11	; 17
    1f1c:	07 c0       	rjmp	.+14     	; 0x1f2c <__udivmodhi4_ep>

00001f1e <__udivmodhi4_loop>:
    1f1e:	aa 1f       	adc	r26, r26
    1f20:	bb 1f       	adc	r27, r27
    1f22:	a6 17       	cp	r26, r22
    1f24:	b7 07       	cpc	r27, r23
    1f26:	10 f0       	brcs	.+4      	; 0x1f2c <__udivmodhi4_ep>
    1f28:	a6 1b       	sub	r26, r22
    1f2a:	b7 0b       	sbc	r27, r23

00001f2c <__udivmodhi4_ep>:
    1f2c:	88 1f       	adc	r24, r24
    1f2e:	99 1f       	adc	r25, r25
    1f30:	5a 95       	dec	r21
    1f32:	a9 f7       	brne	.-22     	; 0x1f1e <__udivmodhi4_loop>
    1f34:	80 95       	com	r24
    1f36:	90 95       	com	r25
    1f38:	bc 01       	movw	r22, r24
    1f3a:	cd 01       	movw	r24, r26
    1f3c:	08 95       	ret

00001f3e <__prologue_saves__>:
    1f3e:	2f 92       	push	r2
    1f40:	3f 92       	push	r3
    1f42:	4f 92       	push	r4
    1f44:	5f 92       	push	r5
    1f46:	6f 92       	push	r6
    1f48:	7f 92       	push	r7
    1f4a:	8f 92       	push	r8
    1f4c:	9f 92       	push	r9
    1f4e:	af 92       	push	r10
    1f50:	bf 92       	push	r11
    1f52:	cf 92       	push	r12
    1f54:	df 92       	push	r13
    1f56:	ef 92       	push	r14
    1f58:	ff 92       	push	r15
    1f5a:	0f 93       	push	r16
    1f5c:	1f 93       	push	r17
    1f5e:	cf 93       	push	r28
    1f60:	df 93       	push	r29
    1f62:	cd b7       	in	r28, 0x3d	; 61
    1f64:	de b7       	in	r29, 0x3e	; 62
    1f66:	ca 1b       	sub	r28, r26
    1f68:	db 0b       	sbc	r29, r27
    1f6a:	0f b6       	in	r0, 0x3f	; 63
    1f6c:	f8 94       	cli
    1f6e:	de bf       	out	0x3e, r29	; 62
    1f70:	0f be       	out	0x3f, r0	; 63
    1f72:	cd bf       	out	0x3d, r28	; 61
    1f74:	19 94       	eijmp

00001f76 <__epilogue_restores__>:
    1f76:	2a 88       	ldd	r2, Y+18	; 0x12
    1f78:	39 88       	ldd	r3, Y+17	; 0x11
    1f7a:	48 88       	ldd	r4, Y+16	; 0x10
    1f7c:	5f 84       	ldd	r5, Y+15	; 0x0f
    1f7e:	6e 84       	ldd	r6, Y+14	; 0x0e
    1f80:	7d 84       	ldd	r7, Y+13	; 0x0d
    1f82:	8c 84       	ldd	r8, Y+12	; 0x0c
    1f84:	9b 84       	ldd	r9, Y+11	; 0x0b
    1f86:	aa 84       	ldd	r10, Y+10	; 0x0a
    1f88:	b9 84       	ldd	r11, Y+9	; 0x09
    1f8a:	c8 84       	ldd	r12, Y+8	; 0x08
    1f8c:	df 80       	ldd	r13, Y+7	; 0x07
    1f8e:	ee 80       	ldd	r14, Y+6	; 0x06
    1f90:	fd 80       	ldd	r15, Y+5	; 0x05
    1f92:	0c 81       	ldd	r16, Y+4	; 0x04
    1f94:	1b 81       	ldd	r17, Y+3	; 0x03
    1f96:	aa 81       	ldd	r26, Y+2	; 0x02
    1f98:	b9 81       	ldd	r27, Y+1	; 0x01
    1f9a:	ce 0f       	add	r28, r30
    1f9c:	d1 1d       	adc	r29, r1
    1f9e:	0f b6       	in	r0, 0x3f	; 63
    1fa0:	f8 94       	cli
    1fa2:	de bf       	out	0x3e, r29	; 62
    1fa4:	0f be       	out	0x3f, r0	; 63
    1fa6:	cd bf       	out	0x3d, r28	; 61
    1fa8:	ed 01       	movw	r28, r26
    1faa:	08 95       	ret

00001fac <pow>:
    1fac:	fa 01       	movw	r30, r20
    1fae:	ee 0f       	add	r30, r30
    1fb0:	ff 1f       	adc	r31, r31
    1fb2:	30 96       	adiw	r30, 0x00	; 0
    1fb4:	21 05       	cpc	r18, r1
    1fb6:	31 05       	cpc	r19, r1
    1fb8:	99 f1       	breq	.+102    	; 0x2020 <pow+0x74>
    1fba:	61 15       	cp	r22, r1
    1fbc:	71 05       	cpc	r23, r1
    1fbe:	61 f4       	brne	.+24     	; 0x1fd8 <pow+0x2c>
    1fc0:	80 38       	cpi	r24, 0x80	; 128
    1fc2:	bf e3       	ldi	r27, 0x3F	; 63
    1fc4:	9b 07       	cpc	r25, r27
    1fc6:	49 f1       	breq	.+82     	; 0x201a <pow+0x6e>
    1fc8:	68 94       	set
    1fca:	90 38       	cpi	r25, 0x80	; 128
    1fcc:	81 05       	cpc	r24, r1
    1fce:	61 f0       	breq	.+24     	; 0x1fe8 <pow+0x3c>
    1fd0:	80 38       	cpi	r24, 0x80	; 128
    1fd2:	bf ef       	ldi	r27, 0xFF	; 255
    1fd4:	9b 07       	cpc	r25, r27
    1fd6:	41 f0       	breq	.+16     	; 0x1fe8 <pow+0x3c>
    1fd8:	99 23       	and	r25, r25
    1fda:	42 f5       	brpl	.+80     	; 0x202c <pow+0x80>
    1fdc:	ff 3f       	cpi	r31, 0xFF	; 255
    1fde:	e1 05       	cpc	r30, r1
    1fe0:	31 05       	cpc	r19, r1
    1fe2:	21 05       	cpc	r18, r1
    1fe4:	11 f1       	breq	.+68     	; 0x202a <pow+0x7e>
    1fe6:	e8 94       	clt
    1fe8:	08 94       	sec
    1fea:	e7 95       	ror	r30
    1fec:	d9 01       	movw	r26, r18
    1fee:	aa 23       	and	r26, r26
    1ff0:	29 f4       	brne	.+10     	; 0x1ffc <pow+0x50>
    1ff2:	ab 2f       	mov	r26, r27
    1ff4:	be 2f       	mov	r27, r30
    1ff6:	f8 5f       	subi	r31, 0xF8	; 248
    1ff8:	d0 f3       	brcs	.-12     	; 0x1fee <pow+0x42>
    1ffa:	10 c0       	rjmp	.+32     	; 0x201c <pow+0x70>
    1ffc:	ff 5f       	subi	r31, 0xFF	; 255
    1ffe:	70 f4       	brcc	.+28     	; 0x201c <pow+0x70>
    2000:	a6 95       	lsr	r26
    2002:	e0 f7       	brcc	.-8      	; 0x1ffc <pow+0x50>
    2004:	f7 39       	cpi	r31, 0x97	; 151
    2006:	50 f0       	brcs	.+20     	; 0x201c <pow+0x70>
    2008:	19 f0       	breq	.+6      	; 0x2010 <pow+0x64>
    200a:	ff 3a       	cpi	r31, 0xAF	; 175
    200c:	38 f4       	brcc	.+14     	; 0x201c <pow+0x70>
    200e:	9f 77       	andi	r25, 0x7F	; 127
    2010:	9f 93       	push	r25
    2012:	0c d0       	rcall	.+24     	; 0x202c <pow+0x80>
    2014:	0f 90       	pop	r0
    2016:	07 fc       	sbrc	r0, 7
    2018:	90 58       	subi	r25, 0x80	; 128
    201a:	08 95       	ret
    201c:	3e f0       	brts	.+14     	; 0x202c <pow+0x80>
    201e:	49 c0       	rjmp	.+146    	; 0x20b2 <__fp_nan>
    2020:	60 e0       	ldi	r22, 0x00	; 0
    2022:	70 e0       	ldi	r23, 0x00	; 0
    2024:	80 e8       	ldi	r24, 0x80	; 128
    2026:	9f e3       	ldi	r25, 0x3F	; 63
    2028:	08 95       	ret
    202a:	4f e7       	ldi	r20, 0x7F	; 127
    202c:	9f 77       	andi	r25, 0x7F	; 127
    202e:	5f 93       	push	r21
    2030:	4f 93       	push	r20
    2032:	3f 93       	push	r19
    2034:	2f 93       	push	r18
    2036:	d0 d0       	rcall	.+416    	; 0x21d8 <log>
    2038:	2f 91       	pop	r18
    203a:	3f 91       	pop	r19
    203c:	4f 91       	pop	r20
    203e:	5f 91       	pop	r21
    2040:	74 da       	rcall	.-2840   	; 0x152a <__mulsf3>
    2042:	05 c0       	rjmp	.+10     	; 0x204e <exp>
    2044:	19 f4       	brne	.+6      	; 0x204c <pow+0xa0>
    2046:	0e f0       	brts	.+2      	; 0x204a <pow+0x9e>
    2048:	2e c0       	rjmp	.+92     	; 0x20a6 <__fp_inf>
    204a:	7d c0       	rjmp	.+250    	; 0x2146 <__fp_zero>
    204c:	32 c0       	rjmp	.+100    	; 0x20b2 <__fp_nan>

0000204e <exp>:
    204e:	61 d0       	rcall	.+194    	; 0x2112 <__fp_splitA>
    2050:	c8 f3       	brcs	.-14     	; 0x2044 <pow+0x98>
    2052:	96 38       	cpi	r25, 0x86	; 134
    2054:	c0 f7       	brcc	.-16     	; 0x2046 <pow+0x9a>
    2056:	07 f8       	bld	r0, 7
    2058:	0f 92       	push	r0
    205a:	e8 94       	clt
    205c:	2b e3       	ldi	r18, 0x3B	; 59
    205e:	3a ea       	ldi	r19, 0xAA	; 170
    2060:	48 eb       	ldi	r20, 0xB8	; 184
    2062:	5f e7       	ldi	r21, 0x7F	; 127
    2064:	38 d1       	rcall	.+624    	; 0x22d6 <__mulsf3_pse>
    2066:	0f 92       	push	r0
    2068:	0f 92       	push	r0
    206a:	0f 92       	push	r0
    206c:	4d b7       	in	r20, 0x3d	; 61
    206e:	5e b7       	in	r21, 0x3e	; 62
    2070:	0f 92       	push	r0
    2072:	f2 d0       	rcall	.+484    	; 0x2258 <modf>
    2074:	e4 ee       	ldi	r30, 0xE4	; 228
    2076:	f0 e0       	ldi	r31, 0x00	; 0
    2078:	1f d0       	rcall	.+62     	; 0x20b8 <__fp_powser>
    207a:	4f 91       	pop	r20
    207c:	5f 91       	pop	r21
    207e:	ef 91       	pop	r30
    2080:	ff 91       	pop	r31
    2082:	e5 95       	asr	r30
    2084:	ee 1f       	adc	r30, r30
    2086:	ff 1f       	adc	r31, r31
    2088:	49 f0       	breq	.+18     	; 0x209c <exp+0x4e>
    208a:	fe 57       	subi	r31, 0x7E	; 126
    208c:	e0 68       	ori	r30, 0x80	; 128
    208e:	44 27       	eor	r20, r20
    2090:	ee 0f       	add	r30, r30
    2092:	44 1f       	adc	r20, r20
    2094:	fa 95       	dec	r31
    2096:	e1 f7       	brne	.-8      	; 0x2090 <exp+0x42>
    2098:	41 95       	neg	r20
    209a:	55 0b       	sbc	r21, r21
    209c:	64 d0       	rcall	.+200    	; 0x2166 <ldexp>
    209e:	0f 90       	pop	r0
    20a0:	07 fe       	sbrs	r0, 7
    20a2:	58 c0       	rjmp	.+176    	; 0x2154 <inverse>
    20a4:	08 95       	ret

000020a6 <__fp_inf>:
    20a6:	97 f9       	bld	r25, 7
    20a8:	9f 67       	ori	r25, 0x7F	; 127
    20aa:	80 e8       	ldi	r24, 0x80	; 128
    20ac:	70 e0       	ldi	r23, 0x00	; 0
    20ae:	60 e0       	ldi	r22, 0x00	; 0
    20b0:	08 95       	ret

000020b2 <__fp_nan>:
    20b2:	9f ef       	ldi	r25, 0xFF	; 255
    20b4:	80 ec       	ldi	r24, 0xC0	; 192
    20b6:	08 95       	ret

000020b8 <__fp_powser>:
    20b8:	df 93       	push	r29
    20ba:	cf 93       	push	r28
    20bc:	1f 93       	push	r17
    20be:	0f 93       	push	r16
    20c0:	ff 92       	push	r15
    20c2:	ef 92       	push	r14
    20c4:	df 92       	push	r13
    20c6:	7b 01       	movw	r14, r22
    20c8:	8c 01       	movw	r16, r24
    20ca:	68 94       	set
    20cc:	05 c0       	rjmp	.+10     	; 0x20d8 <__fp_powser+0x20>
    20ce:	da 2e       	mov	r13, r26
    20d0:	ef 01       	movw	r28, r30
    20d2:	ff d0       	rcall	.+510    	; 0x22d2 <__mulsf3x>
    20d4:	fe 01       	movw	r30, r28
    20d6:	e8 94       	clt
    20d8:	a5 91       	lpm	r26, Z+
    20da:	25 91       	lpm	r18, Z+
    20dc:	35 91       	lpm	r19, Z+
    20de:	45 91       	lpm	r20, Z+
    20e0:	55 91       	lpm	r21, Z+
    20e2:	ae f3       	brts	.-22     	; 0x20ce <__fp_powser+0x16>
    20e4:	ef 01       	movw	r28, r30
    20e6:	59 d1       	rcall	.+690    	; 0x239a <__addsf3x>
    20e8:	fe 01       	movw	r30, r28
    20ea:	97 01       	movw	r18, r14
    20ec:	a8 01       	movw	r20, r16
    20ee:	da 94       	dec	r13
    20f0:	79 f7       	brne	.-34     	; 0x20d0 <__fp_powser+0x18>
    20f2:	df 90       	pop	r13
    20f4:	ef 90       	pop	r14
    20f6:	ff 90       	pop	r15
    20f8:	0f 91       	pop	r16
    20fa:	1f 91       	pop	r17
    20fc:	cf 91       	pop	r28
    20fe:	df 91       	pop	r29
    2100:	08 95       	ret

00002102 <__fp_split3>:
    2102:	57 fd       	sbrc	r21, 7
    2104:	90 58       	subi	r25, 0x80	; 128
    2106:	44 0f       	add	r20, r20
    2108:	55 1f       	adc	r21, r21
    210a:	59 f0       	breq	.+22     	; 0x2122 <__fp_splitA+0x10>
    210c:	5f 3f       	cpi	r21, 0xFF	; 255
    210e:	71 f0       	breq	.+28     	; 0x212c <__fp_splitA+0x1a>
    2110:	47 95       	ror	r20

00002112 <__fp_splitA>:
    2112:	88 0f       	add	r24, r24
    2114:	97 fb       	bst	r25, 7
    2116:	99 1f       	adc	r25, r25
    2118:	61 f0       	breq	.+24     	; 0x2132 <__fp_splitA+0x20>
    211a:	9f 3f       	cpi	r25, 0xFF	; 255
    211c:	79 f0       	breq	.+30     	; 0x213c <__fp_splitA+0x2a>
    211e:	87 95       	ror	r24
    2120:	08 95       	ret
    2122:	12 16       	cp	r1, r18
    2124:	13 06       	cpc	r1, r19
    2126:	14 06       	cpc	r1, r20
    2128:	55 1f       	adc	r21, r21
    212a:	f2 cf       	rjmp	.-28     	; 0x2110 <__fp_split3+0xe>
    212c:	46 95       	lsr	r20
    212e:	f1 df       	rcall	.-30     	; 0x2112 <__fp_splitA>
    2130:	08 c0       	rjmp	.+16     	; 0x2142 <__fp_splitA+0x30>
    2132:	16 16       	cp	r1, r22
    2134:	17 06       	cpc	r1, r23
    2136:	18 06       	cpc	r1, r24
    2138:	99 1f       	adc	r25, r25
    213a:	f1 cf       	rjmp	.-30     	; 0x211e <__fp_splitA+0xc>
    213c:	86 95       	lsr	r24
    213e:	71 05       	cpc	r23, r1
    2140:	61 05       	cpc	r22, r1
    2142:	08 94       	sec
    2144:	08 95       	ret

00002146 <__fp_zero>:
    2146:	e8 94       	clt

00002148 <__fp_szero>:
    2148:	bb 27       	eor	r27, r27
    214a:	66 27       	eor	r22, r22
    214c:	77 27       	eor	r23, r23
    214e:	cb 01       	movw	r24, r22
    2150:	97 f9       	bld	r25, 7
    2152:	08 95       	ret

00002154 <inverse>:
    2154:	9b 01       	movw	r18, r22
    2156:	ac 01       	movw	r20, r24
    2158:	60 e0       	ldi	r22, 0x00	; 0
    215a:	70 e0       	ldi	r23, 0x00	; 0
    215c:	80 e8       	ldi	r24, 0x80	; 128
    215e:	9f e3       	ldi	r25, 0x3F	; 63
    2160:	de ca       	rjmp	.-2628   	; 0x171e <__divsf3>
    2162:	a1 cf       	rjmp	.-190    	; 0x20a6 <__fp_inf>
    2164:	6d c1       	rjmp	.+730    	; 0x2440 <__fp_mpack>

00002166 <ldexp>:
    2166:	d5 df       	rcall	.-86     	; 0x2112 <__fp_splitA>
    2168:	e8 f3       	brcs	.-6      	; 0x2164 <inverse+0x10>
    216a:	99 23       	and	r25, r25
    216c:	d9 f3       	breq	.-10     	; 0x2164 <inverse+0x10>
    216e:	94 0f       	add	r25, r20
    2170:	51 1d       	adc	r21, r1
    2172:	bb f3       	brvs	.-18     	; 0x2162 <inverse+0xe>
    2174:	91 50       	subi	r25, 0x01	; 1
    2176:	50 40       	sbci	r21, 0x00	; 0
    2178:	94 f0       	brlt	.+36     	; 0x219e <ldexp+0x38>
    217a:	59 f0       	breq	.+22     	; 0x2192 <ldexp+0x2c>
    217c:	88 23       	and	r24, r24
    217e:	32 f0       	brmi	.+12     	; 0x218c <ldexp+0x26>
    2180:	66 0f       	add	r22, r22
    2182:	77 1f       	adc	r23, r23
    2184:	88 1f       	adc	r24, r24
    2186:	91 50       	subi	r25, 0x01	; 1
    2188:	50 40       	sbci	r21, 0x00	; 0
    218a:	c1 f7       	brne	.-16     	; 0x217c <ldexp+0x16>
    218c:	9e 3f       	cpi	r25, 0xFE	; 254
    218e:	51 05       	cpc	r21, r1
    2190:	44 f7       	brge	.-48     	; 0x2162 <inverse+0xe>
    2192:	88 0f       	add	r24, r24
    2194:	91 1d       	adc	r25, r1
    2196:	96 95       	lsr	r25
    2198:	87 95       	ror	r24
    219a:	97 f9       	bld	r25, 7
    219c:	08 95       	ret
    219e:	5f 3f       	cpi	r21, 0xFF	; 255
    21a0:	ac f0       	brlt	.+42     	; 0x21cc <ldexp+0x66>
    21a2:	98 3e       	cpi	r25, 0xE8	; 232
    21a4:	9c f0       	brlt	.+38     	; 0x21cc <ldexp+0x66>
    21a6:	bb 27       	eor	r27, r27
    21a8:	86 95       	lsr	r24
    21aa:	77 95       	ror	r23
    21ac:	67 95       	ror	r22
    21ae:	b7 95       	ror	r27
    21b0:	08 f4       	brcc	.+2      	; 0x21b4 <ldexp+0x4e>
    21b2:	b1 60       	ori	r27, 0x01	; 1
    21b4:	93 95       	inc	r25
    21b6:	c1 f7       	brne	.-16     	; 0x21a8 <ldexp+0x42>
    21b8:	bb 0f       	add	r27, r27
    21ba:	58 f7       	brcc	.-42     	; 0x2192 <ldexp+0x2c>
    21bc:	11 f4       	brne	.+4      	; 0x21c2 <ldexp+0x5c>
    21be:	60 ff       	sbrs	r22, 0
    21c0:	e8 cf       	rjmp	.-48     	; 0x2192 <ldexp+0x2c>
    21c2:	6f 5f       	subi	r22, 0xFF	; 255
    21c4:	7f 4f       	sbci	r23, 0xFF	; 255
    21c6:	8f 4f       	sbci	r24, 0xFF	; 255
    21c8:	9f 4f       	sbci	r25, 0xFF	; 255
    21ca:	e3 cf       	rjmp	.-58     	; 0x2192 <ldexp+0x2c>
    21cc:	bd cf       	rjmp	.-134    	; 0x2148 <__fp_szero>
    21ce:	0e f0       	brts	.+2      	; 0x21d2 <ldexp+0x6c>
    21d0:	37 c1       	rjmp	.+622    	; 0x2440 <__fp_mpack>
    21d2:	6f cf       	rjmp	.-290    	; 0x20b2 <__fp_nan>
    21d4:	68 94       	set
    21d6:	67 cf       	rjmp	.-306    	; 0x20a6 <__fp_inf>

000021d8 <log>:
    21d8:	9c df       	rcall	.-200    	; 0x2112 <__fp_splitA>
    21da:	c8 f3       	brcs	.-14     	; 0x21ce <ldexp+0x68>
    21dc:	99 23       	and	r25, r25
    21de:	d1 f3       	breq	.-12     	; 0x21d4 <ldexp+0x6e>
    21e0:	c6 f3       	brts	.-16     	; 0x21d2 <ldexp+0x6c>
    21e2:	df 93       	push	r29
    21e4:	cf 93       	push	r28
    21e6:	1f 93       	push	r17
    21e8:	0f 93       	push	r16
    21ea:	ff 92       	push	r15
    21ec:	c9 2f       	mov	r28, r25
    21ee:	dd 27       	eor	r29, r29
    21f0:	88 23       	and	r24, r24
    21f2:	2a f0       	brmi	.+10     	; 0x21fe <log+0x26>
    21f4:	21 97       	sbiw	r28, 0x01	; 1
    21f6:	66 0f       	add	r22, r22
    21f8:	77 1f       	adc	r23, r23
    21fa:	88 1f       	adc	r24, r24
    21fc:	da f7       	brpl	.-10     	; 0x21f4 <log+0x1c>
    21fe:	20 e0       	ldi	r18, 0x00	; 0
    2200:	30 e0       	ldi	r19, 0x00	; 0
    2202:	40 e8       	ldi	r20, 0x80	; 128
    2204:	5f eb       	ldi	r21, 0xBF	; 191
    2206:	9f e3       	ldi	r25, 0x3F	; 63
    2208:	88 39       	cpi	r24, 0x98	; 152
    220a:	20 f0       	brcs	.+8      	; 0x2214 <__stack+0x15>
    220c:	80 3e       	cpi	r24, 0xE0	; 224
    220e:	30 f0       	brcs	.+12     	; 0x221c <__stack+0x1d>
    2210:	21 96       	adiw	r28, 0x01	; 1
    2212:	8f 77       	andi	r24, 0x7F	; 127
    2214:	5d d9       	rcall	.-3398   	; 0x14d0 <__addsf3>
    2216:	ec e0       	ldi	r30, 0x0C	; 12
    2218:	f1 e0       	ldi	r31, 0x01	; 1
    221a:	03 c0       	rjmp	.+6      	; 0x2222 <__stack+0x23>
    221c:	59 d9       	rcall	.-3406   	; 0x14d0 <__addsf3>
    221e:	e9 e3       	ldi	r30, 0x39	; 57
    2220:	f1 e0       	ldi	r31, 0x01	; 1
    2222:	4a df       	rcall	.-364    	; 0x20b8 <__fp_powser>
    2224:	8b 01       	movw	r16, r22
    2226:	be 01       	movw	r22, r28
    2228:	ec 01       	movw	r28, r24
    222a:	fb 2e       	mov	r15, r27
    222c:	6f 57       	subi	r22, 0x7F	; 127
    222e:	71 09       	sbc	r23, r1
    2230:	75 95       	asr	r23
    2232:	77 1f       	adc	r23, r23
    2234:	88 0b       	sbc	r24, r24
    2236:	99 0b       	sbc	r25, r25
    2238:	4e db       	rcall	.-2404   	; 0x18d6 <__floatsisf>
    223a:	28 e1       	ldi	r18, 0x18	; 24
    223c:	32 e7       	ldi	r19, 0x72	; 114
    223e:	41 e3       	ldi	r20, 0x31	; 49
    2240:	5f e3       	ldi	r21, 0x3F	; 63
    2242:	47 d0       	rcall	.+142    	; 0x22d2 <__mulsf3x>
    2244:	af 2d       	mov	r26, r15
    2246:	98 01       	movw	r18, r16
    2248:	ae 01       	movw	r20, r28
    224a:	ff 90       	pop	r15
    224c:	0f 91       	pop	r16
    224e:	1f 91       	pop	r17
    2250:	cf 91       	pop	r28
    2252:	df 91       	pop	r29
    2254:	a2 d0       	rcall	.+324    	; 0x239a <__addsf3x>
    2256:	10 c1       	rjmp	.+544    	; 0x2478 <__fp_round>

00002258 <modf>:
    2258:	fa 01       	movw	r30, r20
    225a:	dc 01       	movw	r26, r24
    225c:	aa 0f       	add	r26, r26
    225e:	bb 1f       	adc	r27, r27
    2260:	9b 01       	movw	r18, r22
    2262:	ac 01       	movw	r20, r24
    2264:	bf 57       	subi	r27, 0x7F	; 127
    2266:	28 f4       	brcc	.+10     	; 0x2272 <modf+0x1a>
    2268:	22 27       	eor	r18, r18
    226a:	33 27       	eor	r19, r19
    226c:	44 27       	eor	r20, r20
    226e:	50 78       	andi	r21, 0x80	; 128
    2270:	1f c0       	rjmp	.+62     	; 0x22b0 <modf+0x58>
    2272:	b7 51       	subi	r27, 0x17	; 23
    2274:	88 f4       	brcc	.+34     	; 0x2298 <modf+0x40>
    2276:	ab 2f       	mov	r26, r27
    2278:	00 24       	eor	r0, r0
    227a:	46 95       	lsr	r20
    227c:	37 95       	ror	r19
    227e:	27 95       	ror	r18
    2280:	01 1c       	adc	r0, r1
    2282:	a3 95       	inc	r26
    2284:	d2 f3       	brmi	.-12     	; 0x227a <modf+0x22>
    2286:	00 20       	and	r0, r0
    2288:	69 f0       	breq	.+26     	; 0x22a4 <modf+0x4c>
    228a:	22 0f       	add	r18, r18
    228c:	33 1f       	adc	r19, r19
    228e:	44 1f       	adc	r20, r20
    2290:	b3 95       	inc	r27
    2292:	da f3       	brmi	.-10     	; 0x228a <modf+0x32>
    2294:	0d d0       	rcall	.+26     	; 0x22b0 <modf+0x58>
    2296:	eb c8       	rjmp	.-3626   	; 0x146e <__subsf3>
    2298:	61 30       	cpi	r22, 0x01	; 1
    229a:	71 05       	cpc	r23, r1
    229c:	a0 e8       	ldi	r26, 0x80	; 128
    229e:	8a 07       	cpc	r24, r26
    22a0:	b9 46       	sbci	r27, 0x69	; 105
    22a2:	30 f4       	brcc	.+12     	; 0x22b0 <modf+0x58>
    22a4:	9b 01       	movw	r18, r22
    22a6:	ac 01       	movw	r20, r24
    22a8:	66 27       	eor	r22, r22
    22aa:	77 27       	eor	r23, r23
    22ac:	88 27       	eor	r24, r24
    22ae:	90 78       	andi	r25, 0x80	; 128
    22b0:	30 96       	adiw	r30, 0x00	; 0
    22b2:	21 f0       	breq	.+8      	; 0x22bc <modf+0x64>
    22b4:	20 83       	st	Z, r18
    22b6:	31 83       	std	Z+1, r19	; 0x01
    22b8:	42 83       	std	Z+2, r20	; 0x02
    22ba:	53 83       	std	Z+3, r21	; 0x03
    22bc:	08 95       	ret
    22be:	ce d0       	rcall	.+412    	; 0x245c <__fp_pscA>
    22c0:	28 f0       	brcs	.+10     	; 0x22cc <modf+0x74>
    22c2:	d3 d0       	rcall	.+422    	; 0x246a <__fp_pscB>
    22c4:	18 f0       	brcs	.+6      	; 0x22cc <modf+0x74>
    22c6:	95 23       	and	r25, r21
    22c8:	09 f0       	breq	.+2      	; 0x22cc <modf+0x74>
    22ca:	ed ce       	rjmp	.-550    	; 0x20a6 <__fp_inf>
    22cc:	f2 ce       	rjmp	.-540    	; 0x20b2 <__fp_nan>
    22ce:	11 24       	eor	r1, r1
    22d0:	3b cf       	rjmp	.-394    	; 0x2148 <__fp_szero>

000022d2 <__mulsf3x>:
    22d2:	17 df       	rcall	.-466    	; 0x2102 <__fp_split3>
    22d4:	a0 f3       	brcs	.-24     	; 0x22be <modf+0x66>

000022d6 <__mulsf3_pse>:
    22d6:	95 9f       	mul	r25, r21
    22d8:	d1 f3       	breq	.-12     	; 0x22ce <modf+0x76>
    22da:	95 0f       	add	r25, r21
    22dc:	50 e0       	ldi	r21, 0x00	; 0
    22de:	55 1f       	adc	r21, r21
    22e0:	62 9f       	mul	r22, r18
    22e2:	f0 01       	movw	r30, r0
    22e4:	72 9f       	mul	r23, r18
    22e6:	bb 27       	eor	r27, r27
    22e8:	f0 0d       	add	r31, r0
    22ea:	b1 1d       	adc	r27, r1
    22ec:	63 9f       	mul	r22, r19
    22ee:	aa 27       	eor	r26, r26
    22f0:	f0 0d       	add	r31, r0
    22f2:	b1 1d       	adc	r27, r1
    22f4:	aa 1f       	adc	r26, r26
    22f6:	64 9f       	mul	r22, r20
    22f8:	66 27       	eor	r22, r22
    22fa:	b0 0d       	add	r27, r0
    22fc:	a1 1d       	adc	r26, r1
    22fe:	66 1f       	adc	r22, r22
    2300:	82 9f       	mul	r24, r18
    2302:	22 27       	eor	r18, r18
    2304:	b0 0d       	add	r27, r0
    2306:	a1 1d       	adc	r26, r1
    2308:	62 1f       	adc	r22, r18
    230a:	73 9f       	mul	r23, r19
    230c:	b0 0d       	add	r27, r0
    230e:	a1 1d       	adc	r26, r1
    2310:	62 1f       	adc	r22, r18
    2312:	83 9f       	mul	r24, r19
    2314:	a0 0d       	add	r26, r0
    2316:	61 1d       	adc	r22, r1
    2318:	22 1f       	adc	r18, r18
    231a:	74 9f       	mul	r23, r20
    231c:	33 27       	eor	r19, r19
    231e:	a0 0d       	add	r26, r0
    2320:	61 1d       	adc	r22, r1
    2322:	23 1f       	adc	r18, r19
    2324:	84 9f       	mul	r24, r20
    2326:	60 0d       	add	r22, r0
    2328:	21 1d       	adc	r18, r1
    232a:	82 2f       	mov	r24, r18
    232c:	76 2f       	mov	r23, r22
    232e:	6a 2f       	mov	r22, r26
    2330:	11 24       	eor	r1, r1
    2332:	9f 57       	subi	r25, 0x7F	; 127
    2334:	50 40       	sbci	r21, 0x00	; 0
    2336:	8a f0       	brmi	.+34     	; 0x235a <__mulsf3_pse+0x84>
    2338:	e1 f0       	breq	.+56     	; 0x2372 <__mulsf3_pse+0x9c>
    233a:	88 23       	and	r24, r24
    233c:	4a f0       	brmi	.+18     	; 0x2350 <__mulsf3_pse+0x7a>
    233e:	ee 0f       	add	r30, r30
    2340:	ff 1f       	adc	r31, r31
    2342:	bb 1f       	adc	r27, r27
    2344:	66 1f       	adc	r22, r22
    2346:	77 1f       	adc	r23, r23
    2348:	88 1f       	adc	r24, r24
    234a:	91 50       	subi	r25, 0x01	; 1
    234c:	50 40       	sbci	r21, 0x00	; 0
    234e:	a9 f7       	brne	.-22     	; 0x233a <__mulsf3_pse+0x64>
    2350:	9e 3f       	cpi	r25, 0xFE	; 254
    2352:	51 05       	cpc	r21, r1
    2354:	70 f0       	brcs	.+28     	; 0x2372 <__mulsf3_pse+0x9c>
    2356:	a7 ce       	rjmp	.-690    	; 0x20a6 <__fp_inf>
    2358:	f7 ce       	rjmp	.-530    	; 0x2148 <__fp_szero>
    235a:	5f 3f       	cpi	r21, 0xFF	; 255
    235c:	ec f3       	brlt	.-6      	; 0x2358 <__mulsf3_pse+0x82>
    235e:	98 3e       	cpi	r25, 0xE8	; 232
    2360:	dc f3       	brlt	.-10     	; 0x2358 <__mulsf3_pse+0x82>
    2362:	86 95       	lsr	r24
    2364:	77 95       	ror	r23
    2366:	67 95       	ror	r22
    2368:	b7 95       	ror	r27
    236a:	f7 95       	ror	r31
    236c:	e7 95       	ror	r30
    236e:	9f 5f       	subi	r25, 0xFF	; 255
    2370:	c1 f7       	brne	.-16     	; 0x2362 <__mulsf3_pse+0x8c>
    2372:	fe 2b       	or	r31, r30
    2374:	88 0f       	add	r24, r24
    2376:	91 1d       	adc	r25, r1
    2378:	96 95       	lsr	r25
    237a:	87 95       	ror	r24
    237c:	97 f9       	bld	r25, 7
    237e:	08 95       	ret
    2380:	6d d0       	rcall	.+218    	; 0x245c <__fp_pscA>
    2382:	30 f0       	brcs	.+12     	; 0x2390 <__mulsf3_pse+0xba>
    2384:	72 d0       	rcall	.+228    	; 0x246a <__fp_pscB>
    2386:	20 f0       	brcs	.+8      	; 0x2390 <__mulsf3_pse+0xba>
    2388:	31 f4       	brne	.+12     	; 0x2396 <__mulsf3_pse+0xc0>
    238a:	9f 3f       	cpi	r25, 0xFF	; 255
    238c:	11 f4       	brne	.+4      	; 0x2392 <__mulsf3_pse+0xbc>
    238e:	1e f4       	brtc	.+6      	; 0x2396 <__mulsf3_pse+0xc0>
    2390:	90 ce       	rjmp	.-736    	; 0x20b2 <__fp_nan>
    2392:	0e f4       	brtc	.+2      	; 0x2396 <__mulsf3_pse+0xc0>
    2394:	e0 95       	com	r30
    2396:	e7 fb       	bst	r30, 7
    2398:	86 ce       	rjmp	.-756    	; 0x20a6 <__fp_inf>

0000239a <__addsf3x>:
    239a:	e9 2f       	mov	r30, r25
    239c:	b2 de       	rcall	.-668    	; 0x2102 <__fp_split3>
    239e:	80 f3       	brcs	.-32     	; 0x2380 <__mulsf3_pse+0xaa>
    23a0:	ba 17       	cp	r27, r26
    23a2:	62 07       	cpc	r22, r18
    23a4:	73 07       	cpc	r23, r19
    23a6:	84 07       	cpc	r24, r20
    23a8:	95 07       	cpc	r25, r21
    23aa:	18 f0       	brcs	.+6      	; 0x23b2 <__addsf3x+0x18>
    23ac:	71 f4       	brne	.+28     	; 0x23ca <__addsf3x+0x30>
    23ae:	9e f5       	brtc	.+102    	; 0x2416 <__addsf3x+0x7c>
    23b0:	ca ce       	rjmp	.-620    	; 0x2146 <__fp_zero>
    23b2:	0e f4       	brtc	.+2      	; 0x23b6 <__addsf3x+0x1c>
    23b4:	e0 95       	com	r30
    23b6:	0b 2e       	mov	r0, r27
    23b8:	ba 2f       	mov	r27, r26
    23ba:	a0 2d       	mov	r26, r0
    23bc:	0b 01       	movw	r0, r22
    23be:	b9 01       	movw	r22, r18
    23c0:	90 01       	movw	r18, r0
    23c2:	0c 01       	movw	r0, r24
    23c4:	ca 01       	movw	r24, r20
    23c6:	a0 01       	movw	r20, r0
    23c8:	11 24       	eor	r1, r1
    23ca:	ff 27       	eor	r31, r31
    23cc:	59 1b       	sub	r21, r25
    23ce:	99 f0       	breq	.+38     	; 0x23f6 <__addsf3x+0x5c>
    23d0:	59 3f       	cpi	r21, 0xF9	; 249
    23d2:	50 f4       	brcc	.+20     	; 0x23e8 <__addsf3x+0x4e>
    23d4:	50 3e       	cpi	r21, 0xE0	; 224
    23d6:	68 f1       	brcs	.+90     	; 0x2432 <__addsf3x+0x98>
    23d8:	1a 16       	cp	r1, r26
    23da:	f0 40       	sbci	r31, 0x00	; 0
    23dc:	a2 2f       	mov	r26, r18
    23de:	23 2f       	mov	r18, r19
    23e0:	34 2f       	mov	r19, r20
    23e2:	44 27       	eor	r20, r20
    23e4:	58 5f       	subi	r21, 0xF8	; 248
    23e6:	f3 cf       	rjmp	.-26     	; 0x23ce <__addsf3x+0x34>
    23e8:	46 95       	lsr	r20
    23ea:	37 95       	ror	r19
    23ec:	27 95       	ror	r18
    23ee:	a7 95       	ror	r26
    23f0:	f0 40       	sbci	r31, 0x00	; 0
    23f2:	53 95       	inc	r21
    23f4:	c9 f7       	brne	.-14     	; 0x23e8 <__addsf3x+0x4e>
    23f6:	7e f4       	brtc	.+30     	; 0x2416 <__addsf3x+0x7c>
    23f8:	1f 16       	cp	r1, r31
    23fa:	ba 0b       	sbc	r27, r26
    23fc:	62 0b       	sbc	r22, r18
    23fe:	73 0b       	sbc	r23, r19
    2400:	84 0b       	sbc	r24, r20
    2402:	ba f0       	brmi	.+46     	; 0x2432 <__addsf3x+0x98>
    2404:	91 50       	subi	r25, 0x01	; 1
    2406:	a1 f0       	breq	.+40     	; 0x2430 <__addsf3x+0x96>
    2408:	ff 0f       	add	r31, r31
    240a:	bb 1f       	adc	r27, r27
    240c:	66 1f       	adc	r22, r22
    240e:	77 1f       	adc	r23, r23
    2410:	88 1f       	adc	r24, r24
    2412:	c2 f7       	brpl	.-16     	; 0x2404 <__addsf3x+0x6a>
    2414:	0e c0       	rjmp	.+28     	; 0x2432 <__addsf3x+0x98>
    2416:	ba 0f       	add	r27, r26
    2418:	62 1f       	adc	r22, r18
    241a:	73 1f       	adc	r23, r19
    241c:	84 1f       	adc	r24, r20
    241e:	48 f4       	brcc	.+18     	; 0x2432 <__addsf3x+0x98>
    2420:	87 95       	ror	r24
    2422:	77 95       	ror	r23
    2424:	67 95       	ror	r22
    2426:	b7 95       	ror	r27
    2428:	f7 95       	ror	r31
    242a:	9e 3f       	cpi	r25, 0xFE	; 254
    242c:	08 f0       	brcs	.+2      	; 0x2430 <__addsf3x+0x96>
    242e:	b3 cf       	rjmp	.-154    	; 0x2396 <__mulsf3_pse+0xc0>
    2430:	93 95       	inc	r25
    2432:	88 0f       	add	r24, r24
    2434:	08 f0       	brcs	.+2      	; 0x2438 <__addsf3x+0x9e>
    2436:	99 27       	eor	r25, r25
    2438:	ee 0f       	add	r30, r30
    243a:	97 95       	ror	r25
    243c:	87 95       	ror	r24
    243e:	08 95       	ret

00002440 <__fp_mpack>:
    2440:	9f 3f       	cpi	r25, 0xFF	; 255
    2442:	31 f0       	breq	.+12     	; 0x2450 <__fp_mpack_finite+0xc>

00002444 <__fp_mpack_finite>:
    2444:	91 50       	subi	r25, 0x01	; 1
    2446:	20 f4       	brcc	.+8      	; 0x2450 <__fp_mpack_finite+0xc>
    2448:	87 95       	ror	r24
    244a:	77 95       	ror	r23
    244c:	67 95       	ror	r22
    244e:	b7 95       	ror	r27
    2450:	88 0f       	add	r24, r24
    2452:	91 1d       	adc	r25, r1
    2454:	96 95       	lsr	r25
    2456:	87 95       	ror	r24
    2458:	97 f9       	bld	r25, 7
    245a:	08 95       	ret

0000245c <__fp_pscA>:
    245c:	00 24       	eor	r0, r0
    245e:	0a 94       	dec	r0
    2460:	16 16       	cp	r1, r22
    2462:	17 06       	cpc	r1, r23
    2464:	18 06       	cpc	r1, r24
    2466:	09 06       	cpc	r0, r25
    2468:	08 95       	ret

0000246a <__fp_pscB>:
    246a:	00 24       	eor	r0, r0
    246c:	0a 94       	dec	r0
    246e:	12 16       	cp	r1, r18
    2470:	13 06       	cpc	r1, r19
    2472:	14 06       	cpc	r1, r20
    2474:	05 06       	cpc	r0, r21
    2476:	08 95       	ret

00002478 <__fp_round>:
    2478:	09 2e       	mov	r0, r25
    247a:	03 94       	inc	r0
    247c:	00 0c       	add	r0, r0
    247e:	11 f4       	brne	.+4      	; 0x2484 <__fp_round+0xc>
    2480:	88 23       	and	r24, r24
    2482:	52 f0       	brmi	.+20     	; 0x2498 <__fp_round+0x20>
    2484:	bb 0f       	add	r27, r27
    2486:	40 f4       	brcc	.+16     	; 0x2498 <__fp_round+0x20>
    2488:	bf 2b       	or	r27, r31
    248a:	11 f4       	brne	.+4      	; 0x2490 <__fp_round+0x18>
    248c:	60 ff       	sbrs	r22, 0
    248e:	04 c0       	rjmp	.+8      	; 0x2498 <__fp_round+0x20>
    2490:	6f 5f       	subi	r22, 0xFF	; 255
    2492:	7f 4f       	sbci	r23, 0xFF	; 255
    2494:	8f 4f       	sbci	r24, 0xFF	; 255
    2496:	9f 4f       	sbci	r25, 0xFF	; 255
    2498:	08 95       	ret

0000249a <_exit>:
    249a:	f8 94       	cli

0000249c <__stop_program>:
    249c:	ff cf       	rjmp	.-2      	; 0x249c <__stop_program>
